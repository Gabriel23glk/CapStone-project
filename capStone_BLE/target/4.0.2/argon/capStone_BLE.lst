
c:/Users/gabea/Documents/IoT/capStone_Motor_01/capStone_BLE/target/4.0.2/argon/capStone_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003bf4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7c10  000b7c10  00007c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7c34  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003df24  000b7c38  0001df24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000860  2003df90  2003df90  0002df90  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7ca4  000b7ca4  00027ca4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7ccc  000b7ccc  00027ccc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e7133  00000000  00000000  00027cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000d939  00000000  00000000  0010ee03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003132c  00000000  00000000  0011c73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026d0  00000000  00000000  0014da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000093e0  00000000  00000000  00150138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000316e5  00000000  00000000  00159518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f2ed  00000000  00000000  0018abfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012c46a  00000000  00000000  001b9eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006e88  00000000  00000000  002e6354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f9fb 	bl	b7428 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fa1d 	bl	b7478 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003df24 	.word	0x2003df24
   b4048:	000b7c38 	.word	0x000b7c38
   b404c:	2003df90 	.word	0x2003df90
   b4050:	2003df90 	.word	0x2003df90
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fe01 	bl	b6c64 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7be0 	.word	0x000b7be0
   b407c:	000b7c04 	.word	0x000b7c04

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b88e 	b.w	b41a0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8fd 	bl	b4284 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bda1 	b.w	b6bd4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bbf5 	b.w	b4880 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bbf3 	b.w	b4880 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bbf9 	b.w	b4890 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f002 fd1b 	bl	b6af6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        }
        Serial.printf("MAC address = %02X:%02X:%02X:%02X:%02X:%02X. RSSI = %i\n",mac[i][0],mac[i][1],mac[i][2],mac[i][3],mac[i][4],mac[i][5],rssi[i]);
    }
  delay(5000);
}
void onDataReceived(const uint8_t* data, size_t len,const BlePeerDevice& peer, void* context) {
   b40cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b40d0:	b092      	sub	sp, #72	; 0x48
   b40d2:	4614      	mov	r4, r2
   b40d4:	460e      	mov	r6, r1
   b40d6:	4605      	mov	r5, r0
    uint8_t h;
    Serial.printf("received data from:%02X:%02X:%02X:%02X:%02X:%02X\n", peer.address()
   b40d8:	f002 fed0 	bl	b6e7c <_Z16_fetch_usbserialv>
   b40dc:	4621      	mov	r1, r4
   b40de:	4607      	mov	r7, r0
   b40e0:	a806      	add	r0, sp, #24
   b40e2:	f001 f85b 	bl	b519c <_ZNK8particle13BlePeerDevice7addressEv>
    [0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   b40e6:	2100      	movs	r1, #0
   b40e8:	a806      	add	r0, sp, #24
   b40ea:	f000 fe57 	bl	b4d9c <_ZNK8particle10BleAddressixEh>
   b40ee:	4621      	mov	r1, r4
   b40f0:	9005      	str	r0, [sp, #20]
   b40f2:	a808      	add	r0, sp, #32
   b40f4:	f001 f852 	bl	b519c <_ZNK8particle13BlePeerDevice7addressEv>
   b40f8:	2101      	movs	r1, #1
   b40fa:	a808      	add	r0, sp, #32
   b40fc:	f000 fe4e 	bl	b4d9c <_ZNK8particle10BleAddressixEh>
   b4100:	4621      	mov	r1, r4
   b4102:	9004      	str	r0, [sp, #16]
   b4104:	a80a      	add	r0, sp, #40	; 0x28
   b4106:	f001 f849 	bl	b519c <_ZNK8particle13BlePeerDevice7addressEv>
   b410a:	2102      	movs	r1, #2
   b410c:	a80a      	add	r0, sp, #40	; 0x28
   b410e:	f000 fe45 	bl	b4d9c <_ZNK8particle10BleAddressixEh>
   b4112:	4621      	mov	r1, r4
   b4114:	4680      	mov	r8, r0
   b4116:	a80c      	add	r0, sp, #48	; 0x30
   b4118:	f001 f840 	bl	b519c <_ZNK8particle13BlePeerDevice7addressEv>
   b411c:	2103      	movs	r1, #3
   b411e:	a80c      	add	r0, sp, #48	; 0x30
   b4120:	f000 fe3c 	bl	b4d9c <_ZNK8particle10BleAddressixEh>
   b4124:	4621      	mov	r1, r4
   b4126:	4681      	mov	r9, r0
   b4128:	a80e      	add	r0, sp, #56	; 0x38
   b412a:	f001 f837 	bl	b519c <_ZNK8particle13BlePeerDevice7addressEv>
   b412e:	2104      	movs	r1, #4
   b4130:	a80e      	add	r0, sp, #56	; 0x38
   b4132:	f000 fe33 	bl	b4d9c <_ZNK8particle10BleAddressixEh>
   b4136:	4621      	mov	r1, r4
   b4138:	4682      	mov	sl, r0
   b413a:	a810      	add	r0, sp, #64	; 0x40
   b413c:	f001 f82e 	bl	b519c <_ZNK8particle13BlePeerDevice7addressEv>
   b4140:	2105      	movs	r1, #5
   b4142:	a810      	add	r0, sp, #64	; 0x40
   b4144:	f000 fe2a 	bl	b4d9c <_ZNK8particle10BleAddressixEh>
    Serial.printf("received data from:%02X:%02X:%02X:%02X:%02X:%02X\n", peer.address()
   b4148:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b414c:	4910      	ldr	r1, [pc, #64]	; (b4190 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc4>)
   b414e:	e9cd a002 	strd	sl, r0, [sp, #8]
   b4152:	e9cd 8900 	strd	r8, r9, [sp]
   b4156:	4638      	mov	r0, r7
   b4158:	f7ff ffa9 	bl	b40ae <_ZN5Print6printfEPKcz>
    Serial.printf("Bytes:");
   b415c:	f002 fe8e 	bl	b6e7c <_Z16_fetch_usbserialv>
   b4160:	490c      	ldr	r1, [pc, #48]	; (b4194 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc8>)
    for (h=0; h<len; h++) {
        Serial.printf("%02X",data[i]);
   b4162:	f8df 8038 	ldr.w	r8, [pc, #56]	; b419c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
   b4166:	4f0c      	ldr	r7, [pc, #48]	; (b4198 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xcc>)
    Serial.printf("Bytes:");
   b4168:	f7ff ffa1 	bl	b40ae <_ZN5Print6printfEPKcz>
   b416c:	2400      	movs	r4, #0
    for (h=0; h<len; h++) {
   b416e:	b2e3      	uxtb	r3, r4
   b4170:	42b3      	cmp	r3, r6
   b4172:	f104 0401 	add.w	r4, r4, #1
   b4176:	d208      	bcs.n	b418a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbe>
        Serial.printf("%02X",data[i]);
   b4178:	f002 fe80 	bl	b6e7c <_Z16_fetch_usbserialv>
   b417c:	f898 3000 	ldrb.w	r3, [r8]
   b4180:	4639      	mov	r1, r7
   b4182:	5cea      	ldrb	r2, [r5, r3]
   b4184:	f7ff ff93 	bl	b40ae <_ZN5Print6printfEPKcz>
    for (h=0; h<len; h++) {
   b4188:	e7f1      	b.n	b416e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa2>
}
   b418a:	b012      	add	sp, #72	; 0x48
   b418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4190:	000b7610 	.word	0x000b7610
   b4194:	000b7642 	.word	0x000b7642
   b4198:	000b7649 	.word	0x000b7649
   b419c:	2003e004 	.word	0x2003e004

000b41a0 <setup>:
void setup() {
   b41a0:	b570      	push	{r4, r5, r6, lr}
   b41a2:	b08e      	sub	sp, #56	; 0x38
    Serial.begin(9600);
   b41a4:	f002 fe6a 	bl	b6e7c <_Z16_fetch_usbserialv>
   b41a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41ac:	f002 fe56 	bl	b6e5c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b41b0:	2000      	movs	r0, #0
   b41b2:	f000 f9b7 	bl	b4524 <hal_timer_millis>
        while (_while() && !_condition()) {
   b41b6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b41ba:	4604      	mov	r4, r0
   b41bc:	2000      	movs	r0, #0
   b41be:	f000 f9b1 	bl	b4524 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b41c2:	1b00      	subs	r0, r0, r4
   b41c4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b41c8:	42a8      	cmp	r0, r5
   b41ca:	f171 0300 	sbcs.w	r3, r1, #0
   b41ce:	d207      	bcs.n	b41e0 <setup+0x40>
    waitFor(Serial.isConnected,10000);
   b41d0:	f002 fe54 	bl	b6e7c <_Z16_fetch_usbserialv>
   b41d4:	f002 fe46 	bl	b6e64 <_ZN9USBSerial11isConnectedEv>
   b41d8:	b910      	cbnz	r0, b41e0 <setup+0x40>
            spark_process();
   b41da:	f000 fb41 	bl	b4860 <spark_process>
        while (_while() && !_condition()) {
   b41de:	e7ed      	b.n	b41bc <setup+0x1c>
   b41e0:	f002 fe4c 	bl	b6e7c <_Z16_fetch_usbserialv>
   b41e4:	f002 fe3e 	bl	b6e64 <_ZN9USBSerial11isConnectedEv>
    BLE.on();
   b41e8:	f001 f842 	bl	b5270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41ec:	f001 f88a 	bl	b5304 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(txCharacteristic);
   b41f0:	f001 f83e 	bl	b5270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41f4:	4a1f      	ldr	r2, [pc, #124]	; (b4274 <setup+0xd4>)
   b41f6:	4c20      	ldr	r4, [pc, #128]	; (b4278 <setup+0xd8>)
   b41f8:	4601      	mov	r1, r0
   b41fa:	a809      	add	r0, sp, #36	; 0x24
   b41fc:	f002 f9c6 	bl	b658c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4200:	a809      	add	r0, sp, #36	; 0x24
   b4202:	f001 f9da 	bl	b55ba <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b4206:	f001 f833 	bl	b5270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b420a:	4a1c      	ldr	r2, [pc, #112]	; (b427c <setup+0xdc>)
   b420c:	4601      	mov	r1, r0
   b420e:	a809      	add	r0, sp, #36	; 0x24
   b4210:	f002 f9bc 	bl	b658c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4214:	a809      	add	r0, sp, #36	; 0x24
   b4216:	f001 f9d0 	bl	b55ba <_ZN8particle17BleCharacteristicD1Ev>
    data.appendServiceUUID(serviceUuid);
   b421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b421c:	ad04      	add	r5, sp, #16
   b421e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4220:	ad04      	add	r5, sp, #16
   b4222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4224:	6826      	ldr	r6, [r4, #0]
   b4226:	ac09      	add	r4, sp, #36	; 0x24
   b4228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b422a:	a809      	add	r0, sp, #36	; 0x24
        BleUuid tempUUID(uuid);
   b422c:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b422e:	f000 fe37 	bl	b4ea0 <_ZNK8particle7BleUuid4typeEv>
   b4232:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4234:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4236:	b9a4      	cbnz	r4, b4262 <setup+0xc2>
            uint16_t uuid16 = tempUUID.shorted();
   b4238:	f000 fe4e 	bl	b4ed8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b423c:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b423e:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4242:	2302      	movs	r3, #2
   b4244:	f10d 020e 	add.w	r2, sp, #14
   b4248:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b424a:	480d      	ldr	r0, [pc, #52]	; (b4280 <setup+0xe0>)
   b424c:	f001 fcd6 	bl	b5bfc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b4250:	f001 f80e 	bl	b5270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4254:	490a      	ldr	r1, [pc, #40]	; (b4280 <setup+0xe0>)
   b4256:	2200      	movs	r2, #0
}
   b4258:	b00e      	add	sp, #56	; 0x38
   b425a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BLE.advertise(&data);
   b425e:	f001 b94f 	b.w	b5500 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
   b4262:	f000 fe3b 	bl	b4edc <_ZNK8particle7BleUuid8rawBytesEv>
   b4266:	2300      	movs	r3, #0
   b4268:	9300      	str	r3, [sp, #0]
   b426a:	4602      	mov	r2, r0
   b426c:	2310      	movs	r3, #16
   b426e:	2107      	movs	r1, #7
   b4270:	e7eb      	b.n	b424a <setup+0xaa>
   b4272:	bf00      	nop
   b4274:	2003e6c8 	.word	0x2003e6c8
   b4278:	2003df9c 	.word	0x2003df9c
   b427c:	2003e120 	.word	0x2003e120
   b4280:	2003dff8 	.word	0x2003dff8

000b4284 <loop>:
void loop() {
   b4284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4288:	b089      	sub	sp, #36	; 0x24
    BLE.setScanTimeout(500);
   b428a:	f000 fff1 	bl	b5270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b428e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b4292:	f001 f885 	bl	b53a0 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    count=BLE.scan(scanResults,SCAN_RESULT_MAX);
   b4296:	f000 ffeb 	bl	b5270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b429a:	492c      	ldr	r1, [pc, #176]	; (b434c <loop+0xc8>)
   b429c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b4360 <loop+0xdc>
   b42a0:	4c2b      	ldr	r4, [pc, #172]	; (b4350 <loop+0xcc>)
   b42a2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b4364 <loop+0xe0>
   b42a6:	4d29      	ldr	r5, [pc, #164]	; (b434c <loop+0xc8>)
        scanResults[i].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b42a8:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b4368 <loop+0xe4>
        for(j=0;j<6;j++){
   b42ac:	4f29      	ldr	r7, [pc, #164]	; (b4354 <loop+0xd0>)
    count=BLE.scan(scanResults,SCAN_RESULT_MAX);
   b42ae:	2228      	movs	r2, #40	; 0x28
   b42b0:	f001 f8d2 	bl	b5458 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   b42b4:	f889 0000 	strb.w	r0, [r9]
    Serial.printf("%i devices found\n",count);
   b42b8:	f002 fde0 	bl	b6e7c <_Z16_fetch_usbserialv>
   b42bc:	f899 2000 	ldrb.w	r2, [r9]
   b42c0:	4925      	ldr	r1, [pc, #148]	; (b4358 <loop+0xd4>)
   b42c2:	f7ff fef4 	bl	b40ae <_ZN5Print6printfEPKcz>
    for (int i=0; i < count; i++) {
   b42c6:	2600      	movs	r6, #0
   b42c8:	46a2      	mov	sl, r4
   b42ca:	f899 3000 	ldrb.w	r3, [r9]
   b42ce:	42b3      	cmp	r3, r6
   b42d0:	dd34      	ble.n	b433c <loop+0xb8>
        scanResults[i].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b42d2:	231f      	movs	r3, #31
   b42d4:	465a      	mov	r2, fp
   b42d6:	21ff      	movs	r1, #255	; 0xff
   b42d8:	f105 0008 	add.w	r0, r5, #8
   b42dc:	f000 fe8a 	bl	b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        for(j=0;j<6;j++){
   b42e0:	2300      	movs	r3, #0
            mac[i][j]=scanResults[i].address()[j];
   b42e2:	2206      	movs	r2, #6
        for(j=0;j<6;j++){
   b42e4:	703b      	strb	r3, [r7, #0]
            mac[i][j]=scanResults[i].address()[j];
   b42e6:	fb02 a206 	mla	r2, r2, r6, sl
        for(j=0;j<6;j++){
   b42ea:	7839      	ldrb	r1, [r7, #0]
   b42ec:	9207      	str	r2, [sp, #28]
   b42ee:	2905      	cmp	r1, #5
   b42f0:	d80e      	bhi.n	b4310 <loop+0x8c>
            mac[i][j]=scanResults[i].address()[j];
   b42f2:	4628      	mov	r0, r5
   b42f4:	9106      	str	r1, [sp, #24]
   b42f6:	f000 fd51 	bl	b4d9c <_ZNK8particle10BleAddressixEh>
            rssi[i]=scanResults[i].rssi();
   b42fa:	f895 3020 	ldrb.w	r3, [r5, #32]
   b42fe:	f888 3000 	strb.w	r3, [r8]
            mac[i][j]=scanResults[i].address()[j];
   b4302:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
        for(j=0;j<6;j++){
   b4306:	783b      	ldrb	r3, [r7, #0]
            mac[i][j]=scanResults[i].address()[j];
   b4308:	5450      	strb	r0, [r2, r1]
        for(j=0;j<6;j++){
   b430a:	3301      	adds	r3, #1
   b430c:	703b      	strb	r3, [r7, #0]
   b430e:	e7ec      	b.n	b42ea <loop+0x66>
        Serial.printf("MAC address = %02X:%02X:%02X:%02X:%02X:%02X. RSSI = %i\n",mac[i][0],mac[i][1],mac[i][2],mac[i][3],mac[i][4],mac[i][5],rssi[i]);
   b4310:	f002 fdb4 	bl	b6e7c <_Z16_fetch_usbserialv>
   b4314:	f918 3b01 	ldrsb.w	r3, [r8], #1
   b4318:	9304      	str	r3, [sp, #16]
   b431a:	7963      	ldrb	r3, [r4, #5]
   b431c:	9303      	str	r3, [sp, #12]
   b431e:	7923      	ldrb	r3, [r4, #4]
   b4320:	9302      	str	r3, [sp, #8]
   b4322:	78e3      	ldrb	r3, [r4, #3]
   b4324:	9301      	str	r3, [sp, #4]
   b4326:	78a3      	ldrb	r3, [r4, #2]
   b4328:	7822      	ldrb	r2, [r4, #0]
   b432a:	9300      	str	r3, [sp, #0]
   b432c:	490b      	ldr	r1, [pc, #44]	; (b435c <loop+0xd8>)
   b432e:	7863      	ldrb	r3, [r4, #1]
   b4330:	f7ff febd 	bl	b40ae <_ZN5Print6printfEPKcz>
    for (int i=0; i < count; i++) {
   b4334:	3601      	adds	r6, #1
   b4336:	3406      	adds	r4, #6
   b4338:	3524      	adds	r5, #36	; 0x24
   b433a:	e7c6      	b.n	b42ca <loop+0x46>
  delay(5000);
   b433c:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b4340:	b009      	add	sp, #36	; 0x24
   b4342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(5000);
   b4346:	f002 bc19 	b.w	b6b7c <delay>
   b434a:	bf00      	nop
   b434c:	2003e128 	.word	0x2003e128
   b4350:	2003e006 	.word	0x2003e006
   b4354:	2003e005 	.word	0x2003e005
   b4358:	000b764e 	.word	0x000b764e
   b435c:	000b7660 	.word	0x000b7660
   b4360:	2003dff7 	.word	0x2003dff7
   b4364:	2003e0f6 	.word	0x2003e0f6
   b4368:	2003dfd8 	.word	0x2003dfd8

000b436c <_GLOBAL__sub_I_txBuf>:
   b436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4370:	4949      	ldr	r1, [pc, #292]	; (b4498 <_GLOBAL__sub_I_txBuf+0x12c>)
   b4372:	484a      	ldr	r0, [pc, #296]	; (b449c <_GLOBAL__sub_I_txBuf+0x130>)
   b4374:	4c4a      	ldr	r4, [pc, #296]	; (b44a0 <_GLOBAL__sub_I_txBuf+0x134>)
   b4376:	f8df 8124 	ldr.w	r8, [pc, #292]	; b449c <_GLOBAL__sub_I_txBuf+0x130>
   b437a:	b099      	sub	sp, #100	; 0x64
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b437c:	f000 fe2e 	bl	b4fdc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4380:	4948      	ldr	r1, [pc, #288]	; (b44a4 <_GLOBAL__sub_I_txBuf+0x138>)
   b4382:	4849      	ldr	r0, [pc, #292]	; (b44a8 <_GLOBAL__sub_I_txBuf+0x13c>)
   b4384:	f000 fe2a 	bl	b4fdc <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4388:	4948      	ldr	r1, [pc, #288]	; (b44ac <_GLOBAL__sub_I_txBuf+0x140>)
   b438a:	4845      	ldr	r0, [pc, #276]	; (b44a0 <_GLOBAL__sub_I_txBuf+0x134>)
   b438c:	f000 fe26 	bl	b4fdc <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4392:	f10d 0a10 	add.w	sl, sp, #16
   b4396:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b439a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b439e:	6827      	ldr	r7, [r4, #0]
   b43a0:	f8ca 7000 	str.w	r7, [sl]
   b43a4:	ae09      	add	r6, sp, #36	; 0x24
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b43a6:	ac04      	add	r4, sp, #16
   b43a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b43aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b43ac:	ad0e      	add	r5, sp, #56	; 0x38
   b43ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b43b0:	46c1      	mov	r9, r8
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b43b2:	f8df c118 	ldr.w	ip, [pc, #280]	; b44cc <_GLOBAL__sub_I_txBuf+0x160>
   b43b6:	f859 e910 	ldr.w	lr, [r9], #-16
   b43ba:	f8c6 e000 	str.w	lr, [r6]
   b43be:	f04f 0b00 	mov.w	fp, #0
   b43c2:	602f      	str	r7, [r5, #0]
        BleUuid sUuid(svcUuid);
   b43c4:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b43c6:	e9cc bb00 	strd	fp, fp, [ip]
   b43ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b43cc:	ac13      	add	r4, sp, #76	; 0x4c
   b43ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b43d0:	af13      	add	r7, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
   b43d2:	f8c4 e000 	str.w	lr, [r4]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b43d6:	4660      	mov	r0, ip
   b43d8:	4935      	ldr	r1, [pc, #212]	; (b44b0 <_GLOBAL__sub_I_txBuf+0x144>)
   b43da:	9700      	str	r7, [sp, #0]
   b43dc:	ab0e      	add	r3, sp, #56	; 0x38
   b43de:	f04f 0210 	mov.w	r2, #16
   b43e2:	e9cd bb01 	strd	fp, fp, [sp, #4]
   b43e6:	f001 ffa7 	bl	b6338 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b43ea:	f8df c0bc 	ldr.w	ip, [pc, #188]	; b44a8 <_GLOBAL__sub_I_txBuf+0x13c>
   b43ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b43f2:	f10d 0e10 	add.w	lr, sp, #16
   b43f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b43fa:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b43fe:	f8dc c000 	ldr.w	ip, [ip]
   b4402:	f8ca c000 	str.w	ip, [sl]
   b4406:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b440a:	f10d 0910 	add.w	r9, sp, #16
   b440e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b4412:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b4416:	f8d8 e000 	ldr.w	lr, [r8]
   b441a:	f8c6 e000 	str.w	lr, [r6]
   b441e:	ae0e      	add	r6, sp, #56	; 0x38
   b4420:	c60f      	stmia	r6!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b4422:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b44d0 <_GLOBAL__sub_I_txBuf+0x164>
   b4426:	f8c5 c000 	str.w	ip, [r5]
        BleUuid sUuid(svcUuid);
   b442a:	ae09      	add	r6, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b442c:	e9c8 bb00 	strd	fp, fp, [r8]
   b4430:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4432:	463d      	mov	r5, r7
   b4434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4436:	4b1f      	ldr	r3, [pc, #124]	; (b44b4 <_GLOBAL__sub_I_txBuf+0x148>)
        BleUuid sUuid(svcUuid);
   b4438:	f8c4 e000 	str.w	lr, [r4]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b443c:	491e      	ldr	r1, [pc, #120]	; (b44b8 <_GLOBAL__sub_I_txBuf+0x14c>)
   b443e:	f8cd b008 	str.w	fp, [sp, #8]
   b4442:	e9cd 7300 	strd	r7, r3, [sp]
   b4446:	f04f 0204 	mov.w	r2, #4
   b444a:	ab0e      	add	r3, sp, #56	; 0x38
   b444c:	4640      	mov	r0, r8
   b444e:	f001 ff73 	bl	b6338 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
BleAdvertisingData data;
   b4452:	481a      	ldr	r0, [pc, #104]	; (b44bc <_GLOBAL__sub_I_txBuf+0x150>)
   b4454:	4c1a      	ldr	r4, [pc, #104]	; (b44c0 <_GLOBAL__sub_I_txBuf+0x154>)
   b4456:	f001 fbdc 	bl	b5c12 <_ZN8particle18BleAdvertisingDataC1Ev>
   b445a:	2528      	movs	r5, #40	; 0x28


class BleScanResult {
public:
    BleScanResult()
            : rssi_(BLE_RSSI_INVALID) {
   b445c:	267f      	movs	r6, #127	; 0x7f
   b445e:	4620      	mov	r0, r4
   b4460:	f000 fcc2 	bl	b4de8 <_ZN8particle10BleAddressC1Ev>
   b4464:	f104 0008 	add.w	r0, r4, #8
   b4468:	f001 fbd3 	bl	b5c12 <_ZN8particle18BleAdvertisingDataC1Ev>
   b446c:	f104 0014 	add.w	r0, r4, #20
   b4470:	f001 fbcf 	bl	b5c12 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_MAX];
   b4474:	3d01      	subs	r5, #1
   b4476:	f884 6020 	strb.w	r6, [r4, #32]
   b447a:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b447e:	d1ee      	bne.n	b445e <_GLOBAL__sub_I_txBuf+0xf2>
              error_(SYSTEM_ERROR_NONE) {
   b4480:	4b10      	ldr	r3, [pc, #64]	; (b44c4 <_GLOBAL__sub_I_txBuf+0x158>)
    SleepResult() {}
   b4482:	4a11      	ldr	r2, [pc, #68]	; (b44c8 <_GLOBAL__sub_I_txBuf+0x15c>)
   b4484:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4486:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   b4488:	e9c3 5500 	strd	r5, r5, [r3]
   b448c:	b019      	add	sp, #100	; 0x64
   b448e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        set_system_mode(mode);
   b4492:	f000 b961 	b.w	b4758 <set_system_mode>
   b4496:	bf00      	nop
   b4498:	000b7698 	.word	0x000b7698
   b449c:	2003df9c 	.word	0x2003df9c
   b44a0:	2003dfc4 	.word	0x2003dfc4
   b44a4:	000b76bd 	.word	0x000b76bd
   b44a8:	2003dfb0 	.word	0x2003dfb0
   b44ac:	000b76e2 	.word	0x000b76e2
   b44b0:	000b7707 	.word	0x000b7707
   b44b4:	000b40cd 	.word	0x000b40cd
   b44b8:	000b770a 	.word	0x000b770a
   b44bc:	2003dff8 	.word	0x2003dff8
   b44c0:	2003e128 	.word	0x2003e128
   b44c4:	2003df90 	.word	0x2003df90
   b44c8:	ffff0000 	.word	0xffff0000
   b44cc:	2003e6c8 	.word	0x2003e6c8
   b44d0:	2003e120 	.word	0x2003e120

000b44d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <netdb_freeaddrinfo+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	689b      	ldr	r3, [r3, #8]
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	00030268 	.word	0x00030268

000b44e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b02      	ldr	r3, [pc, #8]	; (b44f0 <netdb_getaddrinfo+0xc>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	68db      	ldr	r3, [r3, #12]
   b44ec:	9301      	str	r3, [sp, #4]
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	00030268 	.word	0x00030268

000b44f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <HAL_RNG_GetRandomNumber+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	685b      	ldr	r3, [r3, #4]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	00030218 	.word	0x00030218

000b4504 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <HAL_Delay_Microseconds+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	68db      	ldr	r3, [r3, #12]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	00030218 	.word	0x00030218

000b4514 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	695b      	ldr	r3, [r3, #20]
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	00030218 	.word	0x00030218

000b4524 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <hal_timer_millis+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	00030218 	.word	0x00030218

000b4534 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <hal_ble_stack_init+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	689b      	ldr	r3, [r3, #8]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	00030278 	.word	0x00030278

000b4544 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <hal_ble_gap_set_advertising_data+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030278 	.word	0x00030278

000b4554 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <hal_ble_gap_set_scan_response_data+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	00030278 	.word	0x00030278

000b4564 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <hal_ble_gap_start_advertising+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	00030278 	.word	0x00030278

000b4574 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <hal_ble_gap_set_scan_parameters+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	00030278 	.word	0x00030278

000b4584 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <hal_ble_gap_get_scan_parameters+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	00030278 	.word	0x00030278

000b4594 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <hal_ble_gap_start_scan+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	00030278 	.word	0x00030278

000b45a4 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b03      	ldr	r3, [pc, #12]	; (b45b4 <hal_ble_gap_stop_scan+0x10>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b45ae:	9301      	str	r3, [sp, #4]
   b45b0:	bd08      	pop	{r3, pc}
   b45b2:	0000      	.short	0x0000
   b45b4:	00030278 	.word	0x00030278

000b45b8 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b03      	ldr	r3, [pc, #12]	; (b45c8 <hal_ble_gap_disconnect+0x10>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b45c2:	9301      	str	r3, [sp, #4]
   b45c4:	bd08      	pop	{r3, pc}
   b45c6:	0000      	.short	0x0000
   b45c8:	00030278 	.word	0x00030278

000b45cc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b03      	ldr	r3, [pc, #12]	; (b45dc <hal_ble_gatt_server_add_service+0x10>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b45d6:	9301      	str	r3, [sp, #4]
   b45d8:	bd08      	pop	{r3, pc}
   b45da:	0000      	.short	0x0000
   b45dc:	00030278 	.word	0x00030278

000b45e0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b03      	ldr	r3, [pc, #12]	; (b45f0 <hal_ble_gatt_server_add_characteristic+0x10>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b45ea:	9301      	str	r3, [sp, #4]
   b45ec:	bd08      	pop	{r3, pc}
   b45ee:	0000      	.short	0x0000
   b45f0:	00030278 	.word	0x00030278

000b45f4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b03      	ldr	r3, [pc, #12]	; (b4604 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b45fe:	9301      	str	r3, [sp, #4]
   b4600:	bd08      	pop	{r3, pc}
   b4602:	0000      	.short	0x0000
   b4604:	00030278 	.word	0x00030278

000b4608 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <os_mutex_recursive_create+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	00030248 	.word	0x00030248

000b4618 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <os_mutex_recursive_lock+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	00030248 	.word	0x00030248

000b4628 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <os_mutex_recursive_unlock+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	00030248 	.word	0x00030248

000b4638 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <inet_inet_ntop+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	695b      	ldr	r3, [r3, #20]
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	00030264 	.word	0x00030264

000b4648 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <hal_usart_write+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	68db      	ldr	r3, [r3, #12]
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	0003023c 	.word	0x0003023c

000b4658 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <hal_usart_available+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	691b      	ldr	r3, [r3, #16]
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	0003023c 	.word	0x0003023c

000b4668 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <hal_usart_read+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	695b      	ldr	r3, [r3, #20]
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	0003023c 	.word	0x0003023c

000b4678 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <hal_usart_peek+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	699b      	ldr	r3, [r3, #24]
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	0003023c 	.word	0x0003023c

000b4688 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <hal_usart_flush+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	69db      	ldr	r3, [r3, #28]
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	0003023c 	.word	0x0003023c

000b4698 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <hal_usart_available_data_for_write+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	0003023c 	.word	0x0003023c

000b46a8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <hal_usart_init_ex+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	0003023c 	.word	0x0003023c

000b46b8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <HAL_USB_USART_Init+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	681b      	ldr	r3, [r3, #0]
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	0003024c 	.word	0x0003024c

000b46c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <HAL_USB_USART_Begin+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	685b      	ldr	r3, [r3, #4]
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	0003024c 	.word	0x0003024c

000b46d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <HAL_USB_USART_Available_Data+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	691b      	ldr	r3, [r3, #16]
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	0003024c 	.word	0x0003024c

000b46e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	695b      	ldr	r3, [r3, #20]
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	0003024c 	.word	0x0003024c

000b46f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <HAL_USB_USART_Receive_Data+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	699b      	ldr	r3, [r3, #24]
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	0003024c 	.word	0x0003024c

000b4708 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <HAL_USB_USART_Send_Data+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	69db      	ldr	r3, [r3, #28]
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	0003024c 	.word	0x0003024c

000b4718 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <HAL_USB_USART_Flush_Data+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	6a1b      	ldr	r3, [r3, #32]
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	0003024c 	.word	0x0003024c

000b4728 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <HAL_USB_USART_Is_Connected+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	0003024c 	.word	0x0003024c

000b4738 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <panic_+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	00030260 	.word	0x00030260

000b4748 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <log_message+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	00030260 	.word	0x00030260

000b4758 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <set_system_mode+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	685b      	ldr	r3, [r3, #4]
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	00030220 	.word	0x00030220

000b4768 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <system_delay_ms+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	695b      	ldr	r3, [r3, #20]
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030220 	.word	0x00030220

000b4778 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b03      	ldr	r3, [pc, #12]	; (b4788 <system_ctrl_set_app_request_handler+0x10>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4782:	9301      	str	r3, [sp, #4]
   b4784:	bd08      	pop	{r3, pc}
   b4786:	0000      	.short	0x0000
   b4788:	00030220 	.word	0x00030220

000b478c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b03      	ldr	r3, [pc, #12]	; (b479c <system_ctrl_set_result+0x10>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4796:	9301      	str	r3, [sp, #4]
   b4798:	bd08      	pop	{r3, pc}
   b479a:	0000      	.short	0x0000
   b479c:	00030220 	.word	0x00030220

000b47a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b47a0:	b508      	push	{r3, lr}
   b47a2:	4b02      	ldr	r3, [pc, #8]	; (b47ac <network_connect+0xc>)
   b47a4:	681b      	ldr	r3, [r3, #0]
   b47a6:	685b      	ldr	r3, [r3, #4]
   b47a8:	9301      	str	r3, [sp, #4]
   b47aa:	bd08      	pop	{r3, pc}
   b47ac:	00030240 	.word	0x00030240

000b47b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b47b0:	b508      	push	{r3, lr}
   b47b2:	4b02      	ldr	r3, [pc, #8]	; (b47bc <network_connecting+0xc>)
   b47b4:	681b      	ldr	r3, [r3, #0]
   b47b6:	689b      	ldr	r3, [r3, #8]
   b47b8:	9301      	str	r3, [sp, #4]
   b47ba:	bd08      	pop	{r3, pc}
   b47bc:	00030240 	.word	0x00030240

000b47c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b02      	ldr	r3, [pc, #8]	; (b47cc <network_disconnect+0xc>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	68db      	ldr	r3, [r3, #12]
   b47c8:	9301      	str	r3, [sp, #4]
   b47ca:	bd08      	pop	{r3, pc}
   b47cc:	00030240 	.word	0x00030240

000b47d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b47d0:	b508      	push	{r3, lr}
   b47d2:	4b02      	ldr	r3, [pc, #8]	; (b47dc <network_ready+0xc>)
   b47d4:	681b      	ldr	r3, [r3, #0]
   b47d6:	691b      	ldr	r3, [r3, #16]
   b47d8:	9301      	str	r3, [sp, #4]
   b47da:	bd08      	pop	{r3, pc}
   b47dc:	00030240 	.word	0x00030240

000b47e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b47e0:	b508      	push	{r3, lr}
   b47e2:	4b02      	ldr	r3, [pc, #8]	; (b47ec <network_on+0xc>)
   b47e4:	681b      	ldr	r3, [r3, #0]
   b47e6:	695b      	ldr	r3, [r3, #20]
   b47e8:	9301      	str	r3, [sp, #4]
   b47ea:	bd08      	pop	{r3, pc}
   b47ec:	00030240 	.word	0x00030240

000b47f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b47f0:	b508      	push	{r3, lr}
   b47f2:	4b02      	ldr	r3, [pc, #8]	; (b47fc <network_off+0xc>)
   b47f4:	681b      	ldr	r3, [r3, #0]
   b47f6:	699b      	ldr	r3, [r3, #24]
   b47f8:	9301      	str	r3, [sp, #4]
   b47fa:	bd08      	pop	{r3, pc}
   b47fc:	00030240 	.word	0x00030240

000b4800 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4800:	b508      	push	{r3, lr}
   b4802:	4b02      	ldr	r3, [pc, #8]	; (b480c <network_listen+0xc>)
   b4804:	681b      	ldr	r3, [r3, #0]
   b4806:	69db      	ldr	r3, [r3, #28]
   b4808:	9301      	str	r3, [sp, #4]
   b480a:	bd08      	pop	{r3, pc}
   b480c:	00030240 	.word	0x00030240

000b4810 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4810:	b508      	push	{r3, lr}
   b4812:	4b02      	ldr	r3, [pc, #8]	; (b481c <network_listening+0xc>)
   b4814:	681b      	ldr	r3, [r3, #0]
   b4816:	6a1b      	ldr	r3, [r3, #32]
   b4818:	9301      	str	r3, [sp, #4]
   b481a:	bd08      	pop	{r3, pc}
   b481c:	00030240 	.word	0x00030240

000b4820 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4820:	b508      	push	{r3, lr}
   b4822:	4b02      	ldr	r3, [pc, #8]	; (b482c <network_set_listen_timeout+0xc>)
   b4824:	681b      	ldr	r3, [r3, #0]
   b4826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4828:	9301      	str	r3, [sp, #4]
   b482a:	bd08      	pop	{r3, pc}
   b482c:	00030240 	.word	0x00030240

000b4830 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4830:	b508      	push	{r3, lr}
   b4832:	4b02      	ldr	r3, [pc, #8]	; (b483c <network_get_listen_timeout+0xc>)
   b4834:	681b      	ldr	r3, [r3, #0]
   b4836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4838:	9301      	str	r3, [sp, #4]
   b483a:	bd08      	pop	{r3, pc}
   b483c:	00030240 	.word	0x00030240

000b4840 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b02      	ldr	r3, [pc, #8]	; (b484c <network_is_on+0xc>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4848:	9301      	str	r3, [sp, #4]
   b484a:	bd08      	pop	{r3, pc}
   b484c:	00030240 	.word	0x00030240

000b4850 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4850:	b508      	push	{r3, lr}
   b4852:	4b02      	ldr	r3, [pc, #8]	; (b485c <network_is_off+0xc>)
   b4854:	681b      	ldr	r3, [r3, #0]
   b4856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4858:	9301      	str	r3, [sp, #4]
   b485a:	bd08      	pop	{r3, pc}
   b485c:	00030240 	.word	0x00030240

000b4860 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b02      	ldr	r3, [pc, #8]	; (b486c <spark_process+0xc>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	689b      	ldr	r3, [r3, #8]
   b4868:	9301      	str	r3, [sp, #4]
   b486a:	bd08      	pop	{r3, pc}
   b486c:	00030244 	.word	0x00030244

000b4870 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4870:	b508      	push	{r3, lr}
   b4872:	4b02      	ldr	r3, [pc, #8]	; (b487c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4874:	681b      	ldr	r3, [r3, #0]
   b4876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4878:	9301      	str	r3, [sp, #4]
   b487a:	bd08      	pop	{r3, pc}
   b487c:	00030244 	.word	0x00030244

000b4880 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4880:	b508      	push	{r3, lr}
   b4882:	4b02      	ldr	r3, [pc, #8]	; (b488c <malloc+0xc>)
   b4884:	681b      	ldr	r3, [r3, #0]
   b4886:	681b      	ldr	r3, [r3, #0]
   b4888:	9301      	str	r3, [sp, #4]
   b488a:	bd08      	pop	{r3, pc}
   b488c:	0003021c 	.word	0x0003021c

000b4890 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <free+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	685b      	ldr	r3, [r3, #4]
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	0003021c 	.word	0x0003021c

000b48a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <realloc+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	689b      	ldr	r3, [r3, #8]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	0003021c 	.word	0x0003021c

000b48b0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <vsnprintf+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	0003021c 	.word	0x0003021c

000b48c0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <abort+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	0003021c 	.word	0x0003021c

000b48d0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <__assert_func+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	0003021c 	.word	0x0003021c

000b48e0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <newlib_impure_ptr_callback+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	0003021c 	.word	0x0003021c

000b48f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b48f0:	2200      	movs	r2, #0
   b48f2:	6840      	ldr	r0, [r0, #4]
   b48f4:	4611      	mov	r1, r2
   b48f6:	f7ff bf8b 	b.w	b4810 <network_listening>

000b48fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b48fa:	2200      	movs	r2, #0
   b48fc:	6840      	ldr	r0, [r0, #4]
   b48fe:	4611      	mov	r1, r2
   b4900:	f7ff bf96 	b.w	b4830 <network_get_listen_timeout>

000b4904 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4904:	6840      	ldr	r0, [r0, #4]
   b4906:	2200      	movs	r2, #0
   b4908:	f7ff bf8a 	b.w	b4820 <network_set_listen_timeout>

000b490c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b490c:	6840      	ldr	r0, [r0, #4]
   b490e:	2200      	movs	r2, #0
   b4910:	f081 0101 	eor.w	r1, r1, #1
   b4914:	f7ff bf74 	b.w	b4800 <network_listen>

000b4918 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4918:	2300      	movs	r3, #0
   b491a:	6840      	ldr	r0, [r0, #4]
   b491c:	461a      	mov	r2, r3
   b491e:	4619      	mov	r1, r3
   b4920:	f7ff bf66 	b.w	b47f0 <network_off>

000b4924 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4924:	2300      	movs	r3, #0
   b4926:	6840      	ldr	r0, [r0, #4]
   b4928:	461a      	mov	r2, r3
   b492a:	4619      	mov	r1, r3
   b492c:	f7ff bf58 	b.w	b47e0 <network_on>

000b4930 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4930:	2200      	movs	r2, #0
   b4932:	6840      	ldr	r0, [r0, #4]
   b4934:	4611      	mov	r1, r2
   b4936:	f7ff bf4b 	b.w	b47d0 <network_ready>

000b493a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b493a:	2200      	movs	r2, #0
   b493c:	6840      	ldr	r0, [r0, #4]
   b493e:	4611      	mov	r1, r2
   b4940:	f7ff bf36 	b.w	b47b0 <network_connecting>

000b4944 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4944:	6840      	ldr	r0, [r0, #4]
   b4946:	2200      	movs	r2, #0
   b4948:	2102      	movs	r1, #2
   b494a:	f7ff bf39 	b.w	b47c0 <network_disconnect>

000b494e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b494e:	2300      	movs	r3, #0
   b4950:	6840      	ldr	r0, [r0, #4]
   b4952:	461a      	mov	r2, r3
   b4954:	f7ff bf24 	b.w	b47a0 <network_connect>

000b4958 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4958:	4b02      	ldr	r3, [pc, #8]	; (b4964 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b495a:	2203      	movs	r2, #3
   b495c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b495e:	4a02      	ldr	r2, [pc, #8]	; (b4968 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4960:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4962:	4770      	bx	lr
   b4964:	2003e6d0 	.word	0x2003e6d0
   b4968:	000b7718 	.word	0x000b7718

000b496c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b496c:	4b05      	ldr	r3, [pc, #20]	; (b4984 <_GLOBAL__sub_I_System+0x18>)
   b496e:	2202      	movs	r2, #2
   b4970:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4972:	4b05      	ldr	r3, [pc, #20]	; (b4988 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4974:	4a05      	ldr	r2, [pc, #20]	; (b498c <_GLOBAL__sub_I_System+0x20>)
   b4976:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4978:	2000      	movs	r0, #0
   b497a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b497e:	f7ff beeb 	b.w	b4758 <set_system_mode>
   b4982:	bf00      	nop
   b4984:	2003e6e4 	.word	0x2003e6e4
   b4988:	2003e6d8 	.word	0x2003e6d8
   b498c:	ffff0000 	.word	0xffff0000

000b4990 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4990:	b510      	push	{r4, lr}
   b4992:	4604      	mov	r4, r0
{
	free(buffer);
   b4994:	6800      	ldr	r0, [r0, #0]
   b4996:	f7ff ff7b 	bl	b4890 <free>
}
   b499a:	4620      	mov	r0, r4
   b499c:	bd10      	pop	{r4, pc}

000b499e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b499e:	b510      	push	{r4, lr}
   b49a0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b49a2:	6800      	ldr	r0, [r0, #0]
   b49a4:	b108      	cbz	r0, b49aa <_ZN6String10invalidateEv+0xc>
   b49a6:	f7ff ff73 	bl	b4890 <free>
	buffer = NULL;
   b49aa:	2300      	movs	r3, #0
	capacity = len = 0;
   b49ac:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b49b0:	6023      	str	r3, [r4, #0]
}
   b49b2:	bd10      	pop	{r4, pc}

000b49b4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b49b4:	b538      	push	{r3, r4, r5, lr}
   b49b6:	4604      	mov	r4, r0
   b49b8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b49ba:	6800      	ldr	r0, [r0, #0]
   b49bc:	3101      	adds	r1, #1
   b49be:	f7ff ff6f 	bl	b48a0 <realloc>
	if (newbuffer) {
   b49c2:	b110      	cbz	r0, b49ca <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b49c4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b49c8:	2001      	movs	r0, #1
	}
	return 0;
}
   b49ca:	bd38      	pop	{r3, r4, r5, pc}

000b49cc <_ZN6String7reserveEj>:
{
   b49cc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b49ce:	6803      	ldr	r3, [r0, #0]
{
   b49d0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b49d2:	b123      	cbz	r3, b49de <_ZN6String7reserveEj+0x12>
   b49d4:	6843      	ldr	r3, [r0, #4]
   b49d6:	428b      	cmp	r3, r1
   b49d8:	d301      	bcc.n	b49de <_ZN6String7reserveEj+0x12>
   b49da:	2001      	movs	r0, #1
}
   b49dc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b49de:	4620      	mov	r0, r4
   b49e0:	f7ff ffe8 	bl	b49b4 <_ZN6String12changeBufferEj>
   b49e4:	2800      	cmp	r0, #0
   b49e6:	d0f9      	beq.n	b49dc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b49e8:	68a3      	ldr	r3, [r4, #8]
   b49ea:	2b00      	cmp	r3, #0
   b49ec:	d1f5      	bne.n	b49da <_ZN6String7reserveEj+0xe>
   b49ee:	6822      	ldr	r2, [r4, #0]
   b49f0:	7013      	strb	r3, [r2, #0]
   b49f2:	e7f2      	b.n	b49da <_ZN6String7reserveEj+0xe>

000b49f4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b49f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b49f6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b49f8:	4611      	mov	r1, r2
   b49fa:	9201      	str	r2, [sp, #4]
{
   b49fc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b49fe:	f7ff ffe5 	bl	b49cc <_ZN6String7reserveEj>
   b4a02:	9a01      	ldr	r2, [sp, #4]
   b4a04:	b928      	cbnz	r0, b4a12 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4a06:	4620      	mov	r0, r4
   b4a08:	f7ff ffc9 	bl	b499e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4a0c:	4620      	mov	r0, r4
   b4a0e:	b003      	add	sp, #12
   b4a10:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4a12:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4a14:	4629      	mov	r1, r5
   b4a16:	6820      	ldr	r0, [r4, #0]
   b4a18:	f002 fd06 	bl	b7428 <memcpy>
	buffer[len] = 0;
   b4a1c:	6822      	ldr	r2, [r4, #0]
   b4a1e:	68a3      	ldr	r3, [r4, #8]
   b4a20:	2100      	movs	r1, #0
   b4a22:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4a24:	e7f2      	b.n	b4a0c <_ZN6String4copyEPKcj+0x18>

000b4a26 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4a26:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4a28:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4a2a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4a2e:	4604      	mov	r4, r0
	len = 0;
   b4a30:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4a32:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4a34:	b141      	cbz	r1, b4a48 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4a36:	4608      	mov	r0, r1
   b4a38:	9101      	str	r1, [sp, #4]
   b4a3a:	f002 fd65 	bl	b7508 <strlen>
   b4a3e:	9901      	ldr	r1, [sp, #4]
   b4a40:	4602      	mov	r2, r0
   b4a42:	4620      	mov	r0, r4
   b4a44:	f7ff ffd6 	bl	b49f4 <_ZN6String4copyEPKcj>
}
   b4a48:	4620      	mov	r0, r4
   b4a4a:	b002      	add	sp, #8
   b4a4c:	bd10      	pop	{r4, pc}

000b4a4e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b4a4e:	b538      	push	{r3, r4, r5, lr}
   b4a50:	4605      	mov	r5, r0
	if (buffer) {
   b4a52:	6800      	ldr	r0, [r0, #0]
{
   b4a54:	460c      	mov	r4, r1
	if (buffer) {
   b4a56:	b168      	cbz	r0, b4a74 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b4a58:	686a      	ldr	r2, [r5, #4]
   b4a5a:	688b      	ldr	r3, [r1, #8]
   b4a5c:	429a      	cmp	r2, r3
   b4a5e:	d307      	bcc.n	b4a70 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b4a60:	6809      	ldr	r1, [r1, #0]
   b4a62:	f002 fd49 	bl	b74f8 <strcpy>
			len = rhs.len;
   b4a66:	68a3      	ldr	r3, [r4, #8]
   b4a68:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b4a6a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b4a6c:	60a3      	str	r3, [r4, #8]
}
   b4a6e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b4a70:	f7ff ff0e 	bl	b4890 <free>
	buffer = rhs.buffer;
   b4a74:	6823      	ldr	r3, [r4, #0]
   b4a76:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b4a78:	6863      	ldr	r3, [r4, #4]
   b4a7a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b4a7c:	68a3      	ldr	r3, [r4, #8]
   b4a7e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b4a80:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b4a82:	e9c4 3300 	strd	r3, r3, [r4]
   b4a86:	e7f1      	b.n	b4a6c <_ZN6String4moveERS_+0x1e>

000b4a88 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b4a88:	b510      	push	{r4, lr}
	buffer = NULL;
   b4a8a:	2300      	movs	r3, #0
	capacity = 0;
   b4a8c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b4a90:	4604      	mov	r4, r0
	len = 0;
   b4a92:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4a94:	7303      	strb	r3, [r0, #12]
	move(rval);
   b4a96:	f7ff ffda 	bl	b4a4e <_ZN6String4moveERS_>
}
   b4a9a:	4620      	mov	r0, r4
   b4a9c:	bd10      	pop	{r4, pc}

000b4a9e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b4a9e:	4288      	cmp	r0, r1
{
   b4aa0:	b510      	push	{r4, lr}
   b4aa2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b4aa4:	d005      	beq.n	b4ab2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b4aa6:	680b      	ldr	r3, [r1, #0]
   b4aa8:	b12b      	cbz	r3, b4ab6 <_ZN6StringaSERKS_+0x18>
   b4aaa:	688a      	ldr	r2, [r1, #8]
   b4aac:	4619      	mov	r1, r3
   b4aae:	f7ff ffa1 	bl	b49f4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4ab2:	4620      	mov	r0, r4
   b4ab4:	bd10      	pop	{r4, pc}
	else invalidate();
   b4ab6:	f7ff ff72 	bl	b499e <_ZN6String10invalidateEv>
   b4aba:	e7fa      	b.n	b4ab2 <_ZN6StringaSERKS_+0x14>

000b4abc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b4abc:	b510      	push	{r4, lr}
	buffer = NULL;
   b4abe:	2300      	movs	r3, #0
String::String(const String &value)
   b4ac0:	4604      	mov	r4, r0
	capacity = 0;
   b4ac2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b4ac6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4ac8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b4aca:	f7ff ffe8 	bl	b4a9e <_ZN6StringaSERKS_>
}
   b4ace:	4620      	mov	r0, r4
   b4ad0:	bd10      	pop	{r4, pc}

000b4ad2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4ad2:	b513      	push	{r0, r1, r4, lr}
   b4ad4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4ad6:	b159      	cbz	r1, b4af0 <_ZN6StringaSEPKc+0x1e>
   b4ad8:	4608      	mov	r0, r1
   b4ada:	9101      	str	r1, [sp, #4]
   b4adc:	f002 fd14 	bl	b7508 <strlen>
   b4ae0:	9901      	ldr	r1, [sp, #4]
   b4ae2:	4602      	mov	r2, r0
   b4ae4:	4620      	mov	r0, r4
   b4ae6:	f7ff ff85 	bl	b49f4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4aea:	4620      	mov	r0, r4
   b4aec:	b002      	add	sp, #8
   b4aee:	bd10      	pop	{r4, pc}
	else invalidate();
   b4af0:	f7ff ff55 	bl	b499e <_ZN6String10invalidateEv>
   b4af4:	e7f9      	b.n	b4aea <_ZN6StringaSEPKc+0x18>

000b4af6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4af6:	b570      	push	{r4, r5, r6, lr}
   b4af8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4afa:	460e      	mov	r6, r1
   b4afc:	b909      	cbnz	r1, b4b02 <_ZN6String6concatEPKcj+0xc>
   b4afe:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4b00:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4b02:	b16a      	cbz	r2, b4b20 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4b04:	6884      	ldr	r4, [r0, #8]
   b4b06:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4b08:	4621      	mov	r1, r4
   b4b0a:	f7ff ff5f 	bl	b49cc <_ZN6String7reserveEj>
   b4b0e:	2800      	cmp	r0, #0
   b4b10:	d0f5      	beq.n	b4afe <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4b12:	6828      	ldr	r0, [r5, #0]
   b4b14:	68ab      	ldr	r3, [r5, #8]
   b4b16:	4631      	mov	r1, r6
   b4b18:	4418      	add	r0, r3
   b4b1a:	f002 fced 	bl	b74f8 <strcpy>
	len = newlen;
   b4b1e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4b20:	2001      	movs	r0, #1
   b4b22:	e7ed      	b.n	b4b00 <_ZN6String6concatEPKcj+0xa>

000b4b24 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b4b24:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b4b26:	2300      	movs	r3, #0
	buf[0] = c;
   b4b28:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b4b2c:	2201      	movs	r2, #1
   b4b2e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b4b30:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b4b34:	f7ff ffdf 	bl	b4af6 <_ZN6String6concatEPKcj>
}
   b4b38:	b003      	add	sp, #12
   b4b3a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b3e <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b4b3e:	6802      	ldr	r2, [r0, #0]
{
   b4b40:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b4b42:	6809      	ldr	r1, [r1, #0]
   b4b44:	b162      	cbz	r2, b4b60 <_ZNK6String9compareToERKS_+0x22>
   b4b46:	b941      	cbnz	r1, b4b5a <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b4b48:	6880      	ldr	r0, [r0, #8]
   b4b4a:	b160      	cbz	r0, b4b66 <_ZNK6String9compareToERKS_+0x28>
   b4b4c:	7810      	ldrb	r0, [r2, #0]
   b4b4e:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b4b50:	6898      	ldr	r0, [r3, #8]
   b4b52:	b140      	cbz	r0, b4b66 <_ZNK6String9compareToERKS_+0x28>
   b4b54:	7809      	ldrb	r1, [r1, #0]
   b4b56:	4248      	negs	r0, r1
   b4b58:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b4b5a:	4610      	mov	r0, r2
   b4b5c:	f002 bcc2 	b.w	b74e4 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b4b60:	2900      	cmp	r1, #0
   b4b62:	d1f5      	bne.n	b4b50 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b4b64:	4608      	mov	r0, r1
}
   b4b66:	4770      	bx	lr

000b4b68 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b4b68:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b4b6a:	6882      	ldr	r2, [r0, #8]
   b4b6c:	688b      	ldr	r3, [r1, #8]
   b4b6e:	429a      	cmp	r2, r3
   b4b70:	d105      	bne.n	b4b7e <_ZNK6String6equalsERKS_+0x16>
   b4b72:	f7ff ffe4 	bl	b4b3e <_ZNK6String9compareToERKS_>
   b4b76:	fab0 f080 	clz	r0, r0
   b4b7a:	0940      	lsrs	r0, r0, #5
}
   b4b7c:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b4b7e:	2000      	movs	r0, #0
   b4b80:	e7fc      	b.n	b4b7c <_ZNK6String6equalsERKS_+0x14>

000b4b82 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4b82:	4770      	bx	lr

000b4b84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4b84:	4770      	bx	lr

000b4b86 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4b86:	4770      	bx	lr

000b4b88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4b88:	4770      	bx	lr
	...

000b4b8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4b8c:	4b06      	ldr	r3, [pc, #24]	; (b4ba8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4b8e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4b90:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4b92:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4b96:	d005      	beq.n	b4ba4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4b98:	4608      	mov	r0, r1
   b4b9a:	f002 fb1d 	bl	b71d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4b9e:	2800      	cmp	r0, #0
   b4ba0:	bf08      	it	eq
   b4ba2:	2400      	moveq	r4, #0
      }
   b4ba4:	4620      	mov	r0, r4
   b4ba6:	bd10      	pop	{r4, pc}
   b4ba8:	000b7908 	.word	0x000b7908

000b4bac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4bac:	4b06      	ldr	r3, [pc, #24]	; (b4bc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4bae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4bb0:	b510      	push	{r4, lr}
   b4bb2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4bb6:	d005      	beq.n	b4bc4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4bb8:	4608      	mov	r0, r1
   b4bba:	f002 fb0d 	bl	b71d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4bbe:	2800      	cmp	r0, #0
   b4bc0:	bf08      	it	eq
   b4bc2:	2400      	moveq	r4, #0
      }
   b4bc4:	4620      	mov	r0, r4
   b4bc6:	bd10      	pop	{r4, pc}
   b4bc8:	000b7908 	.word	0x000b7908

000b4bcc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4bcc:	4b06      	ldr	r3, [pc, #24]	; (b4be8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4bce:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4bd0:	b510      	push	{r4, lr}
   b4bd2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4bd6:	d005      	beq.n	b4be4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4bd8:	4608      	mov	r0, r1
   b4bda:	f002 fafd 	bl	b71d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4bde:	2800      	cmp	r0, #0
   b4be0:	bf08      	it	eq
   b4be2:	2400      	moveq	r4, #0
      }
   b4be4:	4620      	mov	r0, r4
   b4be6:	bd10      	pop	{r4, pc}
   b4be8:	000b7908 	.word	0x000b7908

000b4bec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4bec:	b510      	push	{r4, lr}
   b4bee:	2168      	movs	r1, #104	; 0x68
   b4bf0:	4604      	mov	r4, r0
   b4bf2:	f7ff fa52 	bl	b409a <_ZdlPvj>
   b4bf6:	4620      	mov	r0, r4
   b4bf8:	bd10      	pop	{r4, pc}

000b4bfa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4bfa:	b510      	push	{r4, lr}
   b4bfc:	2128      	movs	r1, #40	; 0x28
   b4bfe:	4604      	mov	r4, r0
   b4c00:	f7ff fa4b 	bl	b409a <_ZdlPvj>
   b4c04:	4620      	mov	r0, r4
   b4c06:	bd10      	pop	{r4, pc}

000b4c08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4c08:	b510      	push	{r4, lr}
   b4c0a:	2130      	movs	r1, #48	; 0x30
   b4c0c:	4604      	mov	r4, r0
   b4c0e:	f7ff fa44 	bl	b409a <_ZdlPvj>
   b4c12:	4620      	mov	r0, r4
   b4c14:	bd10      	pop	{r4, pc}

000b4c16 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4c16:	2168      	movs	r1, #104	; 0x68
   b4c18:	f7ff ba3f 	b.w	b409a <_ZdlPvj>

000b4c1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4c1c:	2128      	movs	r1, #40	; 0x28
   b4c1e:	f7ff ba3c 	b.w	b409a <_ZdlPvj>

000b4c22 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4c22:	2130      	movs	r1, #48	; 0x30
   b4c24:	f7ff ba39 	b.w	b409a <_ZdlPvj>

000b4c28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b4c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4c2a:	2500      	movs	r5, #0
   b4c2c:	1cec      	adds	r4, r5, #3
   b4c2e:	428c      	cmp	r4, r1
   b4c30:	d80d      	bhi.n	b4c4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b4c32:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4c34:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4c36:	5d87      	ldrb	r7, [r0, r6]
   b4c38:	4297      	cmp	r7, r2
   b4c3a:	d105      	bne.n	b4c48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4c3c:	4426      	add	r6, r4
   b4c3e:	42b1      	cmp	r1, r6
   b4c40:	d305      	bcc.n	b4c4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4c42:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4c44:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4c48:	3401      	adds	r4, #1
   b4c4a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4c4c:	e7ee      	b.n	b4c2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4c4e:	2000      	movs	r0, #0
   b4c50:	e7f9      	b.n	b4c46 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b4c54 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b4c54:	4a02      	ldr	r2, [pc, #8]	; (b4c60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b4c56:	4903      	ldr	r1, [pc, #12]	; (b4c64 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b4c58:	200a      	movs	r0, #10
   b4c5a:	f7ff bd6d 	b.w	b4738 <panic_>
   b4c5e:	bf00      	nop
   b4c60:	000b4505 	.word	0x000b4505
   b4c64:	000b774c 	.word	0x000b774c

000b4c68 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4c68:	b430      	push	{r4, r5}
   b4c6a:	460d      	mov	r5, r1
   b4c6c:	4611      	mov	r1, r2
   b4c6e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4c70:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4c72:	6809      	ldr	r1, [r1, #0]
   b4c74:	6828      	ldr	r0, [r5, #0]
   b4c76:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4c7a:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4c7c:	bc30      	pop	{r4, r5}
   b4c7e:	4760      	bx	ip

000b4c80 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4c80:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4c82:	b538      	push	{r3, r4, r5, lr}
   b4c84:	4604      	mov	r4, r0
	switch (__op)
   b4c86:	d102      	bne.n	b4c8e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4c88:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4c8a:	6023      	str	r3, [r4, #0]
	}
   b4c8c:	e003      	b.n	b4c96 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b4c8e:	2a02      	cmp	r2, #2
   b4c90:	d003      	beq.n	b4c9a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4c92:	2a03      	cmp	r2, #3
   b4c94:	d00d      	beq.n	b4cb2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4c96:	2000      	movs	r0, #0
   b4c98:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c9a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4c9c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c9e:	f7ff f9f8 	bl	b4092 <_Znwj>
   b4ca2:	4603      	mov	r3, r0
   b4ca4:	2800      	cmp	r0, #0
   b4ca6:	d0f0      	beq.n	b4c8a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4ca8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4cac:	e883 0003 	stmia.w	r3, {r0, r1}
   b4cb0:	e7eb      	b.n	b4c8a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4cb2:	6800      	ldr	r0, [r0, #0]
   b4cb4:	2800      	cmp	r0, #0
   b4cb6:	d0ee      	beq.n	b4c96 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4cb8:	2108      	movs	r1, #8
   b4cba:	f7ff f9ee 	bl	b409a <_ZdlPvj>
   b4cbe:	e7ea      	b.n	b4c96 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4cc0 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b4cc0:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b4cc2:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b4cc4:	4604      	mov	r4, r0
	if (_M_manager)
   b4cc6:	b12b      	cbz	r3, b4cd4 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b4cc8:	2203      	movs	r2, #3
   b4cca:	4601      	mov	r1, r0
   b4ccc:	4798      	blx	r3
	    _M_manager = nullptr;
   b4cce:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b4cd0:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b4cd4:	bd10      	pop	{r4, pc}

000b4cd6 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b4cd6:	b510      	push	{r4, lr}
	if (_M_manager)
   b4cd8:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b4cda:	4604      	mov	r4, r0
	if (_M_manager)
   b4cdc:	b12b      	cbz	r3, b4cea <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b4cde:	2203      	movs	r2, #3
   b4ce0:	4601      	mov	r1, r0
   b4ce2:	4798      	blx	r3
	    _M_manager = nullptr;
   b4ce4:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b4ce6:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b4cea:	bd10      	pop	{r4, pc}

000b4cec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4cec:	b510      	push	{r4, lr}
      if (_M_manager)
   b4cee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4cf0:	4604      	mov	r4, r0
      if (_M_manager)
   b4cf2:	b113      	cbz	r3, b4cfa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4cf4:	2203      	movs	r2, #3
   b4cf6:	4601      	mov	r1, r0
   b4cf8:	4798      	blx	r3
    }
   b4cfa:	4620      	mov	r0, r4
   b4cfc:	bd10      	pop	{r4, pc}

000b4cfe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4cfe:	b510      	push	{r4, lr}
   b4d00:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b4d02:	3058      	adds	r0, #88	; 0x58
   b4d04:	f7ff fff2 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b4d08:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b4d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4d10:	f7ff be3e 	b.w	b4990 <_ZN6StringD1Ev>

000b4d14 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4d14:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4d16:	6843      	ldr	r3, [r0, #4]
   b4d18:	3b01      	subs	r3, #1
    {
   b4d1a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4d1c:	6043      	str	r3, [r0, #4]
   b4d1e:	b963      	cbnz	r3, b4d3a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4d20:	6803      	ldr	r3, [r0, #0]
   b4d22:	689b      	ldr	r3, [r3, #8]
   b4d24:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d26:	68a3      	ldr	r3, [r4, #8]
   b4d28:	3b01      	subs	r3, #1
   b4d2a:	60a3      	str	r3, [r4, #8]
   b4d2c:	b92b      	cbnz	r3, b4d3a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4d2e:	6823      	ldr	r3, [r4, #0]
   b4d30:	4620      	mov	r0, r4
   b4d32:	68db      	ldr	r3, [r3, #12]
    }
   b4d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4d38:	4718      	bx	r3
    }
   b4d3a:	bd10      	pop	{r4, pc}

000b4d3c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b4d3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4d40:	b2da      	uxtb	r2, r3
   b4d42:	2a09      	cmp	r2, #9
   b4d44:	d801      	bhi.n	b4d4a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b4d46:	4618      	mov	r0, r3
   b4d48:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b4d4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b4d4e:	2b05      	cmp	r3, #5
   b4d50:	d801      	bhi.n	b4d56 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b4d52:	3857      	subs	r0, #87	; 0x57
   b4d54:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b4d56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b4d5a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b4d5c:	bf94      	ite	ls
   b4d5e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b4d60:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b4d64:	4770      	bx	lr
	...

000b4d68 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b4d68:	b510      	push	{r4, lr}
            locked_(false) {
   b4d6a:	2300      	movs	r3, #0
   b4d6c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4d6e:	4b04      	ldr	r3, [pc, #16]	; (b4d80 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b4d70:	4604      	mov	r4, r0
   b4d72:	6818      	ldr	r0, [r3, #0]
   b4d74:	f7ff fc50 	bl	b4618 <os_mutex_recursive_lock>
        locked_ = true;
   b4d78:	2301      	movs	r3, #1
   b4d7a:	7023      	strb	r3, [r4, #0]
    }
   b4d7c:	4620      	mov	r0, r4
   b4d7e:	bd10      	pop	{r4, pc}
   b4d80:	2003e6f0 	.word	0x2003e6f0

000b4d84 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b4d84:	b510      	push	{r4, lr}
        if (locked_) {
   b4d86:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b4d88:	4604      	mov	r4, r0
        if (locked_) {
   b4d8a:	b11b      	cbz	r3, b4d94 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4d8c:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4d8e:	6818      	ldr	r0, [r3, #0]
   b4d90:	f7ff fc4a 	bl	b4628 <os_mutex_recursive_unlock>
    }
   b4d94:	4620      	mov	r0, r4
   b4d96:	bd10      	pop	{r4, pc}
   b4d98:	2003e6f0 	.word	0x2003e6f0

000b4d9c <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b4d9c:	2905      	cmp	r1, #5
    return address_.addr[i];
   b4d9e:	bf94      	ite	ls
   b4da0:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b4da2:	2000      	movhi	r0, #0
}
   b4da4:	4770      	bx	lr

000b4da6 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4da6:	b082      	sub	sp, #8
   b4da8:	4603      	mov	r3, r0
    address_ = addr;
   b4daa:	6808      	ldr	r0, [r1, #0]
   b4dac:	6849      	ldr	r1, [r1, #4]
   b4dae:	466a      	mov	r2, sp
   b4db0:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b4db2:	466a      	mov	r2, sp
   b4db4:	ca03      	ldmia	r2!, {r0, r1}
   b4db6:	6018      	str	r0, [r3, #0]
}
   b4db8:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4dba:	6059      	str	r1, [r3, #4]
}
   b4dbc:	b002      	add	sp, #8
   b4dbe:	4770      	bx	lr

000b4dc0 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b4dc0:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b4dc2:	7982      	ldrb	r2, [r0, #6]
   b4dc4:	798b      	ldrb	r3, [r1, #6]
   b4dc6:	429a      	cmp	r2, r3
   b4dc8:	d106      	bne.n	b4dd8 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4dca:	2206      	movs	r2, #6
   b4dcc:	f002 fb1c 	bl	b7408 <memcmp>
   b4dd0:	fab0 f080 	clz	r0, r0
   b4dd4:	0940      	lsrs	r0, r0, #5
}
   b4dd6:	bd08      	pop	{r3, pc}
    return false;
   b4dd8:	2000      	movs	r0, #0
   b4dda:	e7fc      	b.n	b4dd6 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4ddc <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4ddc:	f04f 33ff 	mov.w	r3, #4294967295
   b4de0:	6003      	str	r3, [r0, #0]
   b4de2:	8083      	strh	r3, [r0, #4]
}
   b4de4:	2000      	movs	r0, #0
   b4de6:	4770      	bx	lr

000b4de8 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4602      	mov	r2, r0
        : address_{} {
   b4dec:	2100      	movs	r1, #0
   b4dee:	6001      	str	r1, [r0, #0]
   b4df0:	6041      	str	r1, [r0, #4]
    clear();
   b4df2:	f7ff fff3 	bl	b4ddc <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4df6:	7191      	strb	r1, [r2, #6]
}
   b4df8:	4610      	mov	r0, r2
   b4dfa:	bd08      	pop	{r3, pc}

000b4dfc <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4dfc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b4dfe:	2301      	movs	r3, #1
   b4e00:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4e02:	4b05      	ldr	r3, [pc, #20]	; (b4e18 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4e04:	4602      	mov	r2, r0
   b4e06:	f103 0110 	add.w	r1, r3, #16
   b4e0a:	f853 4b04 	ldr.w	r4, [r3], #4
   b4e0e:	f842 4b04 	str.w	r4, [r2], #4
   b4e12:	428b      	cmp	r3, r1
   b4e14:	d1f9      	bne.n	b4e0a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4e16:	bd10      	pop	{r4, pc}
   b4e18:	000b7916 	.word	0x000b7916

000b4e1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4e1c:	b510      	push	{r4, lr}
    if (uuid128) {
   b4e1e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4e20:	4604      	mov	r4, r0
    if (uuid128) {
   b4e22:	b1b1      	cbz	r1, b4e52 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b4e24:	2a01      	cmp	r2, #1
   b4e26:	f101 0210 	add.w	r2, r1, #16
   b4e2a:	d10a      	bne.n	b4e42 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4e2c:	4601      	mov	r1, r0
   b4e2e:	f853 0b04 	ldr.w	r0, [r3], #4
   b4e32:	f841 0b04 	str.w	r0, [r1], #4
   b4e36:	4293      	cmp	r3, r2
   b4e38:	d1f9      	bne.n	b4e2e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b4e3a:	2301      	movs	r3, #1
   b4e3c:	6123      	str	r3, [r4, #16]
}
   b4e3e:	4620      	mov	r0, r4
   b4e40:	bd10      	pop	{r4, pc}
   b4e42:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b4e44:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b4e48:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b4e4c:	429a      	cmp	r2, r3
   b4e4e:	d1f9      	bne.n	b4e44 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b4e50:	e7f3      	b.n	b4e3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b4e52:	2210      	movs	r2, #16
   b4e54:	f002 fb10 	bl	b7478 <memset>
   b4e58:	e7f1      	b.n	b4e3e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b4e5a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b4e5a:	b538      	push	{r3, r4, r5, lr}
   b4e5c:	4604      	mov	r4, r0
   b4e5e:	460d      	mov	r5, r1
        : BleUuid() {
   b4e60:	f7ff ffcc 	bl	b4dfc <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b4e64:	2300      	movs	r3, #0
   b4e66:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b4e68:	81a5      	strh	r5, [r4, #12]
}
   b4e6a:	4620      	mov	r0, r4
   b4e6c:	bd38      	pop	{r3, r4, r5, pc}

000b4e6e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b4e6e:	b538      	push	{r3, r4, r5, lr}
   b4e70:	4604      	mov	r4, r0
   b4e72:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b4e74:	461a      	mov	r2, r3
   b4e76:	f7ff ffd1 	bl	b4e1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b4e7a:	81a5      	strh	r5, [r4, #12]
}
   b4e7c:	4620      	mov	r0, r4
   b4e7e:	bd38      	pop	{r3, r4, r5, pc}

000b4e80 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b4e80:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b4e82:	6902      	ldr	r2, [r0, #16]
   b4e84:	b922      	cbnz	r2, b4e90 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b4e86:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4e88:	3800      	subs	r0, #0
   b4e8a:	bf18      	it	ne
   b4e8c:	2001      	movne	r0, #1
}
   b4e8e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4e90:	4902      	ldr	r1, [pc, #8]	; (b4e9c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b4e92:	2210      	movs	r2, #16
   b4e94:	f002 fab8 	bl	b7408 <memcmp>
   b4e98:	e7f6      	b.n	b4e88 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b4e9a:	bf00      	nop
   b4e9c:	000b7936 	.word	0x000b7936

000b4ea0 <_ZNK8particle7BleUuid4typeEv>:
}
   b4ea0:	6900      	ldr	r0, [r0, #16]
   b4ea2:	4770      	bx	lr

000b4ea4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b4ea4:	b538      	push	{r3, r4, r5, lr}
   b4ea6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b4ea8:	2214      	movs	r2, #20
   b4eaa:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b4eac:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b4eae:	f002 fae3 	bl	b7478 <memset>
    if (type_ == BleUuidType::SHORT) {
   b4eb2:	6923      	ldr	r3, [r4, #16]
   b4eb4:	b91b      	cbnz	r3, b4ebe <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b4eb6:	89a3      	ldrh	r3, [r4, #12]
   b4eb8:	802b      	strh	r3, [r5, #0]
}
   b4eba:	4628      	mov	r0, r5
   b4ebc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b4ebe:	2301      	movs	r3, #1
   b4ec0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b4ec2:	4621      	mov	r1, r4
   b4ec4:	462b      	mov	r3, r5
   b4ec6:	f104 0210 	add.w	r2, r4, #16
   b4eca:	f851 0b04 	ldr.w	r0, [r1], #4
   b4ece:	f843 0b04 	str.w	r0, [r3], #4
   b4ed2:	4291      	cmp	r1, r2
   b4ed4:	d1f9      	bne.n	b4eca <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b4ed6:	e7f0      	b.n	b4eba <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b4ed8 <_ZNK8particle7BleUuid7shortedEv>:
}
   b4ed8:	8980      	ldrh	r0, [r0, #12]
   b4eda:	4770      	bx	lr

000b4edc <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b4edc:	4770      	bx	lr

000b4ede <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b4ede:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4ee0:	6902      	ldr	r2, [r0, #16]
   b4ee2:	690b      	ldr	r3, [r1, #16]
   b4ee4:	429a      	cmp	r2, r3
   b4ee6:	d106      	bne.n	b4ef6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b4ee8:	2210      	movs	r2, #16
   b4eea:	f002 fa8d 	bl	b7408 <memcmp>
   b4eee:	fab0 f080 	clz	r0, r0
   b4ef2:	0940      	lsrs	r0, r0, #5
}
   b4ef4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4ef6:	2000      	movs	r0, #0
   b4ef8:	e7fc      	b.n	b4ef4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b4efc <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b4efc:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b4efe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b4f02:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4f04:	4b34      	ldr	r3, [pc, #208]	; (b4fd8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b4f06:	460c      	mov	r4, r1
   b4f08:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4f0a:	4602      	mov	r2, r0
   b4f0c:	f103 0110 	add.w	r1, r3, #16
   b4f10:	f853 0b04 	ldr.w	r0, [r3], #4
   b4f14:	f842 0b04 	str.w	r0, [r2], #4
   b4f18:	428b      	cmp	r3, r1
   b4f1a:	d1f9      	bne.n	b4f10 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b4f1c:	b344      	cbz	r4, b4f70 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b4f1e:	2124      	movs	r1, #36	; 0x24
   b4f20:	4620      	mov	r0, r4
   b4f22:	f002 faf9 	bl	b7518 <strnlen>
   b4f26:	2804      	cmp	r0, #4
   b4f28:	f04f 0500 	mov.w	r5, #0
   b4f2c:	d123      	bne.n	b4f76 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b4f2e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b4f32:	af01      	add	r7, sp, #4
   b4f34:	1ca5      	adds	r5, r4, #2
   b4f36:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b4f38:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b4f3c:	f7ff fefe 	bl	b4d3c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b4f40:	f1b0 0800 	subs.w	r8, r0, #0
   b4f44:	db12      	blt.n	b4f6c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b4f46:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b4f4a:	f7ff fef7 	bl	b4d3c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b4f4e:	2800      	cmp	r0, #0
   b4f50:	db0c      	blt.n	b4f6c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b4f52:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4f54:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b4f58:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4f5a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b4f5e:	d1eb      	bne.n	b4f38 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b4f60:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4f64:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b4f66:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4f6a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b4f6c:	2300      	movs	r3, #0
   b4f6e:	6133      	str	r3, [r6, #16]
}
   b4f70:	b002      	add	sp, #8
   b4f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b4f76:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4f7a:	2124      	movs	r1, #36	; 0x24
   b4f7c:	4620      	mov	r0, r4
   b4f7e:	f002 facb 	bl	b7518 <strnlen>
   b4f82:	42a8      	cmp	r0, r5
   b4f84:	d807      	bhi.n	b4f96 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b4f86:	4642      	mov	r2, r8
   b4f88:	2100      	movs	r1, #0
   b4f8a:	4630      	mov	r0, r6
}
   b4f8c:	b002      	add	sp, #8
   b4f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b4f92:	f002 ba71 	b.w	b7478 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4f96:	f1b8 0f00 	cmp.w	r8, #0
   b4f9a:	d0e9      	beq.n	b4f70 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b4f9c:	5d60      	ldrb	r0, [r4, r5]
   b4f9e:	f7ff fecd 	bl	b4d3c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b4fa2:	0603      	lsls	r3, r0, #24
   b4fa4:	d415      	bmi.n	b4fd2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b4fa6:	0100      	lsls	r0, r0, #4
   b4fa8:	f108 38ff 	add.w	r8, r8, #4294967295
   b4fac:	b2c7      	uxtb	r7, r0
   b4fae:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b4fb2:	2124      	movs	r1, #36	; 0x24
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	f002 faaf 	bl	b7518 <strnlen>
   b4fba:	3501      	adds	r5, #1
   b4fbc:	42a8      	cmp	r0, r5
   b4fbe:	d908      	bls.n	b4fd2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b4fc0:	5d60      	ldrb	r0, [r4, r5]
   b4fc2:	f7ff febb 	bl	b4d3c <_ZN8particle11hexToNibbleEc>
   b4fc6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b4fc8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b4fca:	bfa4      	itt	ge
   b4fcc:	4338      	orrge	r0, r7
   b4fce:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4fd2:	3501      	adds	r5, #1
   b4fd4:	e7d1      	b.n	b4f7a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b4fd6:	bf00      	nop
   b4fd8:	000b7916 	.word	0x000b7916

000b4fdc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b4fdc:	b513      	push	{r0, r1, r4, lr}
   b4fde:	4604      	mov	r4, r0
   b4fe0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b4fe2:	f7ff ff0b 	bl	b4dfc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b4fe6:	4620      	mov	r0, r4
   b4fe8:	9901      	ldr	r1, [sp, #4]
   b4fea:	f7ff ff87 	bl	b4efc <_ZN8particle7BleUuid9constructEPKc>
}
   b4fee:	4620      	mov	r0, r4
   b4ff0:	b002      	add	sp, #8
   b4ff2:	bd10      	pop	{r4, pc}

000b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b4ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4ff6:	4605      	mov	r5, r0
   b4ff8:	4616      	mov	r6, r2
   b4ffa:	461f      	mov	r7, r3
   b4ffc:	460a      	mov	r2, r1
   b4ffe:	ab01      	add	r3, sp, #4
   b5000:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5004:	f7ff fe10 	bl	b4c28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b5008:	f030 0402 	bics.w	r4, r0, #2
   b500c:	d00c      	beq.n	b5028 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b500e:	1e84      	subs	r4, r0, #2
   b5010:	42bc      	cmp	r4, r7
   b5012:	bf28      	it	cs
   b5014:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b5016:	b13e      	cbz	r6, b5028 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b5018:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b501a:	682b      	ldr	r3, [r5, #0]
   b501c:	3102      	adds	r1, #2
   b501e:	4622      	mov	r2, r4
   b5020:	4419      	add	r1, r3
   b5022:	4630      	mov	r0, r6
   b5024:	f002 fa00 	bl	b7428 <memcpy>
}
   b5028:	4620      	mov	r0, r4
   b502a:	b003      	add	sp, #12
   b502c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b502e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b502e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5030:	4613      	mov	r3, r2
   b5032:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5034:	9201      	str	r2, [sp, #4]
   b5036:	460a      	mov	r2, r1
   b5038:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b503a:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b503c:	f7ff ffda 	bl	b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b5040:	b940      	cbnz	r0, b5054 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5042:	9b01      	ldr	r3, [sp, #4]
   b5044:	4622      	mov	r2, r4
   b5046:	2109      	movs	r1, #9
   b5048:	4628      	mov	r0, r5
}
   b504a:	b003      	add	sp, #12
   b504c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5050:	f7ff bfd0 	b.w	b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b5054:	b003      	add	sp, #12
   b5056:	bd30      	pop	{r4, r5, pc}

000b5058 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b5058:	b5f0      	push	{r4, r5, r6, r7, lr}
   b505a:	460c      	mov	r4, r1
   b505c:	b089      	sub	sp, #36	; 0x24
    String name;
   b505e:	490c      	ldr	r1, [pc, #48]	; (b5090 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b5060:	4605      	mov	r5, r0
    String name;
   b5062:	f7ff fce0 	bl	b4a26 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b5066:	221f      	movs	r2, #31
   b5068:	4669      	mov	r1, sp
   b506a:	4620      	mov	r0, r4
   b506c:	f7ff ffdf 	bl	b502e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b5070:	4606      	mov	r6, r0
   b5072:	b150      	cbz	r0, b508a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b5074:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b5076:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b5078:	f814 1b01 	ldrb.w	r1, [r4], #1
   b507c:	4628      	mov	r0, r5
   b507e:	f7ff fd51 	bl	b4b24 <_ZN6String6concatEc>
   b5082:	b110      	cbz	r0, b508a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b5084:	3701      	adds	r7, #1
   b5086:	42be      	cmp	r6, r7
   b5088:	d1f6      	bne.n	b5078 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b508a:	4628      	mov	r0, r5
   b508c:	b009      	add	sp, #36	; 0x24
   b508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5090:	000b7641 	.word	0x000b7641

000b5094 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b5094:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b5096:	2302      	movs	r3, #2
   b5098:	aa01      	add	r2, sp, #4
   b509a:	2119      	movs	r1, #25
   b509c:	f7ff ffaa 	bl	b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b50a0:	b108      	cbz	r0, b50a6 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b50a2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b50a6:	b003      	add	sp, #12
   b50a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b50ac <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b50ac:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b50ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b50b2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b50b4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b50b6:	8043      	strh	r3, [r0, #2]
   b50b8:	220e      	movs	r2, #14
   b50ba:	4629      	mov	r1, r5
   b50bc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b50be:	7105      	strb	r5, [r0, #4]
   b50c0:	3006      	adds	r0, #6
   b50c2:	f002 f9d9 	bl	b7478 <memset>
   b50c6:	f104 0014 	add.w	r0, r4, #20
   b50ca:	f7ff fe97 	bl	b4dfc <_ZN8particle7BleUuidC1Ev>
   b50ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b50d2:	f7ff fe93 	bl	b4dfc <_ZN8particle7BleUuidC1Ev>
   b50d6:	4904      	ldr	r1, [pc, #16]	; (b50e8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b50d8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b50dc:	f7ff fca3 	bl	b4a26 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b50e0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b50e2:	4620      	mov	r0, r4
   b50e4:	bd38      	pop	{r3, r4, r5, pc}
   b50e6:	bf00      	nop
   b50e8:	000b7641 	.word	0x000b7641

000b50ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b50ec:	b510      	push	{r4, lr}
    return data_ + size_;
   b50ee:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b50f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b50f6:	4293      	cmp	r3, r2
   b50f8:	4618      	mov	r0, r3
   b50fa:	d006      	beq.n	b510a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b50fc:	6804      	ldr	r4, [r0, #0]
   b50fe:	8824      	ldrh	r4, [r4, #0]
   b5100:	428c      	cmp	r4, r1
   b5102:	f103 0308 	add.w	r3, r3, #8
   b5106:	d1f6      	bne.n	b50f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5108:	bd10      	pop	{r4, pc}
        return nullptr;
   b510a:	2000      	movs	r0, #0
   b510c:	e7fc      	b.n	b5108 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b5110 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b5110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5114:	2600      	movs	r6, #0
   b5116:	6006      	str	r6, [r0, #0]
   b5118:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b511a:	2028      	movs	r0, #40	; 0x28
   b511c:	460c      	mov	r4, r1
   b511e:	f7fe ffb8 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5122:	1e05      	subs	r5, r0, #0
   b5124:	f105 080c 	add.w	r8, r5, #12
   b5128:	d00f      	beq.n	b514a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b512a:	2301      	movs	r3, #1
   b512c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5130:	4b08      	ldr	r3, [pc, #32]	; (b5154 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b5132:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5134:	4640      	mov	r0, r8
   b5136:	f7ff fe61 	bl	b4dfc <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b513a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b513c:	622e      	str	r6, [r5, #32]
   b513e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b5142:	4646      	mov	r6, r8
   b5144:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5146:	6823      	ldr	r3, [r4, #0]
   b5148:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b514a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b514e:	4638      	mov	r0, r7
   b5150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5154:	000b78d8 	.word	0x000b78d8

000b5158 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5158:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b515a:	2500      	movs	r5, #0
   b515c:	6005      	str	r5, [r0, #0]
   b515e:	4606      	mov	r6, r0
   b5160:	2030      	movs	r0, #48	; 0x30
   b5162:	f7fe ff96 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5166:	4604      	mov	r4, r0
   b5168:	b188      	cbz	r0, b518e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b516a:	2301      	movs	r3, #1
   b516c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5170:	4b09      	ldr	r3, [pc, #36]	; (b5198 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b5172:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5174:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5178:	8183      	strh	r3, [r0, #12]
   b517a:	300e      	adds	r0, #14
   b517c:	f7ff fe34 	bl	b4de8 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5180:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5184:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5188:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b518c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b518e:	6074      	str	r4, [r6, #4]
   b5190:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5192:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5194:	4630      	mov	r0, r6
   b5196:	bd70      	pop	{r4, r5, r6, pc}
   b5198:	000b78f4 	.word	0x000b78f4

000b519c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b519c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b519e:	460d      	mov	r5, r1
   b51a0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b51a2:	a801      	add	r0, sp, #4
   b51a4:	f7ff fde0 	bl	b4d68 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b51a8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b51aa:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b51ae:	6023      	str	r3, [r4, #0]
   b51b0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b51b4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b51b6:	a801      	add	r0, sp, #4
   b51b8:	f7ff fde4 	bl	b4d84 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b51bc:	4620      	mov	r0, r4
   b51be:	b003      	add	sp, #12
   b51c0:	bd30      	pop	{r4, r5, pc}

000b51c2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b51c2:	b530      	push	{r4, r5, lr}
   b51c4:	4605      	mov	r5, r0
   b51c6:	b087      	sub	sp, #28
   b51c8:	460c      	mov	r4, r1
    WiringBleLock lk;
   b51ca:	a801      	add	r0, sp, #4
   b51cc:	f7ff fdcc 	bl	b4d68 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b51d0:	682a      	ldr	r2, [r5, #0]
   b51d2:	6823      	ldr	r3, [r4, #0]
   b51d4:	8812      	ldrh	r2, [r2, #0]
   b51d6:	881b      	ldrh	r3, [r3, #0]
   b51d8:	429a      	cmp	r2, r3
   b51da:	d10d      	bne.n	b51f8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b51dc:	4629      	mov	r1, r5
   b51de:	a802      	add	r0, sp, #8
   b51e0:	f7ff ffdc 	bl	b519c <_ZNK8particle13BlePeerDevice7addressEv>
   b51e4:	4621      	mov	r1, r4
   b51e6:	a804      	add	r0, sp, #16
   b51e8:	f7ff ffd8 	bl	b519c <_ZNK8particle13BlePeerDevice7addressEv>
   b51ec:	a904      	add	r1, sp, #16
   b51ee:	a802      	add	r0, sp, #8
   b51f0:	f7ff fde6 	bl	b4dc0 <_ZNK8particle10BleAddresseqERKS0_>
   b51f4:	4604      	mov	r4, r0
   b51f6:	b900      	cbnz	r0, b51fa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b51f8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b51fa:	a801      	add	r0, sp, #4
   b51fc:	f7ff fdc2 	bl	b4d84 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5200:	4620      	mov	r0, r4
   b5202:	b007      	add	sp, #28
   b5204:	bd30      	pop	{r4, r5, pc}
	...

000b5208 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5208:	b510      	push	{r4, lr}
   b520a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b520c:	2064      	movs	r0, #100	; 0x64
   b520e:	f7fe ff40 	bl	b4092 <_Znwj>
   b5212:	b168      	cbz	r0, b5230 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b5214:	2300      	movs	r3, #0
   b5216:	e9c0 3300 	strd	r3, r3, [r0]
   b521a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b521e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5222:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b5226:	6203      	str	r3, [r0, #32]
   b5228:	62c3      	str	r3, [r0, #44]	; 0x2c
   b522a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b522c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b522e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5230:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b5232:	b920      	cbnz	r0, b523e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b5234:	4a0a      	ldr	r2, [pc, #40]	; (b5260 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5236:	490b      	ldr	r1, [pc, #44]	; (b5264 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b5238:	200a      	movs	r0, #10
   b523a:	f7ff fa7d 	bl	b4738 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b523e:	2000      	movs	r0, #0
   b5240:	f7ff f978 	bl	b4534 <hal_ble_stack_init>
   b5244:	b120      	cbz	r0, b5250 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b5246:	4a06      	ldr	r2, [pc, #24]	; (b5260 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5248:	4907      	ldr	r1, [pc, #28]	; (b5268 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b524a:	200a      	movs	r0, #10
   b524c:	f7ff fa74 	bl	b4738 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5250:	6821      	ldr	r1, [r4, #0]
   b5252:	4806      	ldr	r0, [pc, #24]	; (b526c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5254:	2200      	movs	r2, #0
   b5256:	f7ff f9cd 	bl	b45f4 <hal_ble_set_callback_on_periph_link_events>
}
   b525a:	4620      	mov	r0, r4
   b525c:	bd10      	pop	{r4, pc}
   b525e:	bf00      	nop
   b5260:	000b4505 	.word	0x000b4505
   b5264:	000b774c 	.word	0x000b774c
   b5268:	000b778a 	.word	0x000b778a
   b526c:	000b5d45 	.word	0x000b5d45

000b5270 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5270:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5272:	4c0a      	ldr	r4, [pc, #40]	; (b529c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5274:	7823      	ldrb	r3, [r4, #0]
   b5276:	f3bf 8f5b 	dmb	ish
   b527a:	07db      	lsls	r3, r3, #31
   b527c:	d40c      	bmi.n	b5298 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b527e:	4620      	mov	r0, r4
   b5280:	f7fe ff0d 	bl	b409e <__cxa_guard_acquire>
   b5284:	b140      	cbz	r0, b5298 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5286:	4806      	ldr	r0, [pc, #24]	; (b52a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5288:	f7ff ffbe 	bl	b5208 <_ZN8particle14BleLocalDeviceC1Ev>
   b528c:	4620      	mov	r0, r4
   b528e:	f7fe ff0b 	bl	b40a8 <__cxa_guard_release>
   b5292:	4804      	ldr	r0, [pc, #16]	; (b52a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5294:	f002 f8b2 	bl	b73fc <atexit>
    return instance;
}
   b5298:	4801      	ldr	r0, [pc, #4]	; (b52a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b529a:	bd10      	pop	{r4, pc}
   b529c:	2003e6e8 	.word	0x2003e6e8
   b52a0:	2003e6f4 	.word	0x2003e6f4
   b52a4:	000b5625 	.word	0x000b5625

000b52a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b52a8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b52aa:	6803      	ldr	r3, [r0, #0]
   b52ac:	3b09      	subs	r3, #9
   b52ae:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b52b0:	b08d      	sub	sp, #52	; 0x34
   b52b2:	4604      	mov	r4, r0
   b52b4:	460d      	mov	r5, r1
    switch (event->type) {
   b52b6:	d811      	bhi.n	b52dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b52b8:	f7ff ffda 	bl	b5270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b52bc:	88a1      	ldrh	r1, [r4, #4]
   b52be:	6800      	ldr	r0, [r0, #0]
   b52c0:	f7ff ff14 	bl	b50ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b52c4:	4603      	mov	r3, r0
   b52c6:	b958      	cbnz	r0, b52e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b52c8:	2220      	movs	r2, #32
   b52ca:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b52ce:	4a0b      	ldr	r2, [pc, #44]	; (b52fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b52d0:	9200      	str	r2, [sp, #0]
   b52d2:	490b      	ldr	r1, [pc, #44]	; (b5300 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b52d4:	aa04      	add	r2, sp, #16
   b52d6:	2032      	movs	r0, #50	; 0x32
   b52d8:	f7ff fa36 	bl	b4748 <log_message>
}
   b52dc:	b00d      	add	sp, #52	; 0x34
   b52de:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b52e0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b52e2:	2a00      	cmp	r2, #0
   b52e4:	d0fa      	beq.n	b52dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b52e6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b52ea:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b52ee:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b52f2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b52f4:	aa04      	add	r2, sp, #16
   b52f6:	a903      	add	r1, sp, #12
   b52f8:	47a0      	blx	r4
}
   b52fa:	e7ef      	b.n	b52dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b52fc:	000b77cc 	.word	0x000b77cc
   b5300:	000b7763 	.word	0x000b7763

000b5304 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5304:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5306:	2000      	movs	r0, #0
   b5308:	f7ff f914 	bl	b4534 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b530c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5310:	bd08      	pop	{r3, pc}

000b5312 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b5312:	b919      	cbnz	r1, b531c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b5314:	460a      	mov	r2, r1
   b5316:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b5318:	f7ff b914 	b.w	b4544 <hal_ble_gap_set_advertising_data>
   b531c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5320:	2200      	movs	r2, #0
   b5322:	e7f9      	b.n	b5318 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b5324 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b5324:	b570      	push	{r4, r5, r6, lr}
   b5326:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b5328:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b532a:	460e      	mov	r6, r1
   b532c:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b532e:	f7ff fcc7 	bl	b4cc0 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b5332:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5336:	f7ff fcce 	bl	b4cd6 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b533a:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b533e:	2200      	movs	r2, #0
   b5340:	4621      	mov	r1, r4
   b5342:	4803      	ldr	r0, [pc, #12]	; (b5350 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b5344:	f7ff f926 	bl	b4594 <hal_ble_gap_start_scan>
   b5348:	2800      	cmp	r0, #0
        return foundCount_;
   b534a:	bfa8      	it	ge
   b534c:	6960      	ldrge	r0, [r4, #20]
    }
   b534e:	bd70      	pop	{r4, r5, r6, pc}
   b5350:	000b6825 	.word	0x000b6825

000b5354 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b5354:	b510      	push	{r4, lr}
   b5356:	4604      	mov	r4, r0
    ::free(ptr);
   b5358:	6940      	ldr	r0, [r0, #20]
   b535a:	f7ff fa99 	bl	b4890 <free>
   b535e:	68a0      	ldr	r0, [r4, #8]
   b5360:	f7ff fa96 	bl	b4890 <free>
   b5364:	4620      	mov	r0, r4
   b5366:	bd10      	pop	{r4, pc}

000b5368 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b5368:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b536a:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b536e:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b5372:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5376:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b537a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b537e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b5382:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b5386:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b538a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b538e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b5392:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b5396:	6202      	str	r2, [r0, #32]
   b5398:	6302      	str	r2, [r0, #48]	; 0x30
   b539a:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b539e:	4770      	bx	lr

000b53a0 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b53a0:	b530      	push	{r4, r5, lr}
   b53a2:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   b53a4:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b53a6:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b53a8:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b53aa:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b53ae:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   b53b0:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b53b2:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   b53b4:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   b53b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b53bc:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b53be:	f7ff f8e1 	bl	b4584 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b53c2:	4621      	mov	r1, r4
   b53c4:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   b53c6:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b53ca:	f7ff f8d3 	bl	b4574 <hal_ble_gap_set_scan_parameters>
}
   b53ce:	b005      	add	sp, #20
   b53d0:	bd30      	pop	{r4, r5, pc}

000b53d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b53d2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b53d4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b53d8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b53da:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b53de:	42ae      	cmp	r6, r5
   b53e0:	d004      	beq.n	b53ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b53e2:	4628      	mov	r0, r5
   b53e4:	f7ff fad4 	bl	b4990 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b53e8:	3510      	adds	r5, #16
   b53ea:	e7f8      	b.n	b53de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b53ec:	6820      	ldr	r0, [r4, #0]
   b53ee:	f7ff fa4f 	bl	b4890 <free>
}
   b53f2:	4620      	mov	r0, r4
   b53f4:	bd70      	pop	{r4, r5, r6, pc}

000b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b53f6:	b510      	push	{r4, lr}
   b53f8:	4604      	mov	r4, r0
    ::free(ptr);
   b53fa:	6800      	ldr	r0, [r0, #0]
   b53fc:	f7ff fa48 	bl	b4890 <free>
}
   b5400:	4620      	mov	r0, r4
   b5402:	bd10      	pop	{r4, pc}

000b5404 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b5404:	b570      	push	{r4, r5, r6, lr}
   b5406:	4604      	mov	r4, r0
    ::free(ptr);
   b5408:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b540a:	f7ff fa41 	bl	b4890 <free>
   b540e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5410:	f7ff fa3e 	bl	b4890 <free>
    }
    ~BleScanFilter() = default;
   b5414:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b5418:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b541c:	f7ff ffeb 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b5420:	4628      	mov	r0, r5
   b5422:	f7ff ffd6 	bl	b53d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b5426:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b542a:	f7ff fc5f 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
   b542e:	f104 0018 	add.w	r0, r4, #24
   b5432:	f7ff fc5b 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5436:	e9d4 5300 	ldrd	r5, r3, [r4]
   b543a:	2624      	movs	r6, #36	; 0x24
   b543c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5440:	42ae      	cmp	r6, r5
   b5442:	d004      	beq.n	b544e <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b5444:	4628      	mov	r0, r5
   b5446:	f7ff ff85 	bl	b5354 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b544a:	3524      	adds	r5, #36	; 0x24
   b544c:	e7f8      	b.n	b5440 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b544e:	6820      	ldr	r0, [r4, #0]
   b5450:	f7ff fa1e 	bl	b4890 <free>
   b5454:	4620      	mov	r0, r4
   b5456:	bd70      	pop	{r4, r5, r6, pc}

000b5458 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b5458:	b530      	push	{r4, r5, lr}
   b545a:	4615      	mov	r5, r2
   b545c:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b545e:	460c      	mov	r4, r1
   b5460:	b179      	cbz	r1, b5482 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b5462:	b172      	cbz	r2, b5482 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
   b5464:	a801      	add	r0, sp, #4
   b5466:	f7ff ff7f 	bl	b5368 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b546a:	4621      	mov	r1, r4
   b546c:	462a      	mov	r2, r5
   b546e:	a801      	add	r0, sp, #4
   b5470:	f7ff ff58 	bl	b5324 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b5474:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b5476:	a801      	add	r0, sp, #4
   b5478:	f7ff ffc4 	bl	b5404 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b547c:	4620      	mov	r0, r4
   b547e:	b01f      	add	sp, #124	; 0x7c
   b5480:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b5482:	4c01      	ldr	r4, [pc, #4]	; (b5488 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b5484:	e7fa      	b.n	b547c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b5486:	bf00      	nop
   b5488:	fffffef2 	.word	0xfffffef2

000b548c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b548c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b548e:	1e14      	subs	r4, r2, #0
   b5490:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5492:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5494:	db02      	blt.n	b549c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5496:	1862      	adds	r2, r4, r1
   b5498:	429a      	cmp	r2, r3
   b549a:	dd00      	ble.n	b549e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b549c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b549e:	682a      	ldr	r2, [r5, #0]
   b54a0:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b54a2:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b54a4:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b54a6:	1a52      	subs	r2, r2, r1
   b54a8:	f001 ffcc 	bl	b7444 <memmove>
    size_ -= n;
   b54ac:	686a      	ldr	r2, [r5, #4]
   b54ae:	1b12      	subs	r2, r2, r4
   b54b0:	606a      	str	r2, [r5, #4]
}
   b54b2:	bd38      	pop	{r3, r4, r5, pc}

000b54b4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b54b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b54b6:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b54b8:	4604      	mov	r4, r0
   b54ba:	460d      	mov	r5, r1
   b54bc:	ab01      	add	r3, sp, #4
   b54be:	e9d0 0100 	ldrd	r0, r1, [r0]
   b54c2:	f7ff fbb1 	bl	b4c28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b54c6:	4602      	mov	r2, r0
   b54c8:	b138      	cbz	r0, b54da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b54ca:	9901      	ldr	r1, [sp, #4]
   b54cc:	4620      	mov	r0, r4
   b54ce:	f7ff ffdd 	bl	b548c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b54d2:	4629      	mov	r1, r5
   b54d4:	4620      	mov	r0, r4
   b54d6:	f7ff ffed 	bl	b54b4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b54da:	b003      	add	sp, #12
   b54dc:	bd30      	pop	{r4, r5, pc}

000b54de <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b54de:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b54e0:	460c      	mov	r4, r1
   b54e2:	b929      	cbnz	r1, b54f0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b54e4:	460a      	mov	r2, r1
   b54e6:	4608      	mov	r0, r1
}
   b54e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b54ec:	f7ff b832 	b.w	b4554 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b54f0:	2101      	movs	r1, #1
   b54f2:	4620      	mov	r0, r4
   b54f4:	f7ff ffde 	bl	b54b4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b54f8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b54fc:	2200      	movs	r2, #0
   b54fe:	e7f3      	b.n	b54e8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b5500 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b5500:	b538      	push	{r3, r4, r5, lr}
   b5502:	4604      	mov	r4, r0
   b5504:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b5506:	f7ff ff04 	bl	b5312 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b550a:	2800      	cmp	r0, #0
   b550c:	db0a      	blt.n	b5524 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b550e:	4629      	mov	r1, r5
   b5510:	4620      	mov	r0, r4
   b5512:	f7ff ffe4 	bl	b54de <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b5516:	2800      	cmp	r0, #0
   b5518:	db04      	blt.n	b5524 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b551a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b551e:	2000      	movs	r0, #0
   b5520:	f7ff b820 	b.w	b4564 <hal_ble_gap_start_advertising>
}
   b5524:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5528 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5528:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b552a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b552c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b552e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5530:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5532:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5534:	f7fe fdad 	bl	b4092 <_Znwj>
   b5538:	b118      	cbz	r0, b5542 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b553a:	682b      	ldr	r3, [r5, #0]
   b553c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b553e:	686b      	ldr	r3, [r5, #4]
   b5540:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5542:	4b03      	ldr	r3, [pc, #12]	; (b5550 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5544:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5546:	4b03      	ldr	r3, [pc, #12]	; (b5554 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5548:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b554a:	60a3      	str	r3, [r4, #8]
      }
   b554c:	4620      	mov	r0, r4
   b554e:	bd38      	pop	{r3, r4, r5, pc}
   b5550:	000b4c69 	.word	0x000b4c69
   b5554:	000b4c81 	.word	0x000b4c81

000b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5558:	680b      	ldr	r3, [r1, #0]
   b555a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b555c:	b113      	cbz	r3, b5564 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b555e:	685a      	ldr	r2, [r3, #4]
   b5560:	3201      	adds	r2, #1
   b5562:	605a      	str	r2, [r3, #4]
      }
   b5564:	4770      	bx	lr

000b5566 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b5566:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5568:	f851 3b04 	ldr.w	r3, [r1], #4
   b556c:	4604      	mov	r4, r0
   b556e:	f840 3b04 	str.w	r3, [r0], #4
   b5572:	f7ff fff1 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b5576:	6823      	ldr	r3, [r4, #0]
   b5578:	b90b      	cbnz	r3, b557e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b557a:	f7ff fb6b 	bl	b4c54 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b557e:	4620      	mov	r0, r4
   b5580:	bd10      	pop	{r4, pc}

000b5582 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5582:	b510      	push	{r4, lr}
   b5584:	f851 3b04 	ldr.w	r3, [r1], #4
   b5588:	4604      	mov	r4, r0
   b558a:	f840 3b04 	str.w	r3, [r0], #4
   b558e:	f7ff ffe3 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5592:	4620      	mov	r0, r4
   b5594:	bd10      	pop	{r4, pc}

000b5596 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5596:	b510      	push	{r4, lr}
   b5598:	f851 3b04 	ldr.w	r3, [r1], #4
   b559c:	4604      	mov	r4, r0
   b559e:	f840 3b04 	str.w	r3, [r0], #4
   b55a2:	f7ff ffd9 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b55a6:	4620      	mov	r0, r4
   b55a8:	bd10      	pop	{r4, pc}

000b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b55aa:	b510      	push	{r4, lr}
   b55ac:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b55ae:	6800      	ldr	r0, [r0, #0]
   b55b0:	b108      	cbz	r0, b55b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b55b2:	f7ff fbaf 	bl	b4d14 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b55b6:	4620      	mov	r0, r4
   b55b8:	bd10      	pop	{r4, pc}

000b55ba <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b55ba:	b510      	push	{r4, lr}
   b55bc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b55be:	3004      	adds	r0, #4
   b55c0:	f7ff fff3 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55c4:	4620      	mov	r0, r4
   b55c6:	bd10      	pop	{r4, pc}

000b55c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b55ca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55ce:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b55d0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b55d4:	42ae      	cmp	r6, r5
   b55d6:	d004      	beq.n	b55e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b55d8:	1d28      	adds	r0, r5, #4
   b55da:	f7ff ffe6 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55de:	3508      	adds	r5, #8
   b55e0:	e7f8      	b.n	b55d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b55e2:	6820      	ldr	r0, [r4, #0]
   b55e4:	f7ff f954 	bl	b4890 <free>
}
   b55e8:	4620      	mov	r0, r4
   b55ea:	bd70      	pop	{r4, r5, r6, pc}

000b55ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b55ee:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55f2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b55f4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b55f8:	42ae      	cmp	r6, r5
   b55fa:	d004      	beq.n	b5606 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b55fc:	1d28      	adds	r0, r5, #4
   b55fe:	f7ff ffd4 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5602:	3508      	adds	r5, #8
   b5604:	e7f8      	b.n	b55f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5606:	6820      	ldr	r0, [r4, #0]
   b5608:	f7ff f942 	bl	b4890 <free>
}
   b560c:	4620      	mov	r0, r4
   b560e:	bd70      	pop	{r4, r5, r6, pc}

000b5610 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5610:	b510      	push	{r4, lr}
   b5612:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5614:	3024      	adds	r0, #36	; 0x24
   b5616:	f7ff ffe9 	bl	b55ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b561a:	f104 0018 	add.w	r0, r4, #24
   b561e:	f7ff ffd3 	bl	b55c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5622:	bd10      	pop	{r4, pc}

000b5624 <__tcf_0>:
    static BleLocalDevice instance;
   b5624:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5626:	4b17      	ldr	r3, [pc, #92]	; (b5684 <__tcf_0+0x60>)
   b5628:	681c      	ldr	r4, [r3, #0]
   b562a:	b354      	cbz	r4, b5682 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b562c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5630:	f7ff fb5c 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
   b5634:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5638:	f7ff fb58 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
   b563c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5640:	f7ff fb54 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
   b5644:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5648:	f7ff fb50 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b564c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5650:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5654:	42ae      	cmp	r6, r5
   b5656:	d004      	beq.n	b5662 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b5658:	1d28      	adds	r0, r5, #4
   b565a:	f7ff ffa6 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b565e:	3508      	adds	r5, #8
   b5660:	e7f8      	b.n	b5654 <__tcf_0+0x30>
    ::free(ptr);
   b5662:	69a0      	ldr	r0, [r4, #24]
   b5664:	f7ff f914 	bl	b4890 <free>
    ~BleLocalDeviceImpl() = default;
   b5668:	f104 000c 	add.w	r0, r4, #12
   b566c:	f7ff ffbe 	bl	b55ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5670:	4620      	mov	r0, r4
   b5672:	f7ff ffa9 	bl	b55c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5676:	4620      	mov	r0, r4
   b5678:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b567a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b567e:	f7fe bd0c 	b.w	b409a <_ZdlPvj>
   b5682:	bd70      	pop	{r4, r5, r6, pc}
   b5684:	2003e6f4 	.word	0x2003e6f4

000b5688 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b5688:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b568a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b568c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b5690:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5694:	6803      	ldr	r3, [r0, #0]
   b5696:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5698:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b569a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b569c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b569e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b56a0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b56a2:	f7ff ff82 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b56a6:	b002      	add	sp, #8
   b56a8:	bd10      	pop	{r4, pc}

000b56aa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b56aa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b56ac:	b510      	push	{r4, lr}
      if (_M_empty())
   b56ae:	b90a      	cbnz	r2, b56b4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b56b0:	f001 fd8e 	bl	b71d0 <_ZSt25__throw_bad_function_callv>
    }
   b56b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b56b8:	68c3      	ldr	r3, [r0, #12]
   b56ba:	4718      	bx	r3

000b56bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b56bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b56c0:	2300      	movs	r3, #0
   b56c2:	e9c0 3300 	strd	r3, r3, [r0]
   b56c6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b56c8:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b56cc:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b56ce:	4605      	mov	r5, r0
   b56d0:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b56d2:	dd4a      	ble.n	b576a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b56d4:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b56d8:	f7ff f8d2 	bl	b4880 <malloc>
            if (!d) {
   b56dc:	4606      	mov	r6, r0
   b56de:	2800      	cmp	r0, #0
   b56e0:	d043      	beq.n	b576a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b56e2:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b56e6:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b56e8:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b56ec:	d916      	bls.n	b571c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b56ee:	4550      	cmp	r0, sl
   b56f0:	d215      	bcs.n	b571e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b56f2:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b56f6:	f1a4 0910 	sub.w	r9, r4, #16
   b56fa:	ebaa 0404 	sub.w	r4, sl, r4
   b56fe:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b5700:	45d1      	cmp	r9, sl
   b5702:	d01d      	beq.n	b5740 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b5704:	b11c      	cbz	r4, b570e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b5706:	4651      	mov	r1, sl
   b5708:	4620      	mov	r0, r4
   b570a:	f7ff f9bd 	bl	b4a88 <_ZN6StringC1EOS_>
                end->~T();
   b570e:	4650      	mov	r0, sl
   b5710:	f7ff f93e 	bl	b4990 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5714:	f1aa 0a10 	sub.w	sl, sl, #16
   b5718:	3c10      	subs	r4, #16
   b571a:	e7f1      	b.n	b5700 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b571c:	d010      	beq.n	b5740 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b571e:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b5720:	45a2      	cmp	sl, r4
   b5722:	d00d      	beq.n	b5740 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b5724:	f1b9 0f00 	cmp.w	r9, #0
   b5728:	d003      	beq.n	b5732 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b572a:	4621      	mov	r1, r4
   b572c:	4648      	mov	r0, r9
   b572e:	f7ff f9ab 	bl	b4a88 <_ZN6StringC1EOS_>
                p->~T();
   b5732:	4620      	mov	r0, r4
   b5734:	f7ff f92c 	bl	b4990 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5738:	3410      	adds	r4, #16
   b573a:	f109 0910 	add.w	r9, r9, #16
   b573e:	e7ef      	b.n	b5720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b5740:	6828      	ldr	r0, [r5, #0]
   b5742:	f7ff f8a5 	bl	b4890 <free>
        capacity_ = n;
   b5746:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b574a:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b574c:	e9d7 4300 	ldrd	r4, r3, [r7]
   b5750:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b5754:	45a0      	cmp	r8, r4
   b5756:	d006      	beq.n	b5766 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b5758:	4621      	mov	r1, r4
   b575a:	4630      	mov	r0, r6
   b575c:	f7ff f9ae 	bl	b4abc <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b5760:	3410      	adds	r4, #16
   b5762:	3610      	adds	r6, #16
   b5764:	e7f6      	b.n	b5754 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b5766:	687b      	ldr	r3, [r7, #4]
   b5768:	606b      	str	r3, [r5, #4]
}
   b576a:	4628      	mov	r0, r5
   b576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5770 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b5770:	b530      	push	{r4, r5, lr}
   b5772:	b08d      	sub	sp, #52	; 0x34
   b5774:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b5776:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b577a:	a801      	add	r0, sp, #4
   b577c:	f7ff ff9e 	bl	b56bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b5780:	9b02      	ldr	r3, [sp, #8]
   b5782:	2b00      	cmp	r3, #0
   b5784:	dd2f      	ble.n	b57e6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b5786:	f104 0114 	add.w	r1, r4, #20
   b578a:	a804      	add	r0, sp, #16
   b578c:	f7ff fc64 	bl	b5058 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b5790:	f104 0108 	add.w	r1, r4, #8
   b5794:	a808      	add	r0, sp, #32
   b5796:	f7ff fc5f 	bl	b5058 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b579a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b579c:	9b06      	ldr	r3, [sp, #24]
   b579e:	4313      	orrs	r3, r2
   b57a0:	d01f      	beq.n	b57e2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b57a2:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b57a6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b57aa:	42ac      	cmp	r4, r5
   b57ac:	d019      	beq.n	b57e2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b57ae:	a904      	add	r1, sp, #16
   b57b0:	4620      	mov	r0, r4
   b57b2:	f7ff f9d9 	bl	b4b68 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b57b6:	b160      	cbz	r0, b57d2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b57b8:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b57ba:	a808      	add	r0, sp, #32
   b57bc:	f7ff f8e8 	bl	b4990 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b57c0:	a804      	add	r0, sp, #16
   b57c2:	f7ff f8e5 	bl	b4990 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b57c6:	a801      	add	r0, sp, #4
   b57c8:	f7ff fe03 	bl	b53d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b57cc:	4620      	mov	r0, r4
   b57ce:	b00d      	add	sp, #52	; 0x34
   b57d0:	bd30      	pop	{r4, r5, pc}
   b57d2:	4620      	mov	r0, r4
   b57d4:	a908      	add	r1, sp, #32
   b57d6:	f7ff f9c7 	bl	b4b68 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b57da:	3410      	adds	r4, #16
   b57dc:	2800      	cmp	r0, #0
   b57de:	d0e4      	beq.n	b57aa <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b57e0:	e7ea      	b.n	b57b8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b57e2:	2400      	movs	r4, #0
   b57e4:	e7e9      	b.n	b57ba <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b57e6:	2401      	movs	r4, #1
   b57e8:	e7ed      	b.n	b57c6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b57ea <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b57ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b57ec:	2300      	movs	r3, #0
   b57ee:	e9c0 3300 	strd	r3, r3, [r0]
   b57f2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b57f4:	684f      	ldr	r7, [r1, #4]
   b57f6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b57f8:	4605      	mov	r5, r0
   b57fa:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b57fc:	dd3e      	ble.n	b587c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b57fe:	00f8      	lsls	r0, r7, #3
   b5800:	f7ff f83e 	bl	b4880 <malloc>
            if (!d) {
   b5804:	4604      	mov	r4, r0
   b5806:	b3c8      	cbz	r0, b587c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b5808:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b580c:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b580e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b5812:	d910      	bls.n	b5836 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b5814:	429c      	cmp	r4, r3
   b5816:	d20f      	bcs.n	b5838 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b5818:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b581a:	1a1a      	subs	r2, r3, r0
   b581c:	f1a0 0c08 	sub.w	ip, r0, #8
   b5820:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b5822:	459c      	cmp	ip, r3
   b5824:	d018      	beq.n	b5858 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b5826:	b11a      	cbz	r2, b5830 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b5828:	6819      	ldr	r1, [r3, #0]
   b582a:	6011      	str	r1, [r2, #0]
   b582c:	6859      	ldr	r1, [r3, #4]
   b582e:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b5830:	3b08      	subs	r3, #8
   b5832:	3a08      	subs	r2, #8
   b5834:	e7f5      	b.n	b5822 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b5836:	d00f      	beq.n	b5858 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b5838:	4601      	mov	r1, r0
   b583a:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b583c:	428b      	cmp	r3, r1
   b583e:	d00b      	beq.n	b5858 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b5840:	b13a      	cbz	r2, b5852 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b5842:	f8d1 c000 	ldr.w	ip, [r1]
   b5846:	f8c2 c000 	str.w	ip, [r2]
   b584a:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b584e:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b5852:	3108      	adds	r1, #8
   b5854:	3208      	adds	r2, #8
   b5856:	e7f1      	b.n	b583c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b5858:	f7ff f81a 	bl	b4890 <free>
        data_ = d;
   b585c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b585e:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5860:	e9d6 3100 	ldrd	r3, r1, [r6]
   b5864:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b5868:	4298      	cmp	r0, r3
   b586a:	d006      	beq.n	b587a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b586c:	681a      	ldr	r2, [r3, #0]
   b586e:	6022      	str	r2, [r4, #0]
   b5870:	685a      	ldr	r2, [r3, #4]
   b5872:	6062      	str	r2, [r4, #4]
   b5874:	3308      	adds	r3, #8
   b5876:	3408      	adds	r4, #8
   b5878:	e7f6      	b.n	b5868 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b587a:	6069      	str	r1, [r5, #4]
}
   b587c:	4628      	mov	r0, r5
   b587e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5880 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5880:	b570      	push	{r4, r5, r6, lr}
   b5882:	4604      	mov	r4, r0
        capacity_(0) {
   b5884:	2000      	movs	r0, #0
   b5886:	e9c4 0000 	strd	r0, r0, [r4]
   b588a:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b588c:	684e      	ldr	r6, [r1, #4]
   b588e:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5890:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5892:	dd12      	ble.n	b58ba <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b5894:	0071      	lsls	r1, r6, #1
   b5896:	f7ff f803 	bl	b48a0 <realloc>
            if (!d) {
   b589a:	b170      	cbz	r0, b58ba <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b589c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b589e:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b58a0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b58a4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b58a8:	429a      	cmp	r2, r3
   b58aa:	d004      	beq.n	b58b6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b58ac:	f833 1b02 	ldrh.w	r1, [r3], #2
   b58b0:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b58b4:	e7f8      	b.n	b58a8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b58b6:	686b      	ldr	r3, [r5, #4]
   b58b8:	6063      	str	r3, [r4, #4]
}
   b58ba:	4620      	mov	r0, r4
   b58bc:	bd70      	pop	{r4, r5, r6, pc}

000b58be <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b58be:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b58c0:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b58c2:	4604      	mov	r4, r0
        if (!dismissed_) {
   b58c4:	b923      	cbnz	r3, b58d0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b58c6:	6803      	ldr	r3, [r0, #0]
   b58c8:	6818      	ldr	r0, [r3, #0]
   b58ca:	b108      	cbz	r0, b58d0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b58cc:	f7fe ffe0 	bl	b4890 <free>
            func_();
        }
    }
   b58d0:	4620      	mov	r0, r4
   b58d2:	bd10      	pop	{r4, pc}

000b58d4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b58d4:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b58d6:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b58d8:	4604      	mov	r4, r0
        if (!dismissed_) {
   b58da:	b923      	cbnz	r3, b58e6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b58dc:	6803      	ldr	r3, [r0, #0]
   b58de:	6818      	ldr	r0, [r3, #0]
   b58e0:	b108      	cbz	r0, b58e6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b58e2:	f7fe ffd5 	bl	b4890 <free>
    }
   b58e6:	4620      	mov	r0, r4
   b58e8:	bd10      	pop	{r4, pc}
	...

000b58ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b58ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b58f0:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b58f4:	b08f      	sub	sp, #60	; 0x3c
   b58f6:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b58f8:	f1b8 0f00 	cmp.w	r8, #0
   b58fc:	d072      	beq.n	b59e4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b58fe:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b5900:	2d00      	cmp	r5, #0
   b5902:	d06f      	beq.n	b59e4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b5904:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5908:	231f      	movs	r3, #31
   b590a:	2200      	movs	r2, #0
   b590c:	21ff      	movs	r1, #255	; 0xff
   b590e:	4648      	mov	r0, r9
   b5910:	f7ff fb70 	bl	b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b5914:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5916:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5918:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b591a:	2200      	movs	r2, #0
   b591c:	4619      	mov	r1, r3
   b591e:	4638      	mov	r0, r7
   b5920:	f7ff fb68 	bl	b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5924:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5926:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5928:	d006      	beq.n	b5938 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b592a:	42ae      	cmp	r6, r5
   b592c:	d030      	beq.n	b5990 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b592e:	2400      	movs	r4, #0
    }
   b5930:	4620      	mov	r0, r4
   b5932:	b00f      	add	sp, #60	; 0x3c
   b5934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b5938:	4620      	mov	r0, r4
   b593a:	f7fe ffa1 	bl	b4880 <malloc>
            dismissed_(false) {
   b593e:	ab03      	add	r3, sp, #12
   b5940:	9304      	str	r3, [sp, #16]
   b5942:	2300      	movs	r3, #0
   b5944:	4604      	mov	r4, r0
   b5946:	9003      	str	r0, [sp, #12]
   b5948:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b594c:	b970      	cbnz	r0, b596c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b594e:	2320      	movs	r3, #32
   b5950:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5954:	4b24      	ldr	r3, [pc, #144]	; (b59e8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5956:	9300      	str	r3, [sp, #0]
   b5958:	4924      	ldr	r1, [pc, #144]	; (b59ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b595a:	4603      	mov	r3, r0
   b595c:	aa06      	add	r2, sp, #24
   b595e:	2032      	movs	r0, #50	; 0x32
   b5960:	f7fe fef2 	bl	b4748 <log_message>
                    return false;
   b5964:	a804      	add	r0, sp, #16
   b5966:	f7ff ffaa 	bl	b58be <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b596a:	e7e1      	b.n	b5930 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b596c:	4602      	mov	r2, r0
   b596e:	21ff      	movs	r1, #255	; 0xff
   b5970:	462b      	mov	r3, r5
   b5972:	4648      	mov	r0, r9
   b5974:	f7ff fb3e 	bl	b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b5978:	9803      	ldr	r0, [sp, #12]
   b597a:	462a      	mov	r2, r5
   b597c:	4641      	mov	r1, r8
   b597e:	f001 fd43 	bl	b7408 <memcmp>
   b5982:	b118      	cbz	r0, b598c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b5984:	a804      	add	r0, sp, #16
   b5986:	f7ff ff9a 	bl	b58be <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b598a:	e7ce      	b.n	b592a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b598c:	2401      	movs	r4, #1
   b598e:	e7e9      	b.n	b5964 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b5990:	4628      	mov	r0, r5
   b5992:	f7fe ff75 	bl	b4880 <malloc>
   b5996:	2400      	movs	r4, #0
   b5998:	ab03      	add	r3, sp, #12
   b599a:	4606      	mov	r6, r0
   b599c:	9003      	str	r0, [sp, #12]
   b599e:	9304      	str	r3, [sp, #16]
   b59a0:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b59a4:	b978      	cbnz	r0, b59c6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b59a6:	2320      	movs	r3, #32
   b59a8:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b59ac:	4b0e      	ldr	r3, [pc, #56]	; (b59e8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b59ae:	9300      	str	r3, [sp, #0]
   b59b0:	490e      	ldr	r1, [pc, #56]	; (b59ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b59b2:	4603      	mov	r3, r0
   b59b4:	aa06      	add	r2, sp, #24
   b59b6:	2032      	movs	r0, #50	; 0x32
   b59b8:	f7fe fec6 	bl	b4748 <log_message>
                    return false;
   b59bc:	4634      	mov	r4, r6
   b59be:	a804      	add	r0, sp, #16
   b59c0:	f7ff ff88 	bl	b58d4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b59c4:	e7b4      	b.n	b5930 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b59c6:	4602      	mov	r2, r0
   b59c8:	21ff      	movs	r1, #255	; 0xff
   b59ca:	462b      	mov	r3, r5
   b59cc:	4638      	mov	r0, r7
   b59ce:	f7ff fb11 	bl	b4ff4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b59d2:	9803      	ldr	r0, [sp, #12]
   b59d4:	462a      	mov	r2, r5
   b59d6:	4641      	mov	r1, r8
   b59d8:	f001 fd16 	bl	b7408 <memcmp>
   b59dc:	2800      	cmp	r0, #0
   b59de:	d1ee      	bne.n	b59be <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b59e0:	2401      	movs	r4, #1
   b59e2:	e7ec      	b.n	b59be <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b59e4:	2401      	movs	r4, #1
   b59e6:	e7a3      	b.n	b5930 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b59e8:	000b77e4 	.word	0x000b77e4
   b59ec:	000b7763 	.word	0x000b7763

000b59f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b59f0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b59f2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b59f4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b59f6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b59f8:	dd03      	ble.n	b5a02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b59fa:	f7fe ff51 	bl	b48a0 <realloc>
            if (!d) {
   b59fe:	b918      	cbnz	r0, b5a08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5a00:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5a02:	f7fe ff45 	bl	b4890 <free>
        T* d = nullptr;
   b5a06:	2000      	movs	r0, #0
        data_ = d;
   b5a08:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5a0a:	60a5      	str	r5, [r4, #8]
        return true;
   b5a0c:	2001      	movs	r0, #1
   b5a0e:	e7f7      	b.n	b5a00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5a10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5a10:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5a12:	6883      	ldr	r3, [r0, #8]
   b5a14:	428b      	cmp	r3, r1
   b5a16:	da02      	bge.n	b5a1e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5a18:	f7ff ffea 	bl	b59f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5a1c:	bd08      	pop	{r3, pc}
    return true;
   b5a1e:	2001      	movs	r0, #1
   b5a20:	e7fc      	b.n	b5a1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5a22:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5a24:	2300      	movs	r3, #0
   b5a26:	e9c0 3300 	strd	r3, r3, [r0]
   b5a2a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5a2c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5a2e:	6849      	ldr	r1, [r1, #4]
   b5a30:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5a32:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5a34:	dd10      	ble.n	b5a58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b5a36:	f7ff ffdb 	bl	b59f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5a3a:	b168      	cbz	r0, b5a58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5a3c:	e9d5 3100 	ldrd	r3, r1, [r5]
   b5a40:	6822      	ldr	r2, [r4, #0]
   b5a42:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b5a44:	4299      	cmp	r1, r3
   b5a46:	d005      	beq.n	b5a54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b5a48:	b10a      	cbz	r2, b5a4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b5a4a:	7818      	ldrb	r0, [r3, #0]
   b5a4c:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b5a4e:	3301      	adds	r3, #1
   b5a50:	3201      	adds	r2, #1
   b5a52:	e7f7      	b.n	b5a44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b5a54:	686b      	ldr	r3, [r5, #4]
   b5a56:	6063      	str	r3, [r4, #4]
}
   b5a58:	4620      	mov	r0, r4
   b5a5a:	bd38      	pop	{r3, r4, r5, pc}

000b5a5c <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b5a5c:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b5a5e:	680b      	ldr	r3, [r1, #0]
   b5a60:	6003      	str	r3, [r0, #0]
   b5a62:	684b      	ldr	r3, [r1, #4]
   b5a64:	6043      	str	r3, [r0, #4]
   b5a66:	4604      	mov	r4, r0
   b5a68:	460d      	mov	r5, r1
class BleAdvertisingData {
   b5a6a:	3008      	adds	r0, #8
   b5a6c:	3108      	adds	r1, #8
   b5a6e:	f7ff ffd8 	bl	b5a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b5a72:	f105 0114 	add.w	r1, r5, #20
   b5a76:	f104 0014 	add.w	r0, r4, #20
   b5a7a:	f7ff ffd2 	bl	b5a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b5a7e:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5a82:	f884 3020 	strb.w	r3, [r4, #32]
   b5a86:	4620      	mov	r0, r4
   b5a88:	bd38      	pop	{r3, r4, r5, pc}

000b5a8a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b5a8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5a8c:	4604      	mov	r4, r0
   b5a8e:	a801      	add	r0, sp, #4
   b5a90:	f7ff ffc7 	bl	b5a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b5a94:	9b01      	ldr	r3, [sp, #4]
   b5a96:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a98:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5a9a:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a9c:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5a9e:	6062      	str	r2, [r4, #4]
   b5aa0:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5aa2:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5aa4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5aa6:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5aa8:	9001      	str	r0, [sp, #4]
   b5aaa:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b5aac:	f7fe fef0 	bl	b4890 <free>
   b5ab0:	b004      	add	sp, #16
   b5ab2:	bd10      	pop	{r4, pc}

000b5ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ab8:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5aba:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5abc:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5abe:	4419      	add	r1, r3
   b5ac0:	6883      	ldr	r3, [r0, #8]
   b5ac2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5ac4:	4604      	mov	r4, r0
   b5ac6:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5ac8:	dc12      	bgt.n	b5af0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5aca:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5acc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5ace:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5ad0:	1bd2      	subs	r2, r2, r7
   b5ad2:	4631      	mov	r1, r6
   b5ad4:	1970      	adds	r0, r6, r5
   b5ad6:	f001 fcb5 	bl	b7444 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5ada:	462a      	mov	r2, r5
   b5adc:	4641      	mov	r1, r8
   b5ade:	4630      	mov	r0, r6
   b5ae0:	f001 fca2 	bl	b7428 <memcpy>
    size_ += n;
   b5ae4:	6863      	ldr	r3, [r4, #4]
   b5ae6:	442b      	add	r3, r5
   b5ae8:	6063      	str	r3, [r4, #4]
    return true;
   b5aea:	2001      	movs	r0, #1
}
   b5aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5af0:	f7ff ff7e 	bl	b59f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5af4:	2800      	cmp	r0, #0
   b5af6:	d1e8      	bne.n	b5aca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b5af8:	e7f8      	b.n	b5aec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5afa <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b5afa:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b5afc:	460a      	mov	r2, r1
   b5afe:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b5b00:	b510      	push	{r4, lr}
   b5b02:	4604      	mov	r4, r0
    size_ = 0;
   b5b04:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b5b06:	b102      	cbz	r2, b5b0a <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b5b08:	b90b      	cbnz	r3, b5b0e <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b5b0a:	2000      	movs	r0, #0
}
   b5b0c:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b5b0e:	2bff      	cmp	r3, #255	; 0xff
   b5b10:	bf28      	it	cs
   b5b12:	23ff      	movcs	r3, #255	; 0xff
   b5b14:	f7ff ffce 	bl	b5ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b5b18:	2800      	cmp	r0, #0
   b5b1a:	d0f7      	beq.n	b5b0c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b5b1c:	6860      	ldr	r0, [r4, #4]
   b5b1e:	e7f5      	b.n	b5b0c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b5b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b22:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b24:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5b28:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5b2a:	4604      	mov	r4, r0
   b5b2c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b2e:	da0b      	bge.n	b5b48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5b30:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b32:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5b34:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b36:	1b52      	subs	r2, r2, r5
   b5b38:	1c48      	adds	r0, r1, #1
   b5b3a:	f001 fc83 	bl	b7444 <memmove>
    new(p) T(std::move(value));
   b5b3e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5b40:	6863      	ldr	r3, [r4, #4]
   b5b42:	3301      	adds	r3, #1
   b5b44:	6063      	str	r3, [r4, #4]
}
   b5b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b48:	3101      	adds	r1, #1
   b5b4a:	f7ff ff51 	bl	b59f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5b4e:	2800      	cmp	r0, #0
   b5b50:	d1ee      	bne.n	b5b30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5b52:	e7f8      	b.n	b5b46 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5b54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5b54:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5b56:	6841      	ldr	r1, [r0, #4]
   b5b58:	f7ff bfe2 	b.w	b5b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5b5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5b60:	4604      	mov	r4, r0
   b5b62:	461d      	mov	r5, r3
   b5b64:	460f      	mov	r7, r1
   b5b66:	ab01      	add	r3, sp, #4
   b5b68:	4690      	mov	r8, r2
   b5b6a:	460a      	mov	r2, r1
   b5b6c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5b70:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5b74:	f7ff f858 	bl	b4c28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5b78:	1cae      	adds	r6, r5, #2
   b5b7a:	6863      	ldr	r3, [r4, #4]
   b5b7c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5b7e:	f1b9 0f00 	cmp.w	r9, #0
   b5b82:	d126      	bne.n	b5bd2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5b84:	b328      	cbz	r0, b5bd2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5b86:	4433      	add	r3, r6
   b5b88:	1a1b      	subs	r3, r3, r0
   b5b8a:	2bff      	cmp	r3, #255	; 0xff
   b5b8c:	d809      	bhi.n	b5ba2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5b8e:	9901      	ldr	r1, [sp, #4]
   b5b90:	4620      	mov	r0, r4
   b5b92:	f7ff fc7b 	bl	b548c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5b96:	6861      	ldr	r1, [r4, #4]
   b5b98:	4620      	mov	r0, r4
   b5b9a:	4431      	add	r1, r6
   b5b9c:	f7ff ff38 	bl	b5a10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5ba0:	b918      	cbnz	r0, b5baa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5ba2:	6860      	ldr	r0, [r4, #4]
}
   b5ba4:	b003      	add	sp, #12
   b5ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5baa:	1c6a      	adds	r2, r5, #1
   b5bac:	9901      	ldr	r1, [sp, #4]
   b5bae:	b2d2      	uxtb	r2, r2
   b5bb0:	4620      	mov	r0, r4
   b5bb2:	f7ff ffb5 	bl	b5b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5bb6:	9901      	ldr	r1, [sp, #4]
   b5bb8:	463a      	mov	r2, r7
   b5bba:	3101      	adds	r1, #1
   b5bbc:	4620      	mov	r0, r4
   b5bbe:	f7ff ffaf 	bl	b5b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5bc2:	9901      	ldr	r1, [sp, #4]
   b5bc4:	462b      	mov	r3, r5
   b5bc6:	4642      	mov	r2, r8
   b5bc8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5bca:	4620      	mov	r0, r4
   b5bcc:	f7ff ff72 	bl	b5ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5bd0:	e7e7      	b.n	b5ba2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5bd2:	18f1      	adds	r1, r6, r3
   b5bd4:	29ff      	cmp	r1, #255	; 0xff
   b5bd6:	d8e4      	bhi.n	b5ba2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5bd8:	4620      	mov	r0, r4
   b5bda:	f7ff ff19 	bl	b5a10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5bde:	2800      	cmp	r0, #0
   b5be0:	d0df      	beq.n	b5ba2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5be2:	1c69      	adds	r1, r5, #1
   b5be4:	b2c9      	uxtb	r1, r1
   b5be6:	4620      	mov	r0, r4
   b5be8:	f7ff ffb4 	bl	b5b54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5bec:	4639      	mov	r1, r7
   b5bee:	4620      	mov	r0, r4
   b5bf0:	f7ff ffb0 	bl	b5b54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5bf4:	6861      	ldr	r1, [r4, #4]
   b5bf6:	462b      	mov	r3, r5
   b5bf8:	4642      	mov	r2, r8
   b5bfa:	e7e6      	b.n	b5bca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5bfc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5bfc:	b430      	push	{r4, r5}
   b5bfe:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5c02:	b11a      	cbz	r2, b5c0c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5c04:	9502      	str	r5, [sp, #8]
}
   b5c06:	bc30      	pop	{r4, r5}
   b5c08:	f7ff bfa8 	b.w	b5b5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5c0c:	6840      	ldr	r0, [r0, #4]
}
   b5c0e:	bc30      	pop	{r4, r5}
   b5c10:	4770      	bx	lr

000b5c12 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5c12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5c14:	2300      	movs	r3, #0
   b5c16:	e9c0 3300 	strd	r3, r3, [r0]
   b5c1a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5c1c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5c1e:	9300      	str	r3, [sp, #0]
   b5c20:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5c22:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5c26:	4619      	mov	r1, r3
   b5c28:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b5c2c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5c2e:	f7ff ffe5 	bl	b5bfc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5c32:	4620      	mov	r0, r4
   b5c34:	b004      	add	sp, #16
   b5c36:	bd10      	pop	{r4, pc}

000b5c38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5c38:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c3c:	4604      	mov	r4, r0
   b5c3e:	460d      	mov	r5, r1
   b5c40:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5c42:	d914      	bls.n	b5c6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5c44:	4290      	cmp	r0, r2
   b5c46:	d213      	bcs.n	b5c70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5c48:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5c4c:	1a75      	subs	r5, r6, r1
   b5c4e:	f1a1 0708 	sub.w	r7, r1, #8
   b5c52:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5c54:	42b7      	cmp	r7, r6
   b5c56:	d018      	beq.n	b5c8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5c58:	b11c      	cbz	r4, b5c62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5c5a:	4631      	mov	r1, r6
   b5c5c:	4620      	mov	r0, r4
   b5c5e:	f7ff fc9a 	bl	b5596 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b5c62:	1d30      	adds	r0, r6, #4
   b5c64:	f7ff fca1 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5c68:	3e08      	subs	r6, #8
   b5c6a:	3c08      	subs	r4, #8
   b5c6c:	e7f2      	b.n	b5c54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5c6e:	d00c      	beq.n	b5c8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5c70:	42b5      	cmp	r5, r6
   b5c72:	d00a      	beq.n	b5c8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5c74:	b11c      	cbz	r4, b5c7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5c76:	4629      	mov	r1, r5
   b5c78:	4620      	mov	r0, r4
   b5c7a:	f7ff fc8c 	bl	b5596 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5c7e:	1d28      	adds	r0, r5, #4
   b5c80:	f7ff fc93 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5c84:	3508      	adds	r5, #8
   b5c86:	3408      	adds	r4, #8
   b5c88:	e7f2      	b.n	b5c70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c8e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5c90:	6846      	ldr	r6, [r0, #4]
   b5c92:	4668      	mov	r0, sp
   b5c94:	f7ff fc7f 	bl	b5596 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c98:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5c9c:	429f      	cmp	r7, r3
   b5c9e:	db12      	blt.n	b5cc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5ca0:	3701      	adds	r7, #1
        if (n > 0) {
   b5ca2:	2f00      	cmp	r7, #0
   b5ca4:	dd29      	ble.n	b5cfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5ca6:	00f8      	lsls	r0, r7, #3
   b5ca8:	f7fe fdea 	bl	b4880 <malloc>
            if (!d) {
   b5cac:	4605      	mov	r5, r0
   b5cae:	b1f0      	cbz	r0, b5cee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5cb0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5cb4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5cb8:	f7ff ffbe 	bl	b5c38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5cbc:	6820      	ldr	r0, [r4, #0]
   b5cbe:	f7fe fde7 	bl	b4890 <free>
        data_ = d;
   b5cc2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5cc4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5cc6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5cc8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5cca:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5cce:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5cd2:	4631      	mov	r1, r6
   b5cd4:	f106 0008 	add.w	r0, r6, #8
   b5cd8:	f7ff ffae 	bl	b5c38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5cdc:	b11e      	cbz	r6, b5ce6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5cde:	4669      	mov	r1, sp
   b5ce0:	4630      	mov	r0, r6
   b5ce2:	f7ff fc58 	bl	b5596 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5ce6:	6863      	ldr	r3, [r4, #4]
   b5ce8:	3301      	adds	r3, #1
   b5cea:	6063      	str	r3, [r4, #4]
    return true;
   b5cec:	2501      	movs	r5, #1
   b5cee:	a801      	add	r0, sp, #4
   b5cf0:	f7ff fc5b 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5cf4:	4628      	mov	r0, r5
   b5cf6:	b003      	add	sp, #12
   b5cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5cfa:	2500      	movs	r5, #0
   b5cfc:	e7de      	b.n	b5cbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5cfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5d00:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5d04:	4605      	mov	r5, r0
   b5d06:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5d08:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5d0c:	42a6      	cmp	r6, r4
   b5d0e:	d005      	beq.n	b5d1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5d10:	4639      	mov	r1, r7
   b5d12:	4620      	mov	r0, r4
   b5d14:	f7ff fa55 	bl	b51c2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5d18:	b108      	cbz	r0, b5d1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5d1a:	b914      	cbnz	r4, b5d22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5d1e:	3408      	adds	r4, #8
   b5d20:	e7f4      	b.n	b5d0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b5d22:	1d20      	adds	r0, r4, #4
   b5d24:	f7ff fc41 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5d28:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5d2c:	f104 0108 	add.w	r1, r4, #8
   b5d30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5d34:	4620      	mov	r0, r4
   b5d36:	f7ff ff7f 	bl	b5c38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5d3a:	686b      	ldr	r3, [r5, #4]
   b5d3c:	3b01      	subs	r3, #1
   b5d3e:	606b      	str	r3, [r5, #4]
    return true;
   b5d40:	e7ec      	b.n	b5d1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b5d44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d48:	4605      	mov	r5, r0
   b5d4a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5d4c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5d4e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5d50:	f7ff f80a 	bl	b4d68 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5d54:	682e      	ldr	r6, [r5, #0]
   b5d56:	1ef3      	subs	r3, r6, #3
   b5d58:	2b0d      	cmp	r3, #13
   b5d5a:	d83c      	bhi.n	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5d5c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5d60:	0053000e 	.word	0x0053000e
   b5d64:	00d1003b 	.word	0x00d1003b
   b5d68:	003b003b 	.word	0x003b003b
   b5d6c:	003b003b 	.word	0x003b003b
   b5d70:	009b003b 	.word	0x009b003b
   b5d74:	009b009b 	.word	0x009b009b
   b5d78:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b5d7c:	a804      	add	r0, sp, #16
   b5d7e:	f7ff f9eb 	bl	b5158 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5d82:	9b04      	ldr	r3, [sp, #16]
   b5d84:	89aa      	ldrh	r2, [r5, #12]
   b5d86:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5d88:	6869      	ldr	r1, [r5, #4]
   b5d8a:	9804      	ldr	r0, [sp, #16]
   b5d8c:	3108      	adds	r1, #8
   b5d8e:	3002      	adds	r0, #2
   b5d90:	f7ff f809 	bl	b4da6 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5d94:	a904      	add	r1, sp, #16
   b5d96:	a806      	add	r0, sp, #24
   b5d98:	f7ff fbfd 	bl	b5596 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b5d9c:	a906      	add	r1, sp, #24
   b5d9e:	f104 0018 	add.w	r0, r4, #24
   b5da2:	f7ff ff73 	bl	b5c8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5da6:	4605      	mov	r5, r0
   b5da8:	a807      	add	r0, sp, #28
   b5daa:	f7ff fbfe 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5dae:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5db0:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5db2:	b9b5      	cbnz	r5, b5de2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5db4:	4b5d      	ldr	r3, [pc, #372]	; (b5f2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b5db6:	495e      	ldr	r1, [pc, #376]	; (b5f30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5db8:	9300      	str	r3, [sp, #0]
   b5dba:	2032      	movs	r0, #50	; 0x32
   b5dbc:	462b      	mov	r3, r5
   b5dbe:	aa06      	add	r2, sp, #24
   b5dc0:	9507      	str	r5, [sp, #28]
   b5dc2:	f7fe fcc1 	bl	b4748 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5dc6:	9b04      	ldr	r3, [sp, #16]
   b5dc8:	4629      	mov	r1, r5
   b5dca:	8818      	ldrh	r0, [r3, #0]
   b5dcc:	f7fe fbf4 	bl	b45b8 <hal_ble_gap_disconnect>
   b5dd0:	a805      	add	r0, sp, #20
   b5dd2:	f7ff fbea 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b5dd6:	a803      	add	r0, sp, #12
   b5dd8:	f7fe ffd4 	bl	b4d84 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5ddc:	b00e      	add	sp, #56	; 0x38
   b5dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b5de2:	4a54      	ldr	r2, [pc, #336]	; (b5f34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5de4:	9200      	str	r2, [sp, #0]
   b5de6:	2300      	movs	r3, #0
   b5de8:	4951      	ldr	r1, [pc, #324]	; (b5f30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5dea:	9307      	str	r3, [sp, #28]
   b5dec:	aa06      	add	r2, sp, #24
   b5dee:	2001      	movs	r0, #1
   b5df0:	f7fe fcaa 	bl	b4748 <log_message>
                if (impl->connectedCallback_) {
   b5df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5df6:	2b00      	cmp	r3, #0
   b5df8:	d0ea      	beq.n	b5dd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b5dfa:	a904      	add	r1, sp, #16
   b5dfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5e00:	f7ff fc53 	bl	b56aa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5e04:	e7e4      	b.n	b5dd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5e06:	89a9      	ldrh	r1, [r5, #12]
   b5e08:	4620      	mov	r0, r4
   b5e0a:	f7ff f96f 	bl	b50ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5e0e:	4606      	mov	r6, r0
   b5e10:	2800      	cmp	r0, #0
   b5e12:	d0e0      	beq.n	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b5e14:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5e16:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b5e1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5e1e:	8029      	strh	r1, [r5, #0]
   b5e20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b5e24:	429a      	cmp	r2, r3
   b5e26:	d003      	beq.n	b5e30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b5e28:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5e2c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b5e2e:	e7f9      	b.n	b5e24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b5e30:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b5e34:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5e38:	45b8      	cmp	r8, r7
   b5e3a:	d004      	beq.n	b5e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b5e3c:	1d38      	adds	r0, r7, #4
   b5e3e:	f7ff fbb4 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5e42:	3708      	adds	r7, #8
   b5e44:	e7f8      	b.n	b5e38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b5e46:	2300      	movs	r3, #0
   b5e48:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b5e4a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b5e4e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5e52:	45b8      	cmp	r8, r7
   b5e54:	d004      	beq.n	b5e60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b5e56:	1d38      	adds	r0, r7, #4
   b5e58:	f7ff fba7 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5e5c:	3708      	adds	r7, #8
   b5e5e:	e7f8      	b.n	b5e52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b5e60:	2300      	movs	r3, #0
   b5e62:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b5e64:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b5e66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5e68:	b123      	cbz	r3, b5e74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b5e6a:	4631      	mov	r1, r6
   b5e6c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5e70:	f7ff fc1b 	bl	b56aa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b5e74:	2300      	movs	r3, #0
   b5e76:	2220      	movs	r2, #32
   b5e78:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b5e7c:	4a2e      	ldr	r2, [pc, #184]	; (b5f38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b5e7e:	9200      	str	r2, [sp, #0]
   b5e80:	492b      	ldr	r1, [pc, #172]	; (b5f30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5e82:	aa06      	add	r2, sp, #24
   b5e84:	2001      	movs	r0, #1
   b5e86:	f7fe fc5f 	bl	b4748 <log_message>
                    impl->peers_.removeOne(*peer);
   b5e8a:	4631      	mov	r1, r6
   b5e8c:	f104 0018 	add.w	r0, r4, #24
   b5e90:	f7ff ff35 	bl	b5cfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b5e94:	e79f      	b.n	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5e96:	89a9      	ldrh	r1, [r5, #12]
   b5e98:	4620      	mov	r0, r4
   b5e9a:	f7ff f927 	bl	b50ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5e9e:	2800      	cmp	r0, #0
   b5ea0:	d099      	beq.n	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b5ea2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b5ea4:	2b00      	cmp	r3, #0
   b5ea6:	d096      	beq.n	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b5ea8:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5eaa:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5eac:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5eb0:	d001      	beq.n	b5eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b5eb2:	2e10      	cmp	r6, #16
   b5eb4:	d117      	bne.n	b5ee6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b5eb6:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5eb8:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5eba:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5ebc:	2506      	movs	r5, #6
                        };
   b5ebe:	f88d 3015 	strb.w	r3, [sp, #21]
   b5ec2:	9104      	str	r1, [sp, #16]
   b5ec4:	f88d 2014 	strb.w	r2, [sp, #20]
   b5ec8:	9006      	str	r0, [sp, #24]
   b5eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5ece:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5ed0:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b5ed4:	9508      	str	r5, [sp, #32]
   b5ed6:	e883 0003 	stmia.w	r3, {r0, r1}
   b5eda:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5edc:	a906      	add	r1, sp, #24
   b5ede:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5ee2:	4798      	blx	r3
   b5ee4:	e777      	b.n	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b5ee6:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5ee8:	bf01      	itttt	eq
   b5eea:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5eec:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5eee:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b5ef2:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b5ef4:	bf0f      	iteee	eq
   b5ef6:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b5efa:	461a      	movne	r2, r3
   b5efc:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b5efe:	461d      	movne	r5, r3
   b5f00:	e7dd      	b.n	b5ebe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5f02:	89a9      	ldrh	r1, [r5, #12]
   b5f04:	4620      	mov	r0, r4
   b5f06:	f7ff f8f1 	bl	b50ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b5f0a:	4601      	mov	r1, r0
   b5f0c:	2800      	cmp	r0, #0
   b5f0e:	f43f af62 	beq.w	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5f12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b5f14:	2b00      	cmp	r3, #0
   b5f16:	f43f af5e 	beq.w	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b5f1a:	686b      	ldr	r3, [r5, #4]
   b5f1c:	9306      	str	r3, [sp, #24]
   b5f1e:	aa06      	add	r2, sp, #24
   b5f20:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b5f22:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5f26:	4798      	blx	r3
   b5f28:	e755      	b.n	b5dd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5f2a:	bf00      	nop
   b5f2c:	000b77ff 	.word	0x000b77ff
   b5f30:	000b7763 	.word	0x000b7763
   b5f34:	000b7825 	.word	0x000b7825
   b5f38:	000b7842 	.word	0x000b7842

000b5f3c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5f3c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5f3e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5f40:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5f42:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5f44:	dd05      	ble.n	b5f52 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b5f46:	2114      	movs	r1, #20
   b5f48:	4369      	muls	r1, r5
   b5f4a:	f7fe fca9 	bl	b48a0 <realloc>
            if (!d) {
   b5f4e:	b918      	cbnz	r0, b5f58 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b5f50:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5f52:	f7fe fc9d 	bl	b4890 <free>
        T* d = nullptr;
   b5f56:	2000      	movs	r0, #0
        data_ = d;
   b5f58:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5f5a:	60a5      	str	r5, [r4, #8]
        return true;
   b5f5c:	2001      	movs	r0, #1
   b5f5e:	e7f7      	b.n	b5f50 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b5f60 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b5f64:	2400      	movs	r4, #0
   b5f66:	e9c0 4400 	strd	r4, r4, [r0]
   b5f6a:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5f6c:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5f6e:	6849      	ldr	r1, [r1, #4]
   b5f70:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5f72:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5f74:	dd1a      	ble.n	b5fac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b5f76:	f7ff ffe1 	bl	b5f3c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5f7a:	b1b8      	cbz	r0, b5fac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5f7c:	e9d8 9300 	ldrd	r9, r3, [r8]
   b5f80:	f04f 0c14 	mov.w	ip, #20
   b5f84:	f8d7 e000 	ldr.w	lr, [r7]
   b5f88:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b5f8c:	eb09 0504 	add.w	r5, r9, r4
   b5f90:	45ac      	cmp	ip, r5
   b5f92:	d008      	beq.n	b5fa6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b5f94:	eb1e 0604 	adds.w	r6, lr, r4
   b5f98:	bf1f      	itttt	ne
   b5f9a:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b5f9c:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b5f9e:	682b      	ldrne	r3, [r5, #0]
   b5fa0:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b5fa2:	3414      	adds	r4, #20
   b5fa4:	e7f2      	b.n	b5f8c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b5fa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b5faa:	607b      	str	r3, [r7, #4]
}
   b5fac:	4638      	mov	r0, r7
   b5fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5fb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b5fb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b5fb6:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b5fba:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5fbc:	6883      	ldr	r3, [r0, #8]
   b5fbe:	19e9      	adds	r1, r5, r7
   b5fc0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b5fc2:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5fc4:	dc17      	bgt.n	b5ff6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b5fc6:	2314      	movs	r3, #20
   b5fc8:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b5fca:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5fcc:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b5fce:	fb03 f907 	mul.w	r9, r3, r7
   b5fd2:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b5fd4:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5fd6:	1b52      	subs	r2, r2, r5
   b5fd8:	4631      	mov	r1, r6
   b5fda:	eb06 0009 	add.w	r0, r6, r9
   b5fde:	f001 fa31 	bl	b7444 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5fe2:	464a      	mov	r2, r9
   b5fe4:	4641      	mov	r1, r8
   b5fe6:	4630      	mov	r0, r6
   b5fe8:	f001 fa1e 	bl	b7428 <memcpy>
    size_ += n;
   b5fec:	6863      	ldr	r3, [r4, #4]
   b5fee:	443b      	add	r3, r7
   b5ff0:	6063      	str	r3, [r4, #4]
}
   b5ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5ff6:	f7ff ffa1 	bl	b5f3c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5ffa:	2800      	cmp	r0, #0
   b5ffc:	d1e3      	bne.n	b5fc6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b5ffe:	e7f8      	b.n	b5ff2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b6000 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6000:	b082      	sub	sp, #8
   b6002:	b570      	push	{r4, r5, r6, lr}
   b6004:	460c      	mov	r4, r1
   b6006:	a904      	add	r1, sp, #16
   b6008:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b600c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6010:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6012:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6014:	da17      	bge.n	b6046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b6016:	2314      	movs	r3, #20
   b6018:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b601c:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b601e:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b6020:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b6022:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6024:	1a52      	subs	r2, r2, r1
   b6026:	18e0      	adds	r0, r4, r3
   b6028:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b602a:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b602c:	f001 fa0a 	bl	b7444 <memmove>
    new(p) T(std::move(value));
   b6030:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6034:	6833      	ldr	r3, [r6, #0]
   b6036:	6023      	str	r3, [r4, #0]
    ++size_;
   b6038:	686b      	ldr	r3, [r5, #4]
   b603a:	3301      	adds	r3, #1
   b603c:	606b      	str	r3, [r5, #4]
}
   b603e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6042:	b002      	add	sp, #8
   b6044:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6046:	3101      	adds	r1, #1
   b6048:	f7ff ff78 	bl	b5f3c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b604c:	2800      	cmp	r0, #0
   b604e:	d1e2      	bne.n	b6016 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b6050:	e7f5      	b.n	b603e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b6052 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b6052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b6056:	2400      	movs	r4, #0
   b6058:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b605a:	1e93      	subs	r3, r2, #2
   b605c:	e9c0 4400 	strd	r4, r4, [r0]
   b6060:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b6062:	4605      	mov	r5, r0
   b6064:	460f      	mov	r7, r1
   b6066:	4690      	mov	r8, r2
   b6068:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b606a:	9305      	str	r3, [sp, #20]
    return size_;
   b606c:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b606e:	428c      	cmp	r4, r1
   b6070:	da72      	bge.n	b6158 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b6072:	6838      	ldr	r0, [r7, #0]
   b6074:	ab07      	add	r3, sp, #28
   b6076:	4642      	mov	r2, r8
   b6078:	1b09      	subs	r1, r1, r4
   b607a:	4420      	add	r0, r4
   b607c:	f7fe fdd4 	bl	b4c28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b6080:	4606      	mov	r6, r0
   b6082:	2800      	cmp	r0, #0
   b6084:	d068      	beq.n	b6158 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6086:	9b05      	ldr	r3, [sp, #20]
   b6088:	2b01      	cmp	r3, #1
   b608a:	d82f      	bhi.n	b60ec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b608c:	f1a0 0b02 	sub.w	fp, r0, #2
   b6090:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b6094:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b6098:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b609c:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b609e:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b60a0:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b60a2:	d055      	beq.n	b6150 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b60a4:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b60a6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b60aa:	4413      	add	r3, r2
   b60ac:	a808      	add	r0, sp, #32
   b60ae:	78d9      	ldrb	r1, [r3, #3]
   b60b0:	789b      	ldrb	r3, [r3, #2]
   b60b2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b60b6:	f7fe fed0 	bl	b4e5a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b60ba:	f10d 0e20 	add.w	lr, sp, #32
   b60be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b60c2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b60c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b60ca:	f8de 3000 	ldr.w	r3, [lr]
   b60ce:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b60d2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b60d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b60da:	ab0d      	add	r3, sp, #52	; 0x34
   b60dc:	cb0c      	ldmia	r3, {r2, r3}
   b60de:	6869      	ldr	r1, [r5, #4]
   b60e0:	4628      	mov	r0, r5
   b60e2:	f7ff ff8d 	bl	b6000 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b60e6:	f109 0901 	add.w	r9, r9, #1
   b60ea:	e7d7      	b.n	b609c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b60ec:	f1a8 0306 	sub.w	r3, r8, #6
   b60f0:	2b01      	cmp	r3, #1
   b60f2:	d82d      	bhi.n	b6150 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b60f4:	f1a0 0b02 	sub.w	fp, r0, #2
   b60f8:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b60fc:	f04f 0900 	mov.w	r9, #0
   b6100:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b6104:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b6106:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b6108:	d022      	beq.n	b6150 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b610a:	3302      	adds	r3, #2
    return data_[i];
   b610c:	6839      	ldr	r1, [r7, #0]
   b610e:	4423      	add	r3, r4
   b6110:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b6114:	2201      	movs	r2, #1
   b6116:	4419      	add	r1, r3
   b6118:	a808      	add	r0, sp, #32
   b611a:	f7fe fe7f 	bl	b4e1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b611e:	f10d 0e20 	add.w	lr, sp, #32
   b6122:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b6126:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b612a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b612e:	f8de 3000 	ldr.w	r3, [lr]
   b6132:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b6136:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b613a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b613e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b6142:	6869      	ldr	r1, [r5, #4]
   b6144:	4628      	mov	r0, r5
   b6146:	f7ff ff5b 	bl	b6000 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b614a:	f109 0901 	add.w	r9, r9, #1
   b614e:	e7d9      	b.n	b6104 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b6150:	9b07      	ldr	r3, [sp, #28]
   b6152:	441c      	add	r4, r3
   b6154:	4434      	add	r4, r6
   b6156:	e789      	b.n	b606c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b6158:	4628      	mov	r0, r5
   b615a:	b013      	add	sp, #76	; 0x4c
   b615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6160 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b6160:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b6162:	2300      	movs	r3, #0
   b6164:	b085      	sub	sp, #20
   b6166:	e9c0 3300 	strd	r3, r3, [r0]
   b616a:	6083      	str	r3, [r0, #8]
   b616c:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b616e:	2202      	movs	r2, #2
   b6170:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b6172:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6174:	f7ff ff6d 	bl	b6052 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6178:	a901      	add	r1, sp, #4
   b617a:	4620      	mov	r0, r4
   b617c:	f7ff ff19 	bl	b5fb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6180:	a801      	add	r0, sp, #4
   b6182:	f7ff f938 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6186:	2202      	movs	r2, #2
   b6188:	4629      	mov	r1, r5
   b618a:	a801      	add	r0, sp, #4
   b618c:	f7ff ff61 	bl	b6052 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6190:	a901      	add	r1, sp, #4
   b6192:	4620      	mov	r0, r4
   b6194:	f7ff ff0d 	bl	b5fb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6198:	a801      	add	r0, sp, #4
   b619a:	f7ff f92c 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b619e:	2203      	movs	r2, #3
   b61a0:	4629      	mov	r1, r5
   b61a2:	a801      	add	r0, sp, #4
   b61a4:	f7ff ff55 	bl	b6052 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b61a8:	a901      	add	r1, sp, #4
   b61aa:	4620      	mov	r0, r4
   b61ac:	f7ff ff01 	bl	b5fb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b61b0:	a801      	add	r0, sp, #4
   b61b2:	f7ff f920 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b61b6:	2206      	movs	r2, #6
   b61b8:	4629      	mov	r1, r5
   b61ba:	a801      	add	r0, sp, #4
   b61bc:	f7ff ff49 	bl	b6052 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b61c0:	a901      	add	r1, sp, #4
   b61c2:	4620      	mov	r0, r4
   b61c4:	f7ff fef5 	bl	b5fb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b61c8:	a801      	add	r0, sp, #4
   b61ca:	f7ff f914 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b61ce:	2207      	movs	r2, #7
   b61d0:	4629      	mov	r1, r5
   b61d2:	a801      	add	r0, sp, #4
   b61d4:	f7ff ff3d 	bl	b6052 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b61d8:	a901      	add	r1, sp, #4
   b61da:	4620      	mov	r0, r4
   b61dc:	f7ff fee9 	bl	b5fb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b61e0:	a801      	add	r0, sp, #4
   b61e2:	f7ff f908 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b61e6:	4620      	mov	r0, r4
   b61e8:	b005      	add	sp, #20
   b61ea:	bd30      	pop	{r4, r5, pc}

000b61ec <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b61ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61f0:	b08b      	sub	sp, #44	; 0x2c
   b61f2:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b61f4:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b61f8:	a801      	add	r0, sp, #4
   b61fa:	f7ff feb1 	bl	b5f60 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b61fe:	9b02      	ldr	r3, [sp, #8]
   b6200:	2b00      	cmp	r3, #0
   b6202:	dd4a      	ble.n	b629a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b6204:	f104 0114 	add.w	r1, r4, #20
   b6208:	a804      	add	r0, sp, #16
   b620a:	f7ff ffa9 	bl	b6160 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b620e:	f104 0108 	add.w	r1, r4, #8
   b6212:	a807      	add	r0, sp, #28
   b6214:	f7ff ffa4 	bl	b6160 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b6218:	9d05      	ldr	r5, [sp, #20]
   b621a:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b621c:	2d00      	cmp	r5, #0
   b621e:	dc01      	bgt.n	b6224 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b6220:	2e00      	cmp	r6, #0
   b6222:	dd38      	ble.n	b6296 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b6224:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b6226:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b6228:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b622c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b6230:	2314      	movs	r3, #20
   b6232:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b6236:	fb03 8505 	mla	r5, r3, r5, r8
   b623a:	fb03 9606 	mla	r6, r3, r6, r9
   b623e:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b6240:	45ba      	cmp	sl, r7
   b6242:	d028      	beq.n	b6296 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b6244:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b6246:	45ab      	cmp	fp, r5
   b6248:	d015      	beq.n	b6276 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b624a:	4659      	mov	r1, fp
   b624c:	4650      	mov	r0, sl
   b624e:	f7fe fe46 	bl	b4ede <_ZNK8particle7BleUuideqERKS0_>
   b6252:	f10b 0b14 	add.w	fp, fp, #20
   b6256:	4604      	mov	r4, r0
   b6258:	2800      	cmp	r0, #0
   b625a:	d0f4      	beq.n	b6246 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b625c:	a807      	add	r0, sp, #28
   b625e:	f7ff f8ca 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b6262:	a804      	add	r0, sp, #16
   b6264:	f7ff f8c7 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b6268:	a801      	add	r0, sp, #4
   b626a:	f7ff f8c4 	bl	b53f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b626e:	4620      	mov	r0, r4
   b6270:	b00b      	add	sp, #44	; 0x2c
   b6272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6276:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b6278:	45b3      	cmp	fp, r6
   b627a:	d009      	beq.n	b6290 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b627c:	4659      	mov	r1, fp
   b627e:	4650      	mov	r0, sl
   b6280:	f7fe fe2d 	bl	b4ede <_ZNK8particle7BleUuideqERKS0_>
   b6284:	f10b 0b14 	add.w	fp, fp, #20
   b6288:	4604      	mov	r4, r0
   b628a:	2800      	cmp	r0, #0
   b628c:	d0f4      	beq.n	b6278 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b628e:	e7e5      	b.n	b625c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b6290:	f10a 0a14 	add.w	sl, sl, #20
   b6294:	e7d4      	b.n	b6240 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b6296:	2400      	movs	r4, #0
   b6298:	e7e0      	b.n	b625c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b629a:	2401      	movs	r4, #1
   b629c:	e7e4      	b.n	b6268 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b629e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b629e:	b513      	push	{r0, r1, r4, lr}
   b62a0:	460b      	mov	r3, r1
   b62a2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b62a4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b62a8:	466c      	mov	r4, sp
   b62aa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b62ae:	e893 0003 	ldmia.w	r3, {r0, r1}
   b62b2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b62b6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b62ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b62be:	b002      	add	sp, #8
   b62c0:	bd10      	pop	{r4, pc}

000b62c2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b62c2:	b538      	push	{r3, r4, r5, lr}
   b62c4:	4605      	mov	r5, r0
   b62c6:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b62c8:	f7ff ffe9 	bl	b629e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b62cc:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b62ce:	68a2      	ldr	r2, [r4, #8]
   b62d0:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b62d2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b62d4:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b62d6:	68e2      	ldr	r2, [r4, #12]
   b62d8:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b62da:	60e3      	str	r3, [r4, #12]
      }
   b62dc:	bd38      	pop	{r3, r4, r5, pc}

000b62de <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b62de:	b570      	push	{r4, r5, r6, lr}
   b62e0:	4604      	mov	r4, r0
   b62e2:	b08c      	sub	sp, #48	; 0x30
   b62e4:	460e      	mov	r6, r1
   b62e6:	9201      	str	r2, [sp, #4]
   b62e8:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b62ea:	f7fe fedf 	bl	b50ac <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b62ee:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b62f0:	9901      	ldr	r1, [sp, #4]
   b62f2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b62f6:	f7fe fbec 	bl	b4ad2 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b62fa:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b62fe:	b1cd      	cbz	r5, b6334 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b6300:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6302:	9502      	str	r5, [sp, #8]
   b6304:	a902      	add	r1, sp, #8
   b6306:	a804      	add	r0, sp, #16
   b6308:	9303      	str	r3, [sp, #12]
   b630a:	f7ff f90d 	bl	b5528 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b630e:	2300      	movs	r3, #0
	__x.swap(*this);
   b6310:	a908      	add	r1, sp, #32
   b6312:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b6314:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b6316:	f7ff ffd4 	bl	b62c2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b631a:	4631      	mov	r1, r6
   b631c:	a808      	add	r0, sp, #32
   b631e:	f7ff ffd0 	bl	b62c2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6322:	a808      	add	r0, sp, #32
   b6324:	f7fe fce2 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
   b6328:	a804      	add	r0, sp, #16
   b632a:	f7fe fcdf 	bl	b4cec <_ZNSt14_Function_baseD1Ev>
    }
   b632e:	4620      	mov	r0, r4
   b6330:	b00c      	add	sp, #48	; 0x30
   b6332:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b6334:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b6336:	e7ea      	b.n	b630e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

000b6338 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b6338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b633c:	b087      	sub	sp, #28
   b633e:	461d      	mov	r5, r3
   b6340:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b6344:	4680      	mov	r8, r0
   b6346:	468b      	mov	fp, r1
   b6348:	4692      	mov	sl, r2
   b634a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b634c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b634e:	2200      	movs	r2, #0
   b6350:	2068      	movs	r0, #104	; 0x68
   b6352:	9102      	str	r1, [sp, #8]
   b6354:	9204      	str	r2, [sp, #16]
   b6356:	f7fd fe9c 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b635a:	1e06      	subs	r6, r0, #0
   b635c:	f106 090c 	add.w	r9, r6, #12
   b6360:	d018      	beq.n	b6394 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b6362:	2201      	movs	r2, #1
	: _M_impl(__a)
   b6364:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b6366:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b636a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b636c:	4a15      	ldr	r2, [pc, #84]	; (b63c4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b636e:	f847 2b20 	str.w	r2, [r7], #32
   b6372:	9b03      	ldr	r3, [sp, #12]
   b6374:	9100      	str	r1, [sp, #0]
   b6376:	465a      	mov	r2, fp
   b6378:	4651      	mov	r1, sl
   b637a:	4648      	mov	r0, r9
   b637c:	f7ff ffaf 	bl	b62de <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b6380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6382:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6384:	682b      	ldr	r3, [r5, #0]
   b6386:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b6388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b638a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b638e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6390:	6823      	ldr	r3, [r4, #0]
   b6392:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b6394:	a904      	add	r1, sp, #16
   b6396:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b6398:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b639c:	f7ff f974 	bl	b5688 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b63a0:	a805      	add	r0, sp, #20
   b63a2:	f7ff f902 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b63a6:	f8d8 3000 	ldr.w	r3, [r8]
   b63aa:	b93b      	cbnz	r3, b63bc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b63ac:	4a06      	ldr	r2, [pc, #24]	; (b63c8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b63ae:	4907      	ldr	r1, [pc, #28]	; (b63cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b63b0:	200a      	movs	r0, #10
}
   b63b2:	b007      	add	sp, #28
   b63b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b63b8:	f7fe b9be 	b.w	b4738 <panic_>
}
   b63bc:	b007      	add	sp, #28
   b63be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b63c2:	bf00      	nop
   b63c4:	000b78bc 	.word	0x000b78bc
   b63c8:	000b4505 	.word	0x000b4505
   b63cc:	000b774c 	.word	0x000b774c

000b63d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b63d0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b63d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63d4:	4604      	mov	r4, r0
   b63d6:	460d      	mov	r5, r1
   b63d8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b63da:	d914      	bls.n	b6406 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b63dc:	4290      	cmp	r0, r2
   b63de:	d213      	bcs.n	b6408 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b63e0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b63e4:	1a75      	subs	r5, r6, r1
   b63e6:	f1a1 0708 	sub.w	r7, r1, #8
   b63ea:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b63ec:	42b7      	cmp	r7, r6
   b63ee:	d018      	beq.n	b6422 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b63f0:	b11c      	cbz	r4, b63fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b63f2:	4631      	mov	r1, r6
   b63f4:	4620      	mov	r0, r4
   b63f6:	f7ff f8c4 	bl	b5582 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b63fa:	1d30      	adds	r0, r6, #4
   b63fc:	f7ff f8d5 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6400:	3e08      	subs	r6, #8
   b6402:	3c08      	subs	r4, #8
   b6404:	e7f2      	b.n	b63ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6406:	d00c      	beq.n	b6422 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6408:	42b5      	cmp	r5, r6
   b640a:	d00a      	beq.n	b6422 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b640c:	b11c      	cbz	r4, b6416 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b640e:	4629      	mov	r1, r5
   b6410:	4620      	mov	r0, r4
   b6412:	f7ff f8b6 	bl	b5582 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6416:	1d28      	adds	r0, r5, #4
   b6418:	f7ff f8c7 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b641c:	3508      	adds	r5, #8
   b641e:	3408      	adds	r4, #8
   b6420:	e7f2      	b.n	b6408 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6424 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6424:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6426:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6428:	4605      	mov	r5, r0
        if (n > 0) {
   b642a:	dd11      	ble.n	b6450 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b642c:	00f0      	lsls	r0, r6, #3
   b642e:	f7fe fa27 	bl	b4880 <malloc>
            if (!d) {
   b6432:	4604      	mov	r4, r0
   b6434:	b158      	cbz	r0, b644e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6436:	e9d5 1200 	ldrd	r1, r2, [r5]
   b643a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b643e:	f7ff ffc7 	bl	b63d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6442:	6828      	ldr	r0, [r5, #0]
   b6444:	f7fe fa24 	bl	b4890 <free>
        data_ = d;
   b6448:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b644a:	60ae      	str	r6, [r5, #8]
        return true;
   b644c:	2001      	movs	r0, #1
    }
   b644e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6450:	2400      	movs	r4, #0
   b6452:	e7f6      	b.n	b6442 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6454 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6454:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6456:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6458:	6845      	ldr	r5, [r0, #4]
   b645a:	4668      	mov	r0, sp
   b645c:	f7ff f891 	bl	b5582 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6460:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6464:	4299      	cmp	r1, r3
   b6466:	da10      	bge.n	b648a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6468:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b646a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b646c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6470:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6474:	4629      	mov	r1, r5
   b6476:	f105 0008 	add.w	r0, r5, #8
   b647a:	f7ff ffa9 	bl	b63d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b647e:	b98d      	cbnz	r5, b64a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6480:	6863      	ldr	r3, [r4, #4]
   b6482:	3301      	adds	r3, #1
   b6484:	6063      	str	r3, [r4, #4]
    return true;
   b6486:	2601      	movs	r6, #1
   b6488:	e006      	b.n	b6498 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b648a:	3101      	adds	r1, #1
   b648c:	4620      	mov	r0, r4
   b648e:	f7ff ffc9 	bl	b6424 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6492:	4606      	mov	r6, r0
   b6494:	2800      	cmp	r0, #0
   b6496:	d1e7      	bne.n	b6468 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6498:	a801      	add	r0, sp, #4
   b649a:	f7ff f886 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b649e:	4630      	mov	r0, r6
   b64a0:	b002      	add	sp, #8
   b64a2:	bd70      	pop	{r4, r5, r6, pc}
   b64a4:	4669      	mov	r1, sp
   b64a6:	4628      	mov	r0, r5
   b64a8:	f7ff f86b 	bl	b5582 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b64ac:	e7e8      	b.n	b6480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b64ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b64ae:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b64b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64b2:	4604      	mov	r4, r0
   b64b4:	460d      	mov	r5, r1
   b64b6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b64b8:	d914      	bls.n	b64e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b64ba:	4290      	cmp	r0, r2
   b64bc:	d213      	bcs.n	b64e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b64be:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b64c2:	1a75      	subs	r5, r6, r1
   b64c4:	f1a1 0708 	sub.w	r7, r1, #8
   b64c8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b64ca:	42b7      	cmp	r7, r6
   b64cc:	d018      	beq.n	b6500 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b64ce:	b11c      	cbz	r4, b64d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b64d0:	4631      	mov	r1, r6
   b64d2:	4620      	mov	r0, r4
   b64d4:	f7ff f847 	bl	b5566 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b64d8:	1d30      	adds	r0, r6, #4
   b64da:	f7ff f866 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b64de:	3e08      	subs	r6, #8
   b64e0:	3c08      	subs	r4, #8
   b64e2:	e7f2      	b.n	b64ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b64e4:	d00c      	beq.n	b6500 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b64e6:	42b5      	cmp	r5, r6
   b64e8:	d00a      	beq.n	b6500 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b64ea:	b11c      	cbz	r4, b64f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b64ec:	4629      	mov	r1, r5
   b64ee:	4620      	mov	r0, r4
   b64f0:	f7ff f839 	bl	b5566 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b64f4:	1d28      	adds	r0, r5, #4
   b64f6:	f7ff f858 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b64fa:	3508      	adds	r5, #8
   b64fc:	3408      	adds	r4, #8
   b64fe:	e7f2      	b.n	b64e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6502 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6502:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6504:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6506:	4605      	mov	r5, r0
        if (n > 0) {
   b6508:	dd11      	ble.n	b652e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b650a:	00f0      	lsls	r0, r6, #3
   b650c:	f7fe f9b8 	bl	b4880 <malloc>
            if (!d) {
   b6510:	4604      	mov	r4, r0
   b6512:	b158      	cbz	r0, b652c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6514:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6518:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b651c:	f7ff ffc7 	bl	b64ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6520:	6828      	ldr	r0, [r5, #0]
   b6522:	f7fe f9b5 	bl	b4890 <free>
        data_ = d;
   b6526:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6528:	60ae      	str	r6, [r5, #8]
        return true;
   b652a:	2001      	movs	r0, #1
    }
   b652c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b652e:	2400      	movs	r4, #0
   b6530:	e7f6      	b.n	b6520 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6532 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6532:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6534:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6536:	6845      	ldr	r5, [r0, #4]
   b6538:	4668      	mov	r0, sp
   b653a:	f7ff f814 	bl	b5566 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b653e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6542:	4299      	cmp	r1, r3
   b6544:	da10      	bge.n	b6568 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6546:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6548:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b654a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b654e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6552:	4629      	mov	r1, r5
   b6554:	f105 0008 	add.w	r0, r5, #8
   b6558:	f7ff ffa9 	bl	b64ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b655c:	b98d      	cbnz	r5, b6582 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b655e:	6863      	ldr	r3, [r4, #4]
   b6560:	3301      	adds	r3, #1
   b6562:	6063      	str	r3, [r4, #4]
    return true;
   b6564:	2601      	movs	r6, #1
   b6566:	e006      	b.n	b6576 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6568:	3101      	adds	r1, #1
   b656a:	4620      	mov	r0, r4
   b656c:	f7ff ffc9 	bl	b6502 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6570:	4606      	mov	r6, r0
   b6572:	2800      	cmp	r0, #0
   b6574:	d1e7      	bne.n	b6546 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6576:	a801      	add	r0, sp, #4
   b6578:	f7ff f817 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b657c:	4630      	mov	r0, r6
   b657e:	b002      	add	sp, #8
   b6580:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6582:	4669      	mov	r1, sp
   b6584:	4628      	mov	r0, r5
   b6586:	f7fe ffee 	bl	b5566 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b658a:	e7e8      	b.n	b655e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b658c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6590:	4617      	mov	r7, r2
   b6592:	b0a1      	sub	sp, #132	; 0x84
   b6594:	4680      	mov	r8, r0
    WiringBleLock lk;
   b6596:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6598:	460e      	mov	r6, r1
    WiringBleLock lk;
   b659a:	f7fe fbe5 	bl	b4d68 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b659e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b65a0:	7923      	ldrb	r3, [r4, #4]
   b65a2:	b953      	cbnz	r3, b65ba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b65a4:	4639      	mov	r1, r7
   b65a6:	4640      	mov	r0, r8
   b65a8:	f7fe ffdd 	bl	b5566 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b65ac:	a80a      	add	r0, sp, #40	; 0x28
   b65ae:	f7fe fbe9 	bl	b4d84 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b65b2:	4640      	mov	r0, r8
   b65b4:	b021      	add	sp, #132	; 0x84
   b65b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b65ba:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b65bc:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b65c0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b65c4:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b65c6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b65ca:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b65ce:	9b03      	ldr	r3, [sp, #12]
   b65d0:	429d      	cmp	r5, r3
   b65d2:	d021      	beq.n	b6618 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b65d4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b65d8:	4658      	mov	r0, fp
   b65da:	f109 0114 	add.w	r1, r9, #20
   b65de:	f7fe fc7e 	bl	b4ede <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b65e2:	b1b8      	cbz	r0, b6614 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b65e4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b65e8:	4650      	mov	r0, sl
   b65ea:	f7fe fc78 	bl	b4ede <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b65ee:	b188      	cbz	r0, b6614 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b65f0:	6823      	ldr	r3, [r4, #0]
   b65f2:	f8d9 2000 	ldr.w	r2, [r9]
   b65f6:	4053      	eors	r3, r2
   b65f8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b65fc:	d10a      	bne.n	b6614 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b65fe:	2220      	movs	r2, #32
   b6600:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b6604:	4a5e      	ldr	r2, [pc, #376]	; (b6780 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b6606:	9200      	str	r2, [sp, #0]
   b6608:	aa15      	add	r2, sp, #84	; 0x54
   b660a:	495e      	ldr	r1, [pc, #376]	; (b6784 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b660c:	2032      	movs	r0, #50	; 0x32
   b660e:	f7fe f89b 	bl	b4748 <log_message>
   b6612:	e7c7      	b.n	b65a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b6614:	3508      	adds	r5, #8
   b6616:	e7da      	b.n	b65ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b6618:	4650      	mov	r0, sl
   b661a:	f7fe fc31 	bl	b4e80 <_ZNK8particle7BleUuid7isValidEv>
   b661e:	b960      	cbnz	r0, b663a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b6620:	4959      	ldr	r1, [pc, #356]	; (b6788 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b6622:	2201      	movs	r2, #1
   b6624:	a815      	add	r0, sp, #84	; 0x54
   b6626:	ad15      	add	r5, sp, #84	; 0x54
   b6628:	f7fe fbf8 	bl	b4e1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b662c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b662e:	46d4      	mov	ip, sl
   b6630:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6634:	682b      	ldr	r3, [r5, #0]
   b6636:	f8cc 3000 	str.w	r3, [ip]
   b663a:	6833      	ldr	r3, [r6, #0]
   b663c:	e9d3 5300 	ldrd	r5, r3, [r3]
   b6640:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b6644:	455d      	cmp	r5, fp
   b6646:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b6648:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b664a:	d06e      	beq.n	b672a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b664c:	f855 0b08 	ldr.w	r0, [r5], #8
   b6650:	f7fe fc45 	bl	b4ede <_ZNK8particle7BleUuideqERKS0_>
   b6654:	2800      	cmp	r0, #0
   b6656:	d0f5      	beq.n	b6644 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b6658:	f104 0a14 	add.w	sl, r4, #20
   b665c:	4650      	mov	r0, sl
   b665e:	f7fe fc0f 	bl	b4e80 <_ZNK8particle7BleUuid7isValidEv>
   b6662:	b988      	cbnz	r0, b6688 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b6664:	4b49      	ldr	r3, [pc, #292]	; (b678c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6666:	4948      	ldr	r1, [pc, #288]	; (b6788 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b6668:	881a      	ldrh	r2, [r3, #0]
   b666a:	3201      	adds	r2, #1
   b666c:	b292      	uxth	r2, r2
   b666e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6670:	a815      	add	r0, sp, #84	; 0x54
   b6672:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b6674:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6676:	f7fe fbfa 	bl	b4e6e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b667a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b667c:	46d4      	mov	ip, sl
   b667e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6682:	682b      	ldr	r3, [r5, #0]
   b6684:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b6688:	4b41      	ldr	r3, [pc, #260]	; (b6790 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b668a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b668c:	2228      	movs	r2, #40	; 0x28
   b668e:	2100      	movs	r1, #0
   b6690:	a816      	add	r0, sp, #88	; 0x58
   b6692:	f000 fef1 	bl	b7478 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b6696:	4651      	mov	r1, sl
   b6698:	a804      	add	r0, sp, #16
   b669a:	f7fe fc03 	bl	b4ea4 <_ZN8particle7BleUuid7halUUIDEv>
   b669e:	ab04      	add	r3, sp, #16
   b66a0:	aa18      	add	r2, sp, #96	; 0x60
   b66a2:	f10d 0c20 	add.w	ip, sp, #32
   b66a6:	6818      	ldr	r0, [r3, #0]
   b66a8:	6859      	ldr	r1, [r3, #4]
   b66aa:	4615      	mov	r5, r2
   b66ac:	c503      	stmia	r5!, {r0, r1}
   b66ae:	3308      	adds	r3, #8
   b66b0:	4563      	cmp	r3, ip
   b66b2:	462a      	mov	r2, r5
   b66b4:	d1f7      	bne.n	b66a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b66b6:	6818      	ldr	r0, [r3, #0]
   b66b8:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b66ba:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b66bc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b66c0:	f8d9 3000 	ldr.w	r3, [r9]
   b66c4:	8a9b      	ldrh	r3, [r3, #20]
   b66c6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b66ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b66cc:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b66ce:	4b31      	ldr	r3, [pc, #196]	; (b6794 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b66d0:	2200      	movs	r2, #0
   b66d2:	1da1      	adds	r1, r4, #6
   b66d4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b66d6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b66da:	f7fd ff81 	bl	b45e0 <hal_ble_gatt_server_add_characteristic>
   b66de:	2800      	cmp	r0, #0
   b66e0:	f47f af60 	bne.w	b65a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b66e4:	2301      	movs	r3, #1
   b66e6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b66e8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b66ea:	4639      	mov	r1, r7
        return characteristics_;
   b66ec:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b66ee:	a80d      	add	r0, sp, #52	; 0x34
   b66f0:	f7fe ff39 	bl	b5566 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b66f4:	4620      	mov	r0, r4
   b66f6:	a90d      	add	r1, sp, #52	; 0x34
   b66f8:	f7ff ff1b 	bl	b6532 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b66fc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b66fe:	a80e      	add	r0, sp, #56	; 0x38
   b6700:	f7fe ff53 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6704:	2c00      	cmp	r4, #0
   b6706:	f47f af4d 	bne.w	b65a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b670a:	2320      	movs	r3, #32
   b670c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b6710:	4b21      	ldr	r3, [pc, #132]	; (b6798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b6712:	9300      	str	r3, [sp, #0]
   b6714:	aa0d      	add	r2, sp, #52	; 0x34
   b6716:	4623      	mov	r3, r4
   b6718:	e777      	b.n	b660a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b671a:	4639      	mov	r1, r7
   b671c:	4640      	mov	r0, r8
   b671e:	f7fe ff22 	bl	b5566 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6722:	a80c      	add	r0, sp, #48	; 0x30
   b6724:	f7fe ff41 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6728:	e740      	b.n	b65ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b672a:	a80b      	add	r0, sp, #44	; 0x2c
   b672c:	f7fe fcf0 	bl	b5110 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b6730:	4651      	mov	r1, sl
   b6732:	a815      	add	r0, sp, #84	; 0x54
   b6734:	f7fe fbb6 	bl	b4ea4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b6738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b673a:	2300      	movs	r3, #0
   b673c:	3214      	adds	r2, #20
   b673e:	a915      	add	r1, sp, #84	; 0x54
   b6740:	2001      	movs	r0, #1
   b6742:	f7fd ff43 	bl	b45cc <hal_ble_gatt_server_add_service>
   b6746:	2800      	cmp	r0, #0
   b6748:	d1e7      	bne.n	b671a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b674a:	6835      	ldr	r5, [r6, #0]
   b674c:	a90b      	add	r1, sp, #44	; 0x2c
   b674e:	a80d      	add	r0, sp, #52	; 0x34
   b6750:	f7fe ff17 	bl	b5582 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b6754:	4628      	mov	r0, r5
   b6756:	a90d      	add	r1, sp, #52	; 0x34
   b6758:	f7ff fe7c 	bl	b6454 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b675c:	4605      	mov	r5, r0
   b675e:	a80e      	add	r0, sp, #56	; 0x38
   b6760:	f7fe ff23 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6764:	2d00      	cmp	r5, #0
   b6766:	d0d8      	beq.n	b671a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b6768:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b676a:	6853      	ldr	r3, [r2, #4]
   b676c:	6812      	ldr	r2, [r2, #0]
   b676e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b6772:	3b01      	subs	r3, #1
   b6774:	a80c      	add	r0, sp, #48	; 0x30
   b6776:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b677a:	f7fe ff16 	bl	b55aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b677e:	e76b      	b.n	b6658 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b6780:	000b7861 	.word	0x000b7861
   b6784:	000b7763 	.word	0x000b7763
   b6788:	000b7926 	.word	0x000b7926
   b678c:	2003e6ec 	.word	0x2003e6ec
   b6790:	002c0003 	.word	0x002c0003
   b6794:	000b52a9 	.word	0x000b52a9
   b6798:	000b788c 	.word	0x000b788c

000b679c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b679c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b679e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67a0:	4604      	mov	r4, r0
   b67a2:	460d      	mov	r5, r1
   b67a4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b67a6:	d914      	bls.n	b67d2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b67a8:	4290      	cmp	r0, r2
   b67aa:	d213      	bcs.n	b67d4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b67ac:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b67b0:	1a75      	subs	r5, r6, r1
   b67b2:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b67b6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b67b8:	42b7      	cmp	r7, r6
   b67ba:	d018      	beq.n	b67ee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b67bc:	b11c      	cbz	r4, b67c6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b67be:	4631      	mov	r1, r6
   b67c0:	4620      	mov	r0, r4
   b67c2:	f7ff f94b 	bl	b5a5c <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b67c6:	4630      	mov	r0, r6
   b67c8:	f7fe fdc4 	bl	b5354 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b67cc:	3e24      	subs	r6, #36	; 0x24
   b67ce:	3c24      	subs	r4, #36	; 0x24
   b67d0:	e7f2      	b.n	b67b8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b67d2:	d00c      	beq.n	b67ee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b67d4:	42b5      	cmp	r5, r6
   b67d6:	d00a      	beq.n	b67ee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b67d8:	b11c      	cbz	r4, b67e2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b67da:	4629      	mov	r1, r5
   b67dc:	4620      	mov	r0, r4
   b67de:	f7ff f93d 	bl	b5a5c <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b67e2:	4628      	mov	r0, r5
   b67e4:	f7fe fdb6 	bl	b5354 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b67e8:	3524      	adds	r5, #36	; 0x24
   b67ea:	3424      	adds	r4, #36	; 0x24
   b67ec:	e7f2      	b.n	b67d4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b67ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b67f0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b67f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b67f2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b67f4:	4605      	mov	r5, r0
        if (n > 0) {
   b67f6:	dd13      	ble.n	b6820 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b67f8:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b67fa:	fb07 f006 	mul.w	r0, r7, r6
   b67fe:	f7fe f83f 	bl	b4880 <malloc>
            if (!d) {
   b6802:	4604      	mov	r4, r0
   b6804:	b158      	cbz	r0, b681e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b6806:	e9d5 1200 	ldrd	r1, r2, [r5]
   b680a:	fb07 1202 	mla	r2, r7, r2, r1
   b680e:	f7ff ffc5 	bl	b679c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6812:	6828      	ldr	r0, [r5, #0]
   b6814:	f7fe f83c 	bl	b4890 <free>
        data_ = d;
   b6818:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b681a:	60ae      	str	r6, [r5, #8]
        return true;
   b681c:	2001      	movs	r0, #1
    }
   b681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6820:	2400      	movs	r4, #0
   b6822:	e7f6      	b.n	b6812 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b6824 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b6824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6828:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b682a:	ad01      	add	r5, sp, #4
   b682c:	4606      	mov	r6, r0
   b682e:	4628      	mov	r0, r5
   b6830:	460c      	mov	r4, r1
   b6832:	f7fe fad9 	bl	b4de8 <_ZN8particle10BleAddressC1Ev>
   b6836:	a803      	add	r0, sp, #12
   b6838:	f7ff f9eb 	bl	b5c12 <_ZN8particle18BleAdvertisingDataC1Ev>
   b683c:	a806      	add	r0, sp, #24
   b683e:	f7ff f9e8 	bl	b5c12 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b6842:	6930      	ldr	r0, [r6, #16]
   b6844:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b6846:	89f2      	ldrh	r2, [r6, #14]
   b6848:	ab13      	add	r3, sp, #76	; 0x4c
   b684a:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b684c:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b6850:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b6852:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b6854:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b6858:	a806      	add	r0, sp, #24
   b685a:	f7ff f94e 	bl	b5afa <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b685e:	89b2      	ldrh	r2, [r6, #12]
   b6860:	6871      	ldr	r1, [r6, #4]
   b6862:	a803      	add	r0, sp, #12
   b6864:	f7ff f949 	bl	b5afa <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b6868:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b686c:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b686e:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b6870:	d003      	beq.n	b687a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b6872:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b6876:	429a      	cmp	r2, r3
   b6878:	db5c      	blt.n	b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b687a:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b687e:	2b7f      	cmp	r3, #127	; 0x7f
   b6880:	d003      	beq.n	b688a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b6882:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b6886:	429a      	cmp	r2, r3
   b6888:	dc54      	bgt.n	b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b688a:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b688e:	4638      	mov	r0, r7
   b6890:	f7fe ffab 	bl	b57ea <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b6894:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b6896:	2b00      	cmp	r3, #0
   b6898:	dd52      	ble.n	b6940 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b689a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b689c:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b68a0:	45b1      	cmp	r9, r6
   b68a2:	d050      	beq.n	b6946 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b68a4:	4630      	mov	r0, r6
   b68a6:	4629      	mov	r1, r5
   b68a8:	f7fe fa8a 	bl	b4dc0 <_ZNK8particle10BleAddresseqERKS0_>
   b68ac:	3608      	adds	r6, #8
   b68ae:	4680      	mov	r8, r0
   b68b0:	2800      	cmp	r0, #0
   b68b2:	d0f5      	beq.n	b68a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b68b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b68b6:	f7fd ffeb 	bl	b4890 <free>
        if (!delegator->filterByRssi(result) ||
   b68ba:	f1b8 0f00 	cmp.w	r8, #0
   b68be:	d039      	beq.n	b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b68c0:	4629      	mov	r1, r5
   b68c2:	4620      	mov	r0, r4
   b68c4:	f7fe ff54 	bl	b5770 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b68c8:	b3a0      	cbz	r0, b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b68ca:	4629      	mov	r1, r5
   b68cc:	4620      	mov	r0, r4
   b68ce:	f7ff fc8d 	bl	b61ec <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b68d2:	4606      	mov	r6, r0
   b68d4:	b370      	cbz	r0, b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b68d6:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b68da:	4638      	mov	r0, r7
   b68dc:	f7fe ffd0 	bl	b5880 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b68e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b68e2:	2b00      	cmp	r3, #0
   b68e4:	dd12      	ble.n	b690c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b68e6:	a806      	add	r0, sp, #24
   b68e8:	f7fe fbd4 	bl	b5094 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b68ec:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b68ee:	a803      	add	r0, sp, #12
   b68f0:	f7fe fbd0 	bl	b5094 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b68f4:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b68f8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b68fc:	429a      	cmp	r2, r3
   b68fe:	d025      	beq.n	b694c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b6900:	f833 1b02 	ldrh.w	r1, [r3], #2
   b6904:	4588      	cmp	r8, r1
   b6906:	d001      	beq.n	b690c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b6908:	4288      	cmp	r0, r1
   b690a:	d1f7      	bne.n	b68fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b690c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b690e:	f7fd ffbf 	bl	b4890 <free>
              !delegator->filterByServiceUUID(result) ||
   b6912:	b17e      	cbz	r6, b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b6914:	4629      	mov	r1, r5
   b6916:	4620      	mov	r0, r4
   b6918:	f7fe ffe8 	bl	b58ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b691c:	b150      	cbz	r0, b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b691e:	6a23      	ldr	r3, [r4, #32]
   b6920:	b1b3      	cbz	r3, b6950 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b6922:	6963      	ldr	r3, [r4, #20]
   b6924:	9513      	str	r5, [sp, #76]	; 0x4c
   b6926:	3301      	adds	r3, #1
   b6928:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b692a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b692c:	4639      	mov	r1, r7
   b692e:	f104 0018 	add.w	r0, r4, #24
   b6932:	4798      	blx	r3
            return;
   b6934:	4628      	mov	r0, r5
   b6936:	f7fe fd0d 	bl	b5354 <_ZN8particle13BleScanResultD1Ev>
    }
   b693a:	b01d      	add	sp, #116	; 0x74
   b693c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b6940:	f04f 0801 	mov.w	r8, #1
   b6944:	e7b6      	b.n	b68b4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b6946:	f04f 0800 	mov.w	r8, #0
   b694a:	e7b3      	b.n	b68b4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b694c:	2600      	movs	r6, #0
   b694e:	e7dd      	b.n	b690c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b6950:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b6954:	f1b8 0f00 	cmp.w	r8, #0
   b6958:	d007      	beq.n	b696a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b695a:	6963      	ldr	r3, [r4, #20]
   b695c:	3301      	adds	r3, #1
   b695e:	6163      	str	r3, [r4, #20]
   b6960:	4629      	mov	r1, r5
   b6962:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b6964:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6968:	e7e3      	b.n	b6932 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b696a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b696e:	f1bc 0f00 	cmp.w	ip, #0
   b6972:	d025      	beq.n	b69c0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b6974:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b6976:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b6978:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b697a:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b697c:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b697e:	d8d9      	bhi.n	b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b6980:	2224      	movs	r2, #36	; 0x24
   b6982:	4353      	muls	r3, r2
    address_ = addr.address_;
   b6984:	462a      	mov	r2, r5
   b6986:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b6988:	3b24      	subs	r3, #36	; 0x24
   b698a:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b698e:	f84c 0003 	str.w	r0, [ip, r3]
   b6992:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b6994:	f106 0008 	add.w	r0, r6, #8
   b6998:	a903      	add	r1, sp, #12
   b699a:	f7ff f876 	bl	b5a8a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b699e:	a906      	add	r1, sp, #24
   b69a0:	f106 0014 	add.w	r0, r6, #20
   b69a4:	f7ff f871 	bl	b5a8a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b69a8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b69ac:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b69b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b69b4:	429a      	cmp	r2, r3
   b69b6:	d3bd      	bcc.n	b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b69b8:	4640      	mov	r0, r8
   b69ba:	f7fd fdf3 	bl	b45a4 <hal_ble_gap_stop_scan>
   b69be:	e7b9      	b.n	b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b69c0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b69c4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b69c8:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b69cc:	a903      	add	r1, sp, #12
   b69ce:	a80c      	add	r0, sp, #48	; 0x30
   b69d0:	f7ff f827 	bl	b5a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b69d4:	a906      	add	r1, sp, #24
   b69d6:	a80f      	add	r0, sp, #60	; 0x3c
   b69d8:	f7ff f823 	bl	b5a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b69dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b69e0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b69e4:	4641      	mov	r1, r8
   b69e6:	4638      	mov	r0, r7
   b69e8:	6866      	ldr	r6, [r4, #4]
   b69ea:	f7ff f837 	bl	b5a5c <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b69ee:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b69f2:	4299      	cmp	r1, r3
   b69f4:	da10      	bge.n	b6a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b69f6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b69f8:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b69fa:	2224      	movs	r2, #36	; 0x24
   b69fc:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b6a00:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b6a04:	fb02 3201 	mla	r2, r2, r1, r3
   b6a08:	4631      	mov	r1, r6
   b6a0a:	f7ff fec7 	bl	b679c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6a0e:	b986      	cbnz	r6, b6a32 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b6a10:	6863      	ldr	r3, [r4, #4]
   b6a12:	3301      	adds	r3, #1
   b6a14:	6063      	str	r3, [r4, #4]
    return true;
   b6a16:	e005      	b.n	b6a24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6a18:	3101      	adds	r1, #1
   b6a1a:	4620      	mov	r0, r4
   b6a1c:	f7ff fee8 	bl	b67f0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6a20:	2800      	cmp	r0, #0
   b6a22:	d1e8      	bne.n	b69f6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b6a24:	4638      	mov	r0, r7
   b6a26:	f7fe fc95 	bl	b5354 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b6a2a:	4640      	mov	r0, r8
   b6a2c:	f7fe fc92 	bl	b5354 <_ZN8particle13BleScanResultD1Ev>
   b6a30:	e780      	b.n	b6934 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b6a32:	4639      	mov	r1, r7
   b6a34:	4630      	mov	r0, r6
   b6a36:	f7ff f811 	bl	b5a5c <_ZN8particle13BleScanResultC1EOS0_>
   b6a3a:	e7e9      	b.n	b6a10 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b6a3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b6a3c:	4802      	ldr	r0, [pc, #8]	; (b6a48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6a3e:	2300      	movs	r3, #0
   b6a40:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6a42:	f7fd bde1 	b.w	b4608 <os_mutex_recursive_create>
   b6a46:	bf00      	nop
   b6a48:	2003e6f0 	.word	0x2003e6f0

000b6a4c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a4e:	4606      	mov	r6, r0
   b6a50:	460d      	mov	r5, r1
  size_t n = 0;
   b6a52:	188f      	adds	r7, r1, r2
   b6a54:	2400      	movs	r4, #0
  while (size--) {
   b6a56:	42bd      	cmp	r5, r7
   b6a58:	d00c      	beq.n	b6a74 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6a5a:	6833      	ldr	r3, [r6, #0]
   b6a5c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6a60:	689b      	ldr	r3, [r3, #8]
   b6a62:	4630      	mov	r0, r6
   b6a64:	4798      	blx	r3
     if (chunk>=0)
   b6a66:	1e03      	subs	r3, r0, #0
   b6a68:	db01      	blt.n	b6a6e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6a6a:	441c      	add	r4, r3
  while (size--) {
   b6a6c:	e7f3      	b.n	b6a56 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6a6e:	2c00      	cmp	r4, #0
   b6a70:	bf08      	it	eq
   b6a72:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6a74:	4620      	mov	r0, r4
   b6a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a78 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6a78:	b513      	push	{r0, r1, r4, lr}
   b6a7a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6a7c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6a7e:	b159      	cbz	r1, b6a98 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6a80:	9101      	str	r1, [sp, #4]
   b6a82:	f000 fd41 	bl	b7508 <strlen>
   b6a86:	6823      	ldr	r3, [r4, #0]
   b6a88:	9901      	ldr	r1, [sp, #4]
   b6a8a:	68db      	ldr	r3, [r3, #12]
   b6a8c:	4602      	mov	r2, r0
   b6a8e:	4620      	mov	r0, r4
    }
   b6a90:	b002      	add	sp, #8
   b6a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6a96:	4718      	bx	r3
    }
   b6a98:	b002      	add	sp, #8
   b6a9a:	bd10      	pop	{r4, pc}

000b6a9c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6a9c:	6803      	ldr	r3, [r0, #0]
   b6a9e:	689b      	ldr	r3, [r3, #8]
   b6aa0:	4718      	bx	r3

000b6aa2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6aa2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6aa4:	210d      	movs	r1, #13
{
   b6aa6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6aa8:	f7ff fff8 	bl	b6a9c <_ZN5Print5printEc>
  n += print('\n');
   b6aac:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6aae:	4604      	mov	r4, r0
  n += print('\n');
   b6ab0:	4628      	mov	r0, r5
   b6ab2:	f7ff fff3 	bl	b6a9c <_ZN5Print5printEc>
  return n;
}
   b6ab6:	4420      	add	r0, r4
   b6ab8:	bd38      	pop	{r3, r4, r5, pc}

000b6aba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6aba:	b530      	push	{r4, r5, lr}
   b6abc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6abe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6ac0:	2a01      	cmp	r2, #1
  *str = '\0';
   b6ac2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6ac6:	bf98      	it	ls
   b6ac8:	220a      	movls	r2, #10
   b6aca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6acc:	460d      	mov	r5, r1
   b6ace:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6ad2:	fb01 5312 	mls	r3, r1, r2, r5
   b6ad6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6ada:	2b09      	cmp	r3, #9
   b6adc:	bf94      	ite	ls
   b6ade:	3330      	addls	r3, #48	; 0x30
   b6ae0:	3337      	addhi	r3, #55	; 0x37
   b6ae2:	b2db      	uxtb	r3, r3
  } while(n);
   b6ae4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6ae6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6aea:	d9ef      	bls.n	b6acc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6aec:	4621      	mov	r1, r4
   b6aee:	f7ff ffc3 	bl	b6a78 <_ZN5Print5writeEPKc>
}
   b6af2:	b00b      	add	sp, #44	; 0x2c
   b6af4:	bd30      	pop	{r4, r5, pc}

000b6af6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6afa:	b086      	sub	sp, #24
   b6afc:	af00      	add	r7, sp, #0
   b6afe:	4605      	mov	r5, r0
   b6b00:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b02:	1d38      	adds	r0, r7, #4
   b6b04:	2114      	movs	r1, #20
{
   b6b06:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6b08:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b0a:	f7fd fed1 	bl	b48b0 <vsnprintf>

    if (n<bufsize)
   b6b0e:	2813      	cmp	r0, #19
   b6b10:	d80e      	bhi.n	b6b30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6b12:	1d39      	adds	r1, r7, #4
   b6b14:	4628      	mov	r0, r5
   b6b16:	f7ff ffaf 	bl	b6a78 <_ZN5Print5writeEPKc>
   b6b1a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6b1c:	b11e      	cbz	r6, b6b26 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6b1e:	4628      	mov	r0, r5
   b6b20:	f7ff ffbf 	bl	b6aa2 <_ZN5Print7printlnEv>
   b6b24:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6b26:	4620      	mov	r0, r4
   b6b28:	3718      	adds	r7, #24
   b6b2a:	46bd      	mov	sp, r7
   b6b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6b30:	f100 0308 	add.w	r3, r0, #8
   b6b34:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6b38:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6b3a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6b3e:	4622      	mov	r2, r4
   b6b40:	1c41      	adds	r1, r0, #1
   b6b42:	683b      	ldr	r3, [r7, #0]
   b6b44:	4668      	mov	r0, sp
   b6b46:	f7fd feb3 	bl	b48b0 <vsnprintf>
  return write(str);
   b6b4a:	4669      	mov	r1, sp
   b6b4c:	4628      	mov	r0, r5
   b6b4e:	f7ff ff93 	bl	b6a78 <_ZN5Print5writeEPKc>
   b6b52:	4604      	mov	r4, r0
   b6b54:	46c5      	mov	sp, r8
   b6b56:	e7e1      	b.n	b6b1c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6b58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6b58:	4b01      	ldr	r3, [pc, #4]	; (b6b60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6b5a:	4a02      	ldr	r2, [pc, #8]	; (b6b64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6b5c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6b5e:	4770      	bx	lr
   b6b60:	2003e6f8 	.word	0x2003e6f8
   b6b64:	000b7946 	.word	0x000b7946

000b6b68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6b68:	4b02      	ldr	r3, [pc, #8]	; (b6b74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6b6a:	681a      	ldr	r2, [r3, #0]
   b6b6c:	4b02      	ldr	r3, [pc, #8]	; (b6b78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6b6e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6b70:	4770      	bx	lr
   b6b72:	bf00      	nop
   b6b74:	2003df24 	.word	0x2003df24
   b6b78:	2003e6fc 	.word	0x2003e6fc

000b6b7c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6b7c:	2100      	movs	r1, #0
   b6b7e:	f7fd bdf3 	b.w	b4768 <system_delay_ms>
	...

000b6b84 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6b84:	4b01      	ldr	r3, [pc, #4]	; (b6b8c <_GLOBAL__sub_I_RGB+0x8>)
   b6b86:	2200      	movs	r2, #0
   b6b88:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6b8a:	4770      	bx	lr
   b6b8c:	2003e700 	.word	0x2003e700

000b6b90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6b90:	4b01      	ldr	r3, [pc, #4]	; (b6b98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6b92:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6b94:	4770      	bx	lr
   b6b96:	bf00      	nop
   b6b98:	2003df28 	.word	0x2003df28

000b6b9c <serialEventRun>:
{
   b6b9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6b9e:	4b0b      	ldr	r3, [pc, #44]	; (b6bcc <serialEventRun+0x30>)
   b6ba0:	b143      	cbz	r3, b6bb4 <serialEventRun+0x18>
   b6ba2:	f000 f96b 	bl	b6e7c <_Z16_fetch_usbserialv>
   b6ba6:	6803      	ldr	r3, [r0, #0]
   b6ba8:	691b      	ldr	r3, [r3, #16]
   b6baa:	4798      	blx	r3
   b6bac:	2800      	cmp	r0, #0
   b6bae:	dd01      	ble.n	b6bb4 <serialEventRun+0x18>
        serialEvent();
   b6bb0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6bb4:	4b06      	ldr	r3, [pc, #24]	; (b6bd0 <serialEventRun+0x34>)
   b6bb6:	b143      	cbz	r3, b6bca <serialEventRun+0x2e>
   b6bb8:	f000 fae4 	bl	b7184 <_Z22__fetch_global_Serial1v>
   b6bbc:	6803      	ldr	r3, [r0, #0]
   b6bbe:	691b      	ldr	r3, [r3, #16]
   b6bc0:	4798      	blx	r3
   b6bc2:	2800      	cmp	r0, #0
   b6bc4:	dd01      	ble.n	b6bca <serialEventRun+0x2e>
        serialEvent1();
   b6bc6:	f3af 8000 	nop.w
}
   b6bca:	bd08      	pop	{r3, pc}
	...

000b6bd4 <_post_loop>:
{
   b6bd4:	b508      	push	{r3, lr}
	serialEventRun();
   b6bd6:	f7ff ffe1 	bl	b6b9c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6bda:	f7fd fc9b 	bl	b4514 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6bde:	4b01      	ldr	r3, [pc, #4]	; (b6be4 <_post_loop+0x10>)
   b6be0:	6018      	str	r0, [r3, #0]
}
   b6be2:	bd08      	pop	{r3, pc}
   b6be4:	2003e758 	.word	0x2003e758

000b6be8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6be8:	4805      	ldr	r0, [pc, #20]	; (b6c00 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6bea:	4a06      	ldr	r2, [pc, #24]	; (b6c04 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6bec:	4906      	ldr	r1, [pc, #24]	; (b6c08 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6bee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6bf0:	1a12      	subs	r2, r2, r0
   b6bf2:	f000 fc19 	bl	b7428 <memcpy>
    __backup_sram_signature = signature;
   b6bf6:	4b05      	ldr	r3, [pc, #20]	; (b6c0c <_Z33system_initialize_user_backup_ramv+0x24>)
   b6bf8:	4a05      	ldr	r2, [pc, #20]	; (b6c10 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6bfa:	601a      	str	r2, [r3, #0]
}
   b6bfc:	bd08      	pop	{r3, pc}
   b6bfe:	bf00      	nop
   b6c00:	2003f400 	.word	0x2003f400
   b6c04:	2003f404 	.word	0x2003f404
   b6c08:	000b7c34 	.word	0x000b7c34
   b6c0c:	2003f400 	.word	0x2003f400
   b6c10:	9a271c1e 	.word	0x9a271c1e

000b6c14 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6c14:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6c16:	2300      	movs	r3, #0
   b6c18:	9300      	str	r3, [sp, #0]
   b6c1a:	461a      	mov	r2, r3
   b6c1c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6c20:	f7fd fdb4 	bl	b478c <system_ctrl_set_result>
}
   b6c24:	b003      	add	sp, #12
   b6c26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6c2c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6c2c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6c2e:	8843      	ldrh	r3, [r0, #2]
   b6c30:	2b0a      	cmp	r3, #10
   b6c32:	d008      	beq.n	b6c46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6c34:	2b50      	cmp	r3, #80	; 0x50
   b6c36:	d10b      	bne.n	b6c50 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6c38:	4b09      	ldr	r3, [pc, #36]	; (b6c60 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6c3a:	681b      	ldr	r3, [r3, #0]
   b6c3c:	b14b      	cbz	r3, b6c52 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6c3e:	b003      	add	sp, #12
   b6c40:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6c44:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6c46:	f7ff ffe5 	bl	b6c14 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6c4a:	b003      	add	sp, #12
   b6c4c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6c50:	2300      	movs	r3, #0
   b6c52:	9300      	str	r3, [sp, #0]
   b6c54:	461a      	mov	r2, r3
   b6c56:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6c5a:	f7fd fd97 	bl	b478c <system_ctrl_set_result>
}
   b6c5e:	e7f4      	b.n	b6c4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6c60:	2003e714 	.word	0x2003e714

000b6c64 <module_user_init_hook>:
{
   b6c64:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6c66:	4812      	ldr	r0, [pc, #72]	; (b6cb0 <module_user_init_hook+0x4c>)
   b6c68:	2100      	movs	r1, #0
   b6c6a:	f7fd fe39 	bl	b48e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6c6e:	4b11      	ldr	r3, [pc, #68]	; (b6cb4 <module_user_init_hook+0x50>)
   b6c70:	681a      	ldr	r2, [r3, #0]
   b6c72:	4b11      	ldr	r3, [pc, #68]	; (b6cb8 <module_user_init_hook+0x54>)
   b6c74:	429a      	cmp	r2, r3
   b6c76:	4b11      	ldr	r3, [pc, #68]	; (b6cbc <module_user_init_hook+0x58>)
   b6c78:	bf0c      	ite	eq
   b6c7a:	2201      	moveq	r2, #1
   b6c7c:	2200      	movne	r2, #0
   b6c7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6c80:	d001      	beq.n	b6c86 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6c82:	f7ff ffb1 	bl	b6be8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6c86:	f7fd fc35 	bl	b44f4 <HAL_RNG_GetRandomNumber>
   b6c8a:	4604      	mov	r4, r0
    srand(seed);
   b6c8c:	f000 fbfc 	bl	b7488 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6c90:	4b0b      	ldr	r3, [pc, #44]	; (b6cc0 <module_user_init_hook+0x5c>)
   b6c92:	b113      	cbz	r3, b6c9a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6c94:	4620      	mov	r0, r4
   b6c96:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6c9a:	2100      	movs	r1, #0
   b6c9c:	4808      	ldr	r0, [pc, #32]	; (b6cc0 <module_user_init_hook+0x5c>)
   b6c9e:	f7fd fde7 	bl	b4870 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6ca6:	4807      	ldr	r0, [pc, #28]	; (b6cc4 <module_user_init_hook+0x60>)
   b6ca8:	2100      	movs	r1, #0
   b6caa:	f7fd bd65 	b.w	b4778 <system_ctrl_set_app_request_handler>
   b6cae:	bf00      	nop
   b6cb0:	000b6b91 	.word	0x000b6b91
   b6cb4:	2003f400 	.word	0x2003f400
   b6cb8:	9a271c1e 	.word	0x9a271c1e
   b6cbc:	2003e710 	.word	0x2003e710
   b6cc0:	00000000 	.word	0x00000000
   b6cc4:	000b6c2d 	.word	0x000b6c2d

000b6cc8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6cc8:	4770      	bx	lr

000b6cca <_ZN9IPAddressD0Ev>:
   b6cca:	b510      	push	{r4, lr}
   b6ccc:	2118      	movs	r1, #24
   b6cce:	4604      	mov	r4, r0
   b6cd0:	f7fd f9e3 	bl	b409a <_ZdlPvj>
   b6cd4:	4620      	mov	r0, r4
   b6cd6:	bd10      	pop	{r4, pc}

000b6cd8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6cda:	7d03      	ldrb	r3, [r0, #20]
   b6cdc:	2b06      	cmp	r3, #6
{
   b6cde:	b08d      	sub	sp, #52	; 0x34
   b6ce0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6ce2:	f100 0704 	add.w	r7, r0, #4
   b6ce6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6cea:	d012      	beq.n	b6d12 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6cec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6cf4:	220a      	movs	r2, #10
   b6cf6:	4630      	mov	r0, r6
   b6cf8:	f7ff fedf 	bl	b6aba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6cfc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6cfe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6d00:	d019      	beq.n	b6d36 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6d02:	2c00      	cmp	r4, #0
   b6d04:	d0f4      	beq.n	b6cf0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6d06:	212e      	movs	r1, #46	; 0x2e
   b6d08:	4630      	mov	r0, r6
   b6d0a:	f7ff fec7 	bl	b6a9c <_ZN5Print5printEc>
   b6d0e:	4404      	add	r4, r0
   b6d10:	e7ee      	b.n	b6cf0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d12:	232f      	movs	r3, #47	; 0x2f
   b6d14:	466a      	mov	r2, sp
   b6d16:	4639      	mov	r1, r7
   b6d18:	200a      	movs	r0, #10
		buf[0] = 0;
   b6d1a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d1e:	f7fd fc8b 	bl	b4638 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6d22:	4668      	mov	r0, sp
   b6d24:	f000 fbf0 	bl	b7508 <strlen>
   b6d28:	6833      	ldr	r3, [r6, #0]
   b6d2a:	4602      	mov	r2, r0
   b6d2c:	68db      	ldr	r3, [r3, #12]
   b6d2e:	4669      	mov	r1, sp
   b6d30:	4630      	mov	r0, r6
   b6d32:	4798      	blx	r3
   b6d34:	4604      	mov	r4, r0
    }
    return n;
}
   b6d36:	4620      	mov	r0, r4
   b6d38:	b00d      	add	sp, #52	; 0x34
   b6d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d3c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6d3c:	b510      	push	{r4, lr}
   b6d3e:	4b05      	ldr	r3, [pc, #20]	; (b6d54 <_ZN9IPAddressC1Ev+0x18>)
   b6d40:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6d42:	2211      	movs	r2, #17
   b6d44:	f840 3b04 	str.w	r3, [r0], #4
   b6d48:	2100      	movs	r1, #0
   b6d4a:	f000 fb95 	bl	b7478 <memset>
}
   b6d4e:	4620      	mov	r0, r4
   b6d50:	bd10      	pop	{r4, pc}
   b6d52:	bf00      	nop
   b6d54:	000b7970 	.word	0x000b7970

000b6d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6d58:	4603      	mov	r3, r0
   b6d5a:	4a07      	ldr	r2, [pc, #28]	; (b6d78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6d5c:	b510      	push	{r4, lr}
   b6d5e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6d62:	f101 0210 	add.w	r2, r1, #16
   b6d66:	f851 4b04 	ldr.w	r4, [r1], #4
   b6d6a:	f843 4b04 	str.w	r4, [r3], #4
   b6d6e:	4291      	cmp	r1, r2
   b6d70:	d1f9      	bne.n	b6d66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6d72:	780a      	ldrb	r2, [r1, #0]
   b6d74:	701a      	strb	r2, [r3, #0]
}
   b6d76:	bd10      	pop	{r4, pc}
   b6d78:	000b7970 	.word	0x000b7970

000b6d7c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6d7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6d7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6d82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6d86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6d8a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6d8e:	2304      	movs	r3, #4
   b6d90:	6041      	str	r1, [r0, #4]
   b6d92:	7503      	strb	r3, [r0, #20]
}
   b6d94:	bd10      	pop	{r4, pc}
	...

000b6d98 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6d98:	b507      	push	{r0, r1, r2, lr}
   b6d9a:	4b06      	ldr	r3, [pc, #24]	; (b6db4 <_ZN9IPAddressC1EPKh+0x1c>)
   b6d9c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6d9e:	78cb      	ldrb	r3, [r1, #3]
   b6da0:	9300      	str	r3, [sp, #0]
   b6da2:	788b      	ldrb	r3, [r1, #2]
   b6da4:	784a      	ldrb	r2, [r1, #1]
   b6da6:	7809      	ldrb	r1, [r1, #0]
   b6da8:	f7ff ffe8 	bl	b6d7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6dac:	b003      	add	sp, #12
   b6dae:	f85d fb04 	ldr.w	pc, [sp], #4
   b6db2:	bf00      	nop
   b6db4:	000b7970 	.word	0x000b7970

000b6db8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6db8:	7441      	strb	r1, [r0, #17]
}
   b6dba:	4770      	bx	lr

000b6dbc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6dbc:	4770      	bx	lr

000b6dbe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6dbe:	4770      	bx	lr

000b6dc0 <_ZN9USBSerial4readEv>:
{
   b6dc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6dc2:	2100      	movs	r1, #0
   b6dc4:	7c00      	ldrb	r0, [r0, #16]
   b6dc6:	f7fd fc97 	bl	b46f8 <HAL_USB_USART_Receive_Data>
}
   b6dca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6dce:	bd08      	pop	{r3, pc}

000b6dd0 <_ZN9USBSerial4peekEv>:
{
   b6dd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6dd2:	2101      	movs	r1, #1
   b6dd4:	7c00      	ldrb	r0, [r0, #16]
   b6dd6:	f7fd fc8f 	bl	b46f8 <HAL_USB_USART_Receive_Data>
}
   b6dda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6dde:	bd08      	pop	{r3, pc}

000b6de0 <_ZN9USBSerial17availableForWriteEv>:
{
   b6de0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6de2:	7c00      	ldrb	r0, [r0, #16]
   b6de4:	f7fd fc80 	bl	b46e8 <HAL_USB_USART_Available_Data_For_Write>
}
   b6de8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6dec:	bd08      	pop	{r3, pc}

000b6dee <_ZN9USBSerial9availableEv>:
{
   b6dee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6df0:	7c00      	ldrb	r0, [r0, #16]
   b6df2:	f7fd fc71 	bl	b46d8 <HAL_USB_USART_Available_Data>
}
   b6df6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6dfa:	bd08      	pop	{r3, pc}

000b6dfc <_ZN9USBSerial5writeEh>:
{
   b6dfc:	b513      	push	{r0, r1, r4, lr}
   b6dfe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e00:	7c00      	ldrb	r0, [r0, #16]
{
   b6e02:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e04:	f7fd fc70 	bl	b46e8 <HAL_USB_USART_Available_Data_For_Write>
   b6e08:	2800      	cmp	r0, #0
   b6e0a:	9901      	ldr	r1, [sp, #4]
   b6e0c:	dc01      	bgt.n	b6e12 <_ZN9USBSerial5writeEh+0x16>
   b6e0e:	7c60      	ldrb	r0, [r4, #17]
   b6e10:	b120      	cbz	r0, b6e1c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6e12:	7c20      	ldrb	r0, [r4, #16]
   b6e14:	f7fd fc78 	bl	b4708 <HAL_USB_USART_Send_Data>
   b6e18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6e1c:	b002      	add	sp, #8
   b6e1e:	bd10      	pop	{r4, pc}

000b6e20 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6e20:	7c00      	ldrb	r0, [r0, #16]
   b6e22:	f7fd bc79 	b.w	b4718 <HAL_USB_USART_Flush_Data>

000b6e26 <_ZN9USBSerialD0Ev>:
   b6e26:	b510      	push	{r4, lr}
   b6e28:	2114      	movs	r1, #20
   b6e2a:	4604      	mov	r4, r0
   b6e2c:	f7fd f935 	bl	b409a <_ZdlPvj>
   b6e30:	4620      	mov	r0, r4
   b6e32:	bd10      	pop	{r4, pc}

000b6e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6e34:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e3a:	4604      	mov	r4, r0
   b6e3c:	4608      	mov	r0, r1
   b6e3e:	2100      	movs	r1, #0
   b6e40:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6e44:	4b04      	ldr	r3, [pc, #16]	; (b6e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6e46:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6e48:	2301      	movs	r3, #1
  _serial = serial;
   b6e4a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6e4c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6e4e:	4611      	mov	r1, r2
   b6e50:	f7fd fc32 	bl	b46b8 <HAL_USB_USART_Init>
}
   b6e54:	4620      	mov	r0, r4
   b6e56:	bd10      	pop	{r4, pc}
   b6e58:	000b7984 	.word	0x000b7984

000b6e5c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6e5c:	7c00      	ldrb	r0, [r0, #16]
   b6e5e:	2200      	movs	r2, #0
   b6e60:	f7fd bc32 	b.w	b46c8 <HAL_USB_USART_Begin>

000b6e64 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6e64:	7c00      	ldrb	r0, [r0, #16]
   b6e66:	f7fd bc5f 	b.w	b4728 <HAL_USB_USART_Is_Connected>

000b6e6a <_Z19acquireSerialBufferv>:
{
   b6e6a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6e6c:	2214      	movs	r2, #20
{
   b6e6e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6e70:	2100      	movs	r1, #0
   b6e72:	f000 fb01 	bl	b7478 <memset>
}
   b6e76:	4620      	mov	r0, r4
   b6e78:	bd10      	pop	{r4, pc}
	...

000b6e7c <_Z16_fetch_usbserialv>:
{
   b6e7c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6e7e:	4c0f      	ldr	r4, [pc, #60]	; (b6ebc <_Z16_fetch_usbserialv+0x40>)
{
   b6e80:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6e82:	a803      	add	r0, sp, #12
   b6e84:	f7ff fff1 	bl	b6e6a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6e88:	7821      	ldrb	r1, [r4, #0]
   b6e8a:	f3bf 8f5b 	dmb	ish
   b6e8e:	f011 0101 	ands.w	r1, r1, #1
   b6e92:	d10f      	bne.n	b6eb4 <_Z16_fetch_usbserialv+0x38>
   b6e94:	4620      	mov	r0, r4
   b6e96:	9101      	str	r1, [sp, #4]
   b6e98:	f7fd f901 	bl	b409e <__cxa_guard_acquire>
   b6e9c:	9901      	ldr	r1, [sp, #4]
   b6e9e:	b148      	cbz	r0, b6eb4 <_Z16_fetch_usbserialv+0x38>
   b6ea0:	aa03      	add	r2, sp, #12
   b6ea2:	4807      	ldr	r0, [pc, #28]	; (b6ec0 <_Z16_fetch_usbserialv+0x44>)
   b6ea4:	f7ff ffc6 	bl	b6e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6ea8:	4620      	mov	r0, r4
   b6eaa:	f7fd f8fd 	bl	b40a8 <__cxa_guard_release>
   b6eae:	4805      	ldr	r0, [pc, #20]	; (b6ec4 <_Z16_fetch_usbserialv+0x48>)
   b6eb0:	f000 faa4 	bl	b73fc <atexit>
	return _usbserial;
}
   b6eb4:	4802      	ldr	r0, [pc, #8]	; (b6ec0 <_Z16_fetch_usbserialv+0x44>)
   b6eb6:	b008      	add	sp, #32
   b6eb8:	bd10      	pop	{r4, pc}
   b6eba:	bf00      	nop
   b6ebc:	2003e718 	.word	0x2003e718
   b6ec0:	2003e71c 	.word	0x2003e71c
   b6ec4:	000b6dbd 	.word	0x000b6dbd

000b6ec8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6ec8:	4770      	bx	lr

000b6eca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6eca:	7441      	strb	r1, [r0, #17]
}
   b6ecc:	4770      	bx	lr

000b6ece <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6ece:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6ed0:	7c00      	ldrb	r0, [r0, #16]
   b6ed2:	f7fd fbe1 	bl	b4698 <hal_usart_available_data_for_write>
}
   b6ed6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6eda:	bd08      	pop	{r3, pc}

000b6edc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6edc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6ede:	7c00      	ldrb	r0, [r0, #16]
   b6ee0:	f7fd fbba 	bl	b4658 <hal_usart_available>
}
   b6ee4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ee8:	bd08      	pop	{r3, pc}

000b6eea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6eea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6eec:	7c00      	ldrb	r0, [r0, #16]
   b6eee:	f7fd fbc3 	bl	b4678 <hal_usart_peek>
}
   b6ef2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ef6:	bd08      	pop	{r3, pc}

000b6ef8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6ef8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6efa:	7c00      	ldrb	r0, [r0, #16]
   b6efc:	f7fd fbb4 	bl	b4668 <hal_usart_read>
}
   b6f00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f04:	bd08      	pop	{r3, pc}

000b6f06 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6f06:	7c00      	ldrb	r0, [r0, #16]
   b6f08:	f7fd bbbe 	b.w	b4688 <hal_usart_flush>

000b6f0c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f0e:	7c45      	ldrb	r5, [r0, #17]
{
   b6f10:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f12:	b12d      	cbz	r5, b6f20 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6f14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6f16:	b003      	add	sp, #12
   b6f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6f1c:	f7fd bb94 	b.w	b4648 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f20:	7c00      	ldrb	r0, [r0, #16]
   b6f22:	9101      	str	r1, [sp, #4]
   b6f24:	f7fd fbb8 	bl	b4698 <hal_usart_available_data_for_write>
   b6f28:	2800      	cmp	r0, #0
   b6f2a:	9901      	ldr	r1, [sp, #4]
   b6f2c:	dcf2      	bgt.n	b6f14 <_ZN11USARTSerial5writeEh+0x8>
}
   b6f2e:	4628      	mov	r0, r5
   b6f30:	b003      	add	sp, #12
   b6f32:	bd30      	pop	{r4, r5, pc}

000b6f34 <_ZN11USARTSerialD0Ev>:
   b6f34:	b510      	push	{r4, lr}
   b6f36:	2114      	movs	r1, #20
   b6f38:	4604      	mov	r4, r0
   b6f3a:	f7fd f8ae 	bl	b409a <_ZdlPvj>
   b6f3e:	4620      	mov	r0, r4
   b6f40:	bd10      	pop	{r4, pc}
	...

000b6f44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6f44:	b510      	push	{r4, lr}
   b6f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f4a:	4604      	mov	r4, r0
   b6f4c:	4608      	mov	r0, r1
   b6f4e:	4611      	mov	r1, r2
   b6f50:	2200      	movs	r2, #0
   b6f52:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6f56:	4b04      	ldr	r3, [pc, #16]	; (b6f68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6f58:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6f5a:	2301      	movs	r3, #1
  _serial = serial;
   b6f5c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6f5e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6f60:	f7fd fba2 	bl	b46a8 <hal_usart_init_ex>
}
   b6f64:	4620      	mov	r0, r4
   b6f66:	bd10      	pop	{r4, pc}
   b6f68:	000b79b4 	.word	0x000b79b4

000b6f6c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6f6c:	2200      	movs	r2, #0
   b6f6e:	6840      	ldr	r0, [r0, #4]
   b6f70:	4611      	mov	r1, r2
   b6f72:	f7fd bc2d 	b.w	b47d0 <network_ready>

000b6f76 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6f76:	2200      	movs	r2, #0
   b6f78:	6840      	ldr	r0, [r0, #4]
   b6f7a:	4611      	mov	r1, r2
   b6f7c:	f7fd bc48 	b.w	b4810 <network_listening>

000b6f80 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6f80:	2200      	movs	r2, #0
   b6f82:	6840      	ldr	r0, [r0, #4]
   b6f84:	4611      	mov	r1, r2
   b6f86:	f7fd bc53 	b.w	b4830 <network_get_listen_timeout>

000b6f8a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6f8a:	6840      	ldr	r0, [r0, #4]
   b6f8c:	2200      	movs	r2, #0
   b6f8e:	f7fd bc47 	b.w	b4820 <network_set_listen_timeout>

000b6f92 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6f92:	6840      	ldr	r0, [r0, #4]
   b6f94:	2200      	movs	r2, #0
   b6f96:	f081 0101 	eor.w	r1, r1, #1
   b6f9a:	f7fd bc31 	b.w	b4800 <network_listen>

000b6f9e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f9e:	2300      	movs	r3, #0
   b6fa0:	6840      	ldr	r0, [r0, #4]
   b6fa2:	461a      	mov	r2, r3
   b6fa4:	4619      	mov	r1, r3
   b6fa6:	f7fd bc23 	b.w	b47f0 <network_off>

000b6faa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6faa:	2300      	movs	r3, #0
   b6fac:	6840      	ldr	r0, [r0, #4]
   b6fae:	461a      	mov	r2, r3
   b6fb0:	4619      	mov	r1, r3
   b6fb2:	f7fd bc15 	b.w	b47e0 <network_on>

000b6fb6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6fb6:	2200      	movs	r2, #0
   b6fb8:	6840      	ldr	r0, [r0, #4]
   b6fba:	4611      	mov	r1, r2
   b6fbc:	f7fd bbf8 	b.w	b47b0 <network_connecting>

000b6fc0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6fc0:	6840      	ldr	r0, [r0, #4]
   b6fc2:	2200      	movs	r2, #0
   b6fc4:	2102      	movs	r1, #2
   b6fc6:	f7fd bbfb 	b.w	b47c0 <network_disconnect>

000b6fca <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6fca:	2300      	movs	r3, #0
   b6fcc:	6840      	ldr	r0, [r0, #4]
   b6fce:	461a      	mov	r2, r3
   b6fd0:	f7fd bbe6 	b.w	b47a0 <network_connect>

000b6fd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6fd4:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6fd6:	2204      	movs	r2, #4
   b6fd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6fda:	4a02      	ldr	r2, [pc, #8]	; (b6fe4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6fdc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6fde:	4770      	bx	lr
   b6fe0:	2003e730 	.word	0x2003e730
   b6fe4:	000b79e4 	.word	0x000b79e4

000b6fe8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6fe8:	2300      	movs	r3, #0
   b6fea:	6840      	ldr	r0, [r0, #4]
   b6fec:	461a      	mov	r2, r3
   b6fee:	f7fd bbd7 	b.w	b47a0 <network_connect>

000b6ff2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6ff2:	6840      	ldr	r0, [r0, #4]
   b6ff4:	2200      	movs	r2, #0
   b6ff6:	2102      	movs	r1, #2
   b6ff8:	f7fd bbe2 	b.w	b47c0 <network_disconnect>

000b6ffc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6ffc:	2200      	movs	r2, #0
   b6ffe:	6840      	ldr	r0, [r0, #4]
   b7000:	4611      	mov	r1, r2
   b7002:	f7fd bbd5 	b.w	b47b0 <network_connecting>

000b7006 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7006:	2200      	movs	r2, #0
   b7008:	6840      	ldr	r0, [r0, #4]
   b700a:	4611      	mov	r1, r2
   b700c:	f7fd bbe0 	b.w	b47d0 <network_ready>

000b7010 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7010:	2300      	movs	r3, #0
   b7012:	6840      	ldr	r0, [r0, #4]
   b7014:	461a      	mov	r2, r3
   b7016:	4619      	mov	r1, r3
   b7018:	f7fd bbe2 	b.w	b47e0 <network_on>

000b701c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b701c:	2300      	movs	r3, #0
   b701e:	6840      	ldr	r0, [r0, #4]
   b7020:	461a      	mov	r2, r3
   b7022:	4619      	mov	r1, r3
   b7024:	f7fd bbe4 	b.w	b47f0 <network_off>

000b7028 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7028:	6840      	ldr	r0, [r0, #4]
   b702a:	2100      	movs	r1, #0
   b702c:	f7fd bc08 	b.w	b4840 <network_is_on>

000b7030 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7030:	6840      	ldr	r0, [r0, #4]
   b7032:	2100      	movs	r1, #0
   b7034:	f7fd bc0c 	b.w	b4850 <network_is_off>

000b7038 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7038:	6840      	ldr	r0, [r0, #4]
   b703a:	2200      	movs	r2, #0
   b703c:	f081 0101 	eor.w	r1, r1, #1
   b7040:	f7fd bbde 	b.w	b4800 <network_listen>

000b7044 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7044:	6840      	ldr	r0, [r0, #4]
   b7046:	2200      	movs	r2, #0
   b7048:	f7fd bbea 	b.w	b4820 <network_set_listen_timeout>

000b704c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b704c:	2200      	movs	r2, #0
   b704e:	6840      	ldr	r0, [r0, #4]
   b7050:	4611      	mov	r1, r2
   b7052:	f7fd bbed 	b.w	b4830 <network_get_listen_timeout>

000b7056 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7056:	2200      	movs	r2, #0
   b7058:	6840      	ldr	r0, [r0, #4]
   b705a:	4611      	mov	r1, r2
   b705c:	f7fd bbd8 	b.w	b4810 <network_listening>

000b7060 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7064:	b095      	sub	sp, #84	; 0x54
   b7066:	4614      	mov	r4, r2
   b7068:	460d      	mov	r5, r1
   b706a:	4607      	mov	r7, r0
    IPAddress addr;
   b706c:	f7ff fe66 	bl	b6d3c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7070:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7072:	221c      	movs	r2, #28
   b7074:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7076:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7078:	f000 f9fe 	bl	b7478 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b707c:	2340      	movs	r3, #64	; 0x40
   b707e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7080:	4620      	mov	r0, r4
   b7082:	466b      	mov	r3, sp
   b7084:	aa0c      	add	r2, sp, #48	; 0x30
   b7086:	2100      	movs	r1, #0
   b7088:	f7fd fa2c 	bl	b44e4 <netdb_getaddrinfo>
    if (!r) {
   b708c:	4604      	mov	r4, r0
   b708e:	2800      	cmp	r0, #0
   b7090:	d14b      	bne.n	b712a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7092:	4602      	mov	r2, r0
   b7094:	2101      	movs	r1, #1
   b7096:	6868      	ldr	r0, [r5, #4]
   b7098:	f7fd fb9a 	bl	b47d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b709c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b709e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b70a0:	4622      	mov	r2, r4
   b70a2:	6868      	ldr	r0, [r5, #4]
   b70a4:	f7fd fb94 	bl	b47d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70a8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b70aa:	4681      	mov	r9, r0
        bool ok = false;
   b70ac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70ae:	2e00      	cmp	r6, #0
   b70b0:	d03b      	beq.n	b712a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b70b2:	2900      	cmp	r1, #0
   b70b4:	d139      	bne.n	b712a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b70b6:	6873      	ldr	r3, [r6, #4]
   b70b8:	2b02      	cmp	r3, #2
   b70ba:	d003      	beq.n	b70c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b70bc:	2b0a      	cmp	r3, #10
   b70be:	d011      	beq.n	b70e4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70c0:	69f6      	ldr	r6, [r6, #28]
   b70c2:	e7f4      	b.n	b70ae <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b70c4:	f1b8 0f00 	cmp.w	r8, #0
   b70c8:	d0fa      	beq.n	b70c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b70ca:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b70cc:	a806      	add	r0, sp, #24
   b70ce:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b70d0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b70d2:	f7ff fe61 	bl	b6d98 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b70d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70d8:	1d3c      	adds	r4, r7, #4
   b70da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70dc:	682b      	ldr	r3, [r5, #0]
   b70de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b70e0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b70e2:	e7ed      	b.n	b70c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b70e4:	f1b9 0f00 	cmp.w	r9, #0
   b70e8:	d0ea      	beq.n	b70c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b70ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b70ec:	2210      	movs	r2, #16
   b70ee:	a801      	add	r0, sp, #4
   b70f0:	f000 f9c2 	bl	b7478 <memset>
                    a.v = 6;
   b70f4:	2306      	movs	r3, #6
   b70f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b70fa:	ad01      	add	r5, sp, #4
   b70fc:	f104 0308 	add.w	r3, r4, #8
   b7100:	3418      	adds	r4, #24
   b7102:	6818      	ldr	r0, [r3, #0]
   b7104:	6859      	ldr	r1, [r3, #4]
   b7106:	462a      	mov	r2, r5
   b7108:	c203      	stmia	r2!, {r0, r1}
   b710a:	3308      	adds	r3, #8
   b710c:	42a3      	cmp	r3, r4
   b710e:	4615      	mov	r5, r2
   b7110:	d1f7      	bne.n	b7102 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7112:	a901      	add	r1, sp, #4
   b7114:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7116:	ad07      	add	r5, sp, #28
   b7118:	f7ff fe1e 	bl	b6d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b711c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b711e:	1d3c      	adds	r4, r7, #4
   b7120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7122:	682b      	ldr	r3, [r5, #0]
   b7124:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7126:	4649      	mov	r1, r9
   b7128:	e7ca      	b.n	b70c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b712a:	9800      	ldr	r0, [sp, #0]
   b712c:	f7fd f9d2 	bl	b44d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7130:	4638      	mov	r0, r7
   b7132:	b015      	add	sp, #84	; 0x54
   b7134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7138 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7138:	4b02      	ldr	r3, [pc, #8]	; (b7144 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b713a:	4a03      	ldr	r2, [pc, #12]	; (b7148 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b713c:	601a      	str	r2, [r3, #0]
   b713e:	2200      	movs	r2, #0
   b7140:	605a      	str	r2, [r3, #4]

} // spark
   b7142:	4770      	bx	lr
   b7144:	2003e738 	.word	0x2003e738
   b7148:	000b7a20 	.word	0x000b7a20

000b714c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b714c:	4770      	bx	lr
	...

000b7150 <_Z20acquireSerial1Bufferv>:
{
   b7150:	b538      	push	{r3, r4, r5, lr}
   b7152:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7154:	2514      	movs	r5, #20
   b7156:	462a      	mov	r2, r5
   b7158:	2100      	movs	r1, #0
   b715a:	f000 f98d 	bl	b7478 <memset>
   b715e:	8025      	strh	r5, [r4, #0]
   b7160:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7162:	4907      	ldr	r1, [pc, #28]	; (b7180 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7164:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7166:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7168:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b716a:	f000 f82f 	bl	b71cc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b716e:	4904      	ldr	r1, [pc, #16]	; (b7180 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7170:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7172:	4628      	mov	r0, r5
   b7174:	f000 f82a 	bl	b71cc <_ZnajRKSt9nothrow_t>
    };
   b7178:	60e0      	str	r0, [r4, #12]
}
   b717a:	4620      	mov	r0, r4
   b717c:	bd38      	pop	{r3, r4, r5, pc}
   b717e:	bf00      	nop
   b7180:	000b7a54 	.word	0x000b7a54

000b7184 <_Z22__fetch_global_Serial1v>:
{
   b7184:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7186:	4d0e      	ldr	r5, [pc, #56]	; (b71c0 <_Z22__fetch_global_Serial1v+0x3c>)
   b7188:	7829      	ldrb	r1, [r5, #0]
   b718a:	f3bf 8f5b 	dmb	ish
   b718e:	f011 0401 	ands.w	r4, r1, #1
{
   b7192:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7194:	d111      	bne.n	b71ba <_Z22__fetch_global_Serial1v+0x36>
   b7196:	4628      	mov	r0, r5
   b7198:	f7fc ff81 	bl	b409e <__cxa_guard_acquire>
   b719c:	b168      	cbz	r0, b71ba <_Z22__fetch_global_Serial1v+0x36>
   b719e:	a801      	add	r0, sp, #4
   b71a0:	f7ff ffd6 	bl	b7150 <_Z20acquireSerial1Bufferv>
   b71a4:	aa01      	add	r2, sp, #4
   b71a6:	4621      	mov	r1, r4
   b71a8:	4806      	ldr	r0, [pc, #24]	; (b71c4 <_Z22__fetch_global_Serial1v+0x40>)
   b71aa:	f7ff fecb 	bl	b6f44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b71ae:	4628      	mov	r0, r5
   b71b0:	f7fc ff7a 	bl	b40a8 <__cxa_guard_release>
   b71b4:	4804      	ldr	r0, [pc, #16]	; (b71c8 <_Z22__fetch_global_Serial1v+0x44>)
   b71b6:	f000 f921 	bl	b73fc <atexit>
    return serial1;
}
   b71ba:	4802      	ldr	r0, [pc, #8]	; (b71c4 <_Z22__fetch_global_Serial1v+0x40>)
   b71bc:	b007      	add	sp, #28
   b71be:	bd30      	pop	{r4, r5, pc}
   b71c0:	2003e740 	.word	0x2003e740
   b71c4:	2003e744 	.word	0x2003e744
   b71c8:	000b714d 	.word	0x000b714d

000b71cc <_ZnajRKSt9nothrow_t>:
   b71cc:	f7fc bf63 	b.w	b4096 <_Znaj>

000b71d0 <_ZSt25__throw_bad_function_callv>:
   b71d0:	b508      	push	{r3, lr}
   b71d2:	f7fd fb75 	bl	b48c0 <abort>
	...

000b71d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b71d8:	4901      	ldr	r1, [pc, #4]	; (b71e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b71da:	f000 b8f9 	b.w	b73d0 <_ZNKSt9type_infoeqERKS_>
   b71de:	bf00      	nop
   b71e0:	000b7a70 	.word	0x000b7a70

000b71e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b71e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b71e6:	2400      	movs	r4, #0
   b71e8:	2310      	movs	r3, #16
   b71ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b71ee:	6803      	ldr	r3, [r0, #0]
   b71f0:	4615      	mov	r5, r2
   b71f2:	699e      	ldr	r6, [r3, #24]
   b71f4:	6812      	ldr	r2, [r2, #0]
   b71f6:	466b      	mov	r3, sp
   b71f8:	e9cd 4400 	strd	r4, r4, [sp]
   b71fc:	47b0      	blx	r6
   b71fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7202:	f003 0306 	and.w	r3, r3, #6
   b7206:	2b06      	cmp	r3, #6
   b7208:	bf03      	ittte	eq
   b720a:	9b00      	ldreq	r3, [sp, #0]
   b720c:	602b      	streq	r3, [r5, #0]
   b720e:	2001      	moveq	r0, #1
   b7210:	4620      	movne	r0, r4
   b7212:	b004      	add	sp, #16
   b7214:	bd70      	pop	{r4, r5, r6, pc}

000b7216 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7216:	9800      	ldr	r0, [sp, #0]
   b7218:	4290      	cmp	r0, r2
   b721a:	bf14      	ite	ne
   b721c:	2001      	movne	r0, #1
   b721e:	2006      	moveq	r0, #6
   b7220:	4770      	bx	lr
	...

000b7224 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7224:	b510      	push	{r4, lr}
   b7226:	4b03      	ldr	r3, [pc, #12]	; (b7234 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7228:	6003      	str	r3, [r0, #0]
   b722a:	4604      	mov	r4, r0
   b722c:	f000 f8cd 	bl	b73ca <_ZNSt9type_infoD1Ev>
   b7230:	4620      	mov	r0, r4
   b7232:	bd10      	pop	{r4, pc}
   b7234:	000b7ab0 	.word	0x000b7ab0

000b7238 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7238:	b510      	push	{r4, lr}
   b723a:	4604      	mov	r4, r0
   b723c:	f7ff fff2 	bl	b7224 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7240:	4620      	mov	r0, r4
   b7242:	2108      	movs	r1, #8
   b7244:	f7fc ff29 	bl	b409a <_ZdlPvj>
   b7248:	4620      	mov	r0, r4
   b724a:	bd10      	pop	{r4, pc}

000b724c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7250:	461f      	mov	r7, r3
   b7252:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7256:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b725a:	4598      	cmp	r8, r3
   b725c:	4606      	mov	r6, r0
   b725e:	4615      	mov	r5, r2
   b7260:	d107      	bne.n	b7272 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7262:	9907      	ldr	r1, [sp, #28]
   b7264:	f000 f8b4 	bl	b73d0 <_ZNKSt9type_infoeqERKS_>
   b7268:	b118      	cbz	r0, b7272 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b726a:	7165      	strb	r5, [r4, #5]
   b726c:	2000      	movs	r0, #0
   b726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7272:	4639      	mov	r1, r7
   b7274:	4630      	mov	r0, r6
   b7276:	f000 f8ab 	bl	b73d0 <_ZNKSt9type_infoeqERKS_>
   b727a:	2800      	cmp	r0, #0
   b727c:	d0f6      	beq.n	b726c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b727e:	2301      	movs	r3, #1
   b7280:	f8c4 8000 	str.w	r8, [r4]
   b7284:	7125      	strb	r5, [r4, #4]
   b7286:	71a3      	strb	r3, [r4, #6]
   b7288:	e7f0      	b.n	b726c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b728a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b728a:	b538      	push	{r3, r4, r5, lr}
   b728c:	4615      	mov	r5, r2
   b728e:	461c      	mov	r4, r3
   b7290:	f000 f89e 	bl	b73d0 <_ZNKSt9type_infoeqERKS_>
   b7294:	b120      	cbz	r0, b72a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7296:	2308      	movs	r3, #8
   b7298:	60e3      	str	r3, [r4, #12]
   b729a:	2306      	movs	r3, #6
   b729c:	6025      	str	r5, [r4, #0]
   b729e:	7123      	strb	r3, [r4, #4]
   b72a0:	bd38      	pop	{r3, r4, r5, pc}

000b72a2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b72a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b72a4:	4605      	mov	r5, r0
   b72a6:	460c      	mov	r4, r1
   b72a8:	9201      	str	r2, [sp, #4]
   b72aa:	461e      	mov	r6, r3
   b72ac:	f000 f890 	bl	b73d0 <_ZNKSt9type_infoeqERKS_>
   b72b0:	b950      	cbnz	r0, b72c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b72b2:	2e03      	cmp	r6, #3
   b72b4:	d808      	bhi.n	b72c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b72b6:	6823      	ldr	r3, [r4, #0]
   b72b8:	9a01      	ldr	r2, [sp, #4]
   b72ba:	695b      	ldr	r3, [r3, #20]
   b72bc:	4629      	mov	r1, r5
   b72be:	4620      	mov	r0, r4
   b72c0:	b002      	add	sp, #8
   b72c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b72c6:	4718      	bx	r3
   b72c8:	b002      	add	sp, #8
   b72ca:	bd70      	pop	{r4, r5, r6, pc}

000b72cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b72cc:	b510      	push	{r4, lr}
   b72ce:	4b03      	ldr	r3, [pc, #12]	; (b72dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b72d0:	6003      	str	r3, [r0, #0]
   b72d2:	4604      	mov	r4, r0
   b72d4:	f7ff ffa6 	bl	b7224 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b72d8:	4620      	mov	r0, r4
   b72da:	bd10      	pop	{r4, pc}
   b72dc:	000b7b10 	.word	0x000b7b10

000b72e0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b72e0:	b510      	push	{r4, lr}
   b72e2:	4604      	mov	r4, r0
   b72e4:	f7ff fff2 	bl	b72cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b72e8:	4620      	mov	r0, r4
   b72ea:	210c      	movs	r1, #12
   b72ec:	f7fc fed5 	bl	b409a <_ZdlPvj>
   b72f0:	4620      	mov	r0, r4
   b72f2:	bd10      	pop	{r4, pc}

000b72f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b72f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b72f6:	9f08      	ldr	r7, [sp, #32]
   b72f8:	4297      	cmp	r7, r2
   b72fa:	4605      	mov	r5, r0
   b72fc:	460e      	mov	r6, r1
   b72fe:	4614      	mov	r4, r2
   b7300:	d00a      	beq.n	b7318 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7302:	68a8      	ldr	r0, [r5, #8]
   b7304:	6802      	ldr	r2, [r0, #0]
   b7306:	9708      	str	r7, [sp, #32]
   b7308:	6a15      	ldr	r5, [r2, #32]
   b730a:	4631      	mov	r1, r6
   b730c:	4622      	mov	r2, r4
   b730e:	46ac      	mov	ip, r5
   b7310:	b003      	add	sp, #12
   b7312:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7316:	4760      	bx	ip
   b7318:	4619      	mov	r1, r3
   b731a:	9301      	str	r3, [sp, #4]
   b731c:	f000 f858 	bl	b73d0 <_ZNKSt9type_infoeqERKS_>
   b7320:	9b01      	ldr	r3, [sp, #4]
   b7322:	2800      	cmp	r0, #0
   b7324:	d0ed      	beq.n	b7302 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7326:	2006      	movs	r0, #6
   b7328:	b003      	add	sp, #12
   b732a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b732c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b732c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7330:	460d      	mov	r5, r1
   b7332:	4619      	mov	r1, r3
   b7334:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7338:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b733c:	4681      	mov	r9, r0
   b733e:	4617      	mov	r7, r2
   b7340:	4698      	mov	r8, r3
   b7342:	f000 f845 	bl	b73d0 <_ZNKSt9type_infoeqERKS_>
   b7346:	b190      	cbz	r0, b736e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7348:	2d00      	cmp	r5, #0
   b734a:	6034      	str	r4, [r6, #0]
   b734c:	7137      	strb	r7, [r6, #4]
   b734e:	db09      	blt.n	b7364 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7350:	1961      	adds	r1, r4, r5
   b7352:	458a      	cmp	sl, r1
   b7354:	bf0c      	ite	eq
   b7356:	2106      	moveq	r1, #6
   b7358:	2101      	movne	r1, #1
   b735a:	71b1      	strb	r1, [r6, #6]
   b735c:	2000      	movs	r0, #0
   b735e:	b001      	add	sp, #4
   b7360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7364:	3502      	adds	r5, #2
   b7366:	d1f9      	bne.n	b735c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7368:	2301      	movs	r3, #1
   b736a:	71b3      	strb	r3, [r6, #6]
   b736c:	e7f6      	b.n	b735c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b736e:	4554      	cmp	r4, sl
   b7370:	d106      	bne.n	b7380 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7372:	4659      	mov	r1, fp
   b7374:	4648      	mov	r0, r9
   b7376:	f000 f82b 	bl	b73d0 <_ZNKSt9type_infoeqERKS_>
   b737a:	b108      	cbz	r0, b7380 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b737c:	7177      	strb	r7, [r6, #5]
   b737e:	e7ed      	b.n	b735c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7380:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7384:	6803      	ldr	r3, [r0, #0]
   b7386:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b738a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b738e:	69dc      	ldr	r4, [r3, #28]
   b7390:	463a      	mov	r2, r7
   b7392:	4643      	mov	r3, r8
   b7394:	4629      	mov	r1, r5
   b7396:	46a4      	mov	ip, r4
   b7398:	b001      	add	sp, #4
   b739a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b739e:	4760      	bx	ip

000b73a0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b73a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b73a4:	4607      	mov	r7, r0
   b73a6:	460c      	mov	r4, r1
   b73a8:	4615      	mov	r5, r2
   b73aa:	461e      	mov	r6, r3
   b73ac:	f7ff ff6d 	bl	b728a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b73b0:	b948      	cbnz	r0, b73c6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b73b2:	68b8      	ldr	r0, [r7, #8]
   b73b4:	6803      	ldr	r3, [r0, #0]
   b73b6:	699f      	ldr	r7, [r3, #24]
   b73b8:	462a      	mov	r2, r5
   b73ba:	4633      	mov	r3, r6
   b73bc:	4621      	mov	r1, r4
   b73be:	46bc      	mov	ip, r7
   b73c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b73c4:	4760      	bx	ip
   b73c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b73ca <_ZNSt9type_infoD1Ev>:
   b73ca:	4770      	bx	lr

000b73cc <_ZNKSt9type_info14__is_pointer_pEv>:
   b73cc:	2000      	movs	r0, #0
   b73ce:	4770      	bx	lr

000b73d0 <_ZNKSt9type_infoeqERKS_>:
   b73d0:	4281      	cmp	r1, r0
   b73d2:	b508      	push	{r3, lr}
   b73d4:	d00e      	beq.n	b73f4 <_ZNKSt9type_infoeqERKS_+0x24>
   b73d6:	6840      	ldr	r0, [r0, #4]
   b73d8:	7803      	ldrb	r3, [r0, #0]
   b73da:	2b2a      	cmp	r3, #42	; 0x2a
   b73dc:	d00c      	beq.n	b73f8 <_ZNKSt9type_infoeqERKS_+0x28>
   b73de:	6849      	ldr	r1, [r1, #4]
   b73e0:	780b      	ldrb	r3, [r1, #0]
   b73e2:	2b2a      	cmp	r3, #42	; 0x2a
   b73e4:	bf08      	it	eq
   b73e6:	3101      	addeq	r1, #1
   b73e8:	f000 f87c 	bl	b74e4 <strcmp>
   b73ec:	fab0 f080 	clz	r0, r0
   b73f0:	0940      	lsrs	r0, r0, #5
   b73f2:	bd08      	pop	{r3, pc}
   b73f4:	2001      	movs	r0, #1
   b73f6:	e7fc      	b.n	b73f2 <_ZNKSt9type_infoeqERKS_+0x22>
   b73f8:	2000      	movs	r0, #0
   b73fa:	e7fa      	b.n	b73f2 <_ZNKSt9type_infoeqERKS_+0x22>

000b73fc <atexit>:
   b73fc:	2300      	movs	r3, #0
   b73fe:	4601      	mov	r1, r0
   b7400:	461a      	mov	r2, r3
   b7402:	4618      	mov	r0, r3
   b7404:	f000 b894 	b.w	b7530 <__register_exitproc>

000b7408 <memcmp>:
   b7408:	b510      	push	{r4, lr}
   b740a:	3901      	subs	r1, #1
   b740c:	4402      	add	r2, r0
   b740e:	4290      	cmp	r0, r2
   b7410:	d101      	bne.n	b7416 <memcmp+0xe>
   b7412:	2000      	movs	r0, #0
   b7414:	e005      	b.n	b7422 <memcmp+0x1a>
   b7416:	7803      	ldrb	r3, [r0, #0]
   b7418:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b741c:	42a3      	cmp	r3, r4
   b741e:	d001      	beq.n	b7424 <memcmp+0x1c>
   b7420:	1b18      	subs	r0, r3, r4
   b7422:	bd10      	pop	{r4, pc}
   b7424:	3001      	adds	r0, #1
   b7426:	e7f2      	b.n	b740e <memcmp+0x6>

000b7428 <memcpy>:
   b7428:	440a      	add	r2, r1
   b742a:	4291      	cmp	r1, r2
   b742c:	f100 33ff 	add.w	r3, r0, #4294967295
   b7430:	d100      	bne.n	b7434 <memcpy+0xc>
   b7432:	4770      	bx	lr
   b7434:	b510      	push	{r4, lr}
   b7436:	f811 4b01 	ldrb.w	r4, [r1], #1
   b743a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b743e:	4291      	cmp	r1, r2
   b7440:	d1f9      	bne.n	b7436 <memcpy+0xe>
   b7442:	bd10      	pop	{r4, pc}

000b7444 <memmove>:
   b7444:	4288      	cmp	r0, r1
   b7446:	b510      	push	{r4, lr}
   b7448:	eb01 0402 	add.w	r4, r1, r2
   b744c:	d902      	bls.n	b7454 <memmove+0x10>
   b744e:	4284      	cmp	r4, r0
   b7450:	4623      	mov	r3, r4
   b7452:	d807      	bhi.n	b7464 <memmove+0x20>
   b7454:	1e43      	subs	r3, r0, #1
   b7456:	42a1      	cmp	r1, r4
   b7458:	d008      	beq.n	b746c <memmove+0x28>
   b745a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b745e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7462:	e7f8      	b.n	b7456 <memmove+0x12>
   b7464:	4402      	add	r2, r0
   b7466:	4601      	mov	r1, r0
   b7468:	428a      	cmp	r2, r1
   b746a:	d100      	bne.n	b746e <memmove+0x2a>
   b746c:	bd10      	pop	{r4, pc}
   b746e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7472:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7476:	e7f7      	b.n	b7468 <memmove+0x24>

000b7478 <memset>:
   b7478:	4402      	add	r2, r0
   b747a:	4603      	mov	r3, r0
   b747c:	4293      	cmp	r3, r2
   b747e:	d100      	bne.n	b7482 <memset+0xa>
   b7480:	4770      	bx	lr
   b7482:	f803 1b01 	strb.w	r1, [r3], #1
   b7486:	e7f9      	b.n	b747c <memset+0x4>

000b7488 <srand>:
   b7488:	b538      	push	{r3, r4, r5, lr}
   b748a:	4b10      	ldr	r3, [pc, #64]	; (b74cc <srand+0x44>)
   b748c:	681d      	ldr	r5, [r3, #0]
   b748e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7490:	4604      	mov	r4, r0
   b7492:	b9b3      	cbnz	r3, b74c2 <srand+0x3a>
   b7494:	2018      	movs	r0, #24
   b7496:	f7fd f9f3 	bl	b4880 <malloc>
   b749a:	4602      	mov	r2, r0
   b749c:	63a8      	str	r0, [r5, #56]	; 0x38
   b749e:	b920      	cbnz	r0, b74aa <srand+0x22>
   b74a0:	4b0b      	ldr	r3, [pc, #44]	; (b74d0 <srand+0x48>)
   b74a2:	480c      	ldr	r0, [pc, #48]	; (b74d4 <srand+0x4c>)
   b74a4:	2142      	movs	r1, #66	; 0x42
   b74a6:	f7fd fa13 	bl	b48d0 <__assert_func>
   b74aa:	490b      	ldr	r1, [pc, #44]	; (b74d8 <srand+0x50>)
   b74ac:	4b0b      	ldr	r3, [pc, #44]	; (b74dc <srand+0x54>)
   b74ae:	e9c0 1300 	strd	r1, r3, [r0]
   b74b2:	4b0b      	ldr	r3, [pc, #44]	; (b74e0 <srand+0x58>)
   b74b4:	6083      	str	r3, [r0, #8]
   b74b6:	230b      	movs	r3, #11
   b74b8:	8183      	strh	r3, [r0, #12]
   b74ba:	2100      	movs	r1, #0
   b74bc:	2001      	movs	r0, #1
   b74be:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b74c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b74c4:	2200      	movs	r2, #0
   b74c6:	611c      	str	r4, [r3, #16]
   b74c8:	615a      	str	r2, [r3, #20]
   b74ca:	bd38      	pop	{r3, r4, r5, pc}
   b74cc:	2003df28 	.word	0x2003df28
   b74d0:	000b7b49 	.word	0x000b7b49
   b74d4:	000b7b60 	.word	0x000b7b60
   b74d8:	abcd330e 	.word	0xabcd330e
   b74dc:	e66d1234 	.word	0xe66d1234
   b74e0:	0005deec 	.word	0x0005deec

000b74e4 <strcmp>:
   b74e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   b74e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   b74ec:	2a01      	cmp	r2, #1
   b74ee:	bf28      	it	cs
   b74f0:	429a      	cmpcs	r2, r3
   b74f2:	d0f7      	beq.n	b74e4 <strcmp>
   b74f4:	1ad0      	subs	r0, r2, r3
   b74f6:	4770      	bx	lr

000b74f8 <strcpy>:
   b74f8:	4603      	mov	r3, r0
   b74fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b74fe:	f803 2b01 	strb.w	r2, [r3], #1
   b7502:	2a00      	cmp	r2, #0
   b7504:	d1f9      	bne.n	b74fa <strcpy+0x2>
   b7506:	4770      	bx	lr

000b7508 <strlen>:
   b7508:	4603      	mov	r3, r0
   b750a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b750e:	2a00      	cmp	r2, #0
   b7510:	d1fb      	bne.n	b750a <strlen+0x2>
   b7512:	1a18      	subs	r0, r3, r0
   b7514:	3801      	subs	r0, #1
   b7516:	4770      	bx	lr

000b7518 <strnlen>:
   b7518:	b510      	push	{r4, lr}
   b751a:	4602      	mov	r2, r0
   b751c:	4401      	add	r1, r0
   b751e:	428a      	cmp	r2, r1
   b7520:	4613      	mov	r3, r2
   b7522:	d003      	beq.n	b752c <strnlen+0x14>
   b7524:	781c      	ldrb	r4, [r3, #0]
   b7526:	3201      	adds	r2, #1
   b7528:	2c00      	cmp	r4, #0
   b752a:	d1f8      	bne.n	b751e <strnlen+0x6>
   b752c:	1a18      	subs	r0, r3, r0
   b752e:	bd10      	pop	{r4, pc}

000b7530 <__register_exitproc>:
   b7530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7534:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b75f0 <__register_exitproc+0xc0>
   b7538:	4606      	mov	r6, r0
   b753a:	f8d8 0000 	ldr.w	r0, [r8]
   b753e:	461f      	mov	r7, r3
   b7540:	460d      	mov	r5, r1
   b7542:	4691      	mov	r9, r2
   b7544:	f000 f856 	bl	b75f4 <__retarget_lock_acquire_recursive>
   b7548:	4b25      	ldr	r3, [pc, #148]	; (b75e0 <__register_exitproc+0xb0>)
   b754a:	681c      	ldr	r4, [r3, #0]
   b754c:	b934      	cbnz	r4, b755c <__register_exitproc+0x2c>
   b754e:	4c25      	ldr	r4, [pc, #148]	; (b75e4 <__register_exitproc+0xb4>)
   b7550:	601c      	str	r4, [r3, #0]
   b7552:	4b25      	ldr	r3, [pc, #148]	; (b75e8 <__register_exitproc+0xb8>)
   b7554:	b113      	cbz	r3, b755c <__register_exitproc+0x2c>
   b7556:	681b      	ldr	r3, [r3, #0]
   b7558:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b755c:	6863      	ldr	r3, [r4, #4]
   b755e:	2b1f      	cmp	r3, #31
   b7560:	dd07      	ble.n	b7572 <__register_exitproc+0x42>
   b7562:	f8d8 0000 	ldr.w	r0, [r8]
   b7566:	f000 f847 	bl	b75f8 <__retarget_lock_release_recursive>
   b756a:	f04f 30ff 	mov.w	r0, #4294967295
   b756e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7572:	b34e      	cbz	r6, b75c8 <__register_exitproc+0x98>
   b7574:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7578:	b988      	cbnz	r0, b759e <__register_exitproc+0x6e>
   b757a:	4b1c      	ldr	r3, [pc, #112]	; (b75ec <__register_exitproc+0xbc>)
   b757c:	b923      	cbnz	r3, b7588 <__register_exitproc+0x58>
   b757e:	f8d8 0000 	ldr.w	r0, [r8]
   b7582:	f000 f838 	bl	b75f6 <__retarget_lock_release>
   b7586:	e7f0      	b.n	b756a <__register_exitproc+0x3a>
   b7588:	f44f 7084 	mov.w	r0, #264	; 0x108
   b758c:	f7fd f978 	bl	b4880 <malloc>
   b7590:	2800      	cmp	r0, #0
   b7592:	d0f4      	beq.n	b757e <__register_exitproc+0x4e>
   b7594:	2300      	movs	r3, #0
   b7596:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b759a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b759e:	6863      	ldr	r3, [r4, #4]
   b75a0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b75a4:	2201      	movs	r2, #1
   b75a6:	409a      	lsls	r2, r3
   b75a8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b75ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b75b0:	4313      	orrs	r3, r2
   b75b2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b75b6:	2e02      	cmp	r6, #2
   b75b8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b75bc:	bf02      	ittt	eq
   b75be:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b75c2:	4313      	orreq	r3, r2
   b75c4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b75c8:	6863      	ldr	r3, [r4, #4]
   b75ca:	f8d8 0000 	ldr.w	r0, [r8]
   b75ce:	1c5a      	adds	r2, r3, #1
   b75d0:	3302      	adds	r3, #2
   b75d2:	6062      	str	r2, [r4, #4]
   b75d4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b75d8:	f000 f80e 	bl	b75f8 <__retarget_lock_release_recursive>
   b75dc:	2000      	movs	r0, #0
   b75de:	e7c6      	b.n	b756e <__register_exitproc+0x3e>
   b75e0:	2003e7e8 	.word	0x2003e7e8
   b75e4:	2003e75c 	.word	0x2003e75c
   b75e8:	00000000 	.word	0x00000000
   b75ec:	000b4881 	.word	0x000b4881
   b75f0:	2003df8c 	.word	0x2003df8c

000b75f4 <__retarget_lock_acquire_recursive>:
   b75f4:	4770      	bx	lr

000b75f6 <__retarget_lock_release>:
   b75f6:	4770      	bx	lr

000b75f8 <__retarget_lock_release_recursive>:
   b75f8:	4770      	bx	lr

000b75fa <link_code_end>:
	...

000b75fc <dynalib_user>:
   b75fc:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b760c:	0000 0000 6572 6563 7669 6465 6420 7461     ....received dat
   b761c:	2061 7266 6d6f 253a 3230 3a58 3025 5832     a from:%02X:%02X
   b762c:	253a 3230 3a58 3025 5832 253a 3230 3a58     :%02X:%02X:%02X:
   b763c:	3025 5832 000a 7942 6574 3a73 2500 3230     %02X..Bytes:.%02
   b764c:	0058 6925 6420 7665 6369 7365 6620 756f     X.%i devices fou
   b765c:	646e 000a 414d 2043 6461 7264 7365 2073     nd..MAC address 
   b766c:	203d 3025 5832 253a 3230 3a58 3025 5832     = %02X:%02X:%02X
   b767c:	253a 3230 3a58 3025 5832 253a 3230 2e58     :%02X:%02X:%02X.
   b768c:	5220 5353 2049 203d 6925 000a 4536 3034      RSSI = %i..6E40
   b769c:	3030 3130 422d 4135 2d33 3346 3339 452d     0001-B5A3-F393-E
   b76ac:	4130 2d39 3545 4530 3432 4344 4143 4539     0A9-E50E24DCCA9E
   b76bc:	3600 3445 3030 3030 2d32 3542 3341 462d     .6E400002-B5A3-F
   b76cc:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   b76dc:	4343 3941 0045 4536 3034 3030 3330 422d     CCA9E.6E400003-B
   b76ec:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   b76fc:	4530 3432 4344 4143 4539 7400 0078 7872     0E24DCCA9E.tx.rx
   b770c:	0000 0000                                   ....

000b7710 <_ZTVN5spark13EthernetClassE>:
	...
   b7718:	494f 000b 4945 000b 493b 000b 4931 000b     OI..EI..;I..1I..
   b7728:	4925 000b 4919 000b 7029 000b 7031 000b     %I...I..)p..1p..
   b7738:	490d 000b 4905 000b 48fb 000b 48f1 000b     .I...I...H...H..
   b7748:	7061 000b 7341 6573 7472 6f69 466e 6961     ap..AssertionFai
   b7758:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   b7768:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   b7778:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   b7788:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   b7798:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   b77a8:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   b77b8:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   b77c8:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   b77d8:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   b77e8:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   b77f8:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   b7808:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   b7818:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   b7828:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   b7838:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   b7848:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   b7858:	6420 7665 6369 2e65 4400 7075 696c 6163      device..Duplica
   b7868:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   b7878:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   b7888:	6465 002e 6146 6c69 6465 7420 206f 7061     ed..Failed to ap
   b7898:	6570 646e 6c20 636f 6c61 6320 6168 6172     pend local chara
   b78a8:	7463 7265 7369 6974 2e63 0000               cteristic...

000b78b4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b78bc:	4b89 000b 4bed 000b 4cff 000b 4c17 000b     .K...K...L...L..
   b78cc:	4b8d 000b                                   .K..

000b78d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b78d8:	4b85 000b 4bfb 000b 4b87 000b 4c1d 000b     .K...K...K...L..
   b78e8:	4bad 000b                                   .K..

000b78ec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b78f4:	4b83 000b 4c09 000b 5611 000b 4c23 000b     .K...L...V..#L..
   b7904:	4bcd 000b                                   .K..

000b7908 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7914:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b7926 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b7926:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b7936 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b7936:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   b7946:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b7956:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000b7968 <_ZTV9IPAddress>:
	...
   b7970:	6cd9 000b 6cc9 000b 6ccb 000b               .l...l...l..

000b797c <_ZTV9USBSerial>:
	...
   b7984:	6dbf 000b 6e27 000b 6dfd 000b 6a4d 000b     .m..'n...m..Mj..
   b7994:	6def 000b 6dc1 000b 6dd1 000b 6e21 000b     .m...m...m..!n..
   b79a4:	6de1 000b 6db9 000b                         .m...m..

000b79ac <_ZTV11USARTSerial>:
	...
   b79b4:	6ec9 000b 6f35 000b 6f0d 000b 6a4d 000b     .n..5o...o..Mj..
   b79c4:	6edd 000b 6ef9 000b 6eeb 000b 6f07 000b     .n...n...n...o..
   b79d4:	6ecb 000b 6ecf 000b                         .n...n..

000b79dc <_ZTVN5spark9WiFiClassE>:
	...
   b79e4:	6fcb 000b 6fc1 000b 6fb7 000b 6f6d 000b     .o...o...o..mo..
   b79f4:	6fab 000b 6f9f 000b 7029 000b 7031 000b     .o...o..)p..1p..
   b7a04:	6f93 000b 6f8b 000b 6f81 000b 6f77 000b     .o...o...o..wo..
   b7a14:	7061 000b                                   ap..

000b7a18 <_ZTVN5spark12NetworkClassE>:
	...
   b7a20:	6fe9 000b 6ff3 000b 6ffd 000b 7007 000b     .o...o...o...p..
   b7a30:	7011 000b 701d 000b 7029 000b 7031 000b     .p...p..)p..1p..
   b7a40:	7039 000b 7045 000b 704d 000b 7057 000b     9p..Ep..Mp..Wp..
   b7a50:	7061 000b                                   ap..

000b7a54 <_ZSt7nothrow>:
	...

000b7a55 <_ZTSSt19_Sp_make_shared_tag>:
   b7a55:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7a65:	6572 5f64 6174 0067 0000                     red_tag....

000b7a70 <_ZTISt19_Sp_make_shared_tag>:
   b7a70:	7ab0 000b 7a55 000b                         .z..Uz..

000b7a78 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7a78:	7b10 000b 7a84 000b 7b34 000b               .{...z..4{..

000b7a84 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7a84:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7a94:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7aa4:	0045 0000                                   E...

000b7aa8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7aa8:	0000 0000 7a78 000b 7225 000b 7239 000b     ....xz..%r..9r..
   b7ab8:	73cd 000b 73cd 000b 72a3 000b 71e5 000b     .s...s...r...q..
   b7ac8:	728b 000b 724d 000b 7217 000b               .r..Mr...r..

000b7ad4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7ad4:	7b10 000b 7ae0 000b 7a78 000b               .{...z..xz..

000b7ae0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7ae0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7af0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7b00:	666e 456f 0000 0000                         nfoE....

000b7b08 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7b08:	0000 0000 7ad4 000b 72cd 000b 72e1 000b     .....z...r...r..
   b7b18:	73cd 000b 73cd 000b 72a3 000b 71e5 000b     .s...s...r...q..
   b7b28:	73a1 000b 732d 000b 72f5 000b               .s..-s...r..

000b7b34 <_ZTISt9type_info>:
   b7b34:	7ab0 000b 7b3c 000b                         .z..<{..

000b7b3c <_ZTSSt9type_info>:
   b7b3c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7b4c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7b5c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7b6c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7b7c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7b8c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7b9c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7bac:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7bbc:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7bcc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7bdd <link_const_variable_data_end>:
   b7bdd:	00          	.byte	0x00
	...

000b7be0 <link_constructors_location>:
   b7be0:	000b436d 	.word	0x000b436d
   b7be4:	000b4959 	.word	0x000b4959
   b7be8:	000b496d 	.word	0x000b496d
   b7bec:	000b6a3d 	.word	0x000b6a3d
   b7bf0:	000b6b59 	.word	0x000b6b59
   b7bf4:	000b6b69 	.word	0x000b6b69
   b7bf8:	000b6b85 	.word	0x000b6b85
   b7bfc:	000b6fd5 	.word	0x000b6fd5
   b7c00:	000b7139 	.word	0x000b7139

000b7c04 <link_constructors_end>:
	...
