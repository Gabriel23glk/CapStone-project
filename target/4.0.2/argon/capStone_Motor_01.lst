
c:/Users/gabea/Documents/IoT/capStone_Motor_01/target/4.0.2/argon/capStone_Motor_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006104  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba120  000ba120  0000a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba144  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000488  2003da9c  000ba148  0001da9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008cc  2003df24  2003df24  0002df24  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000ba5d0  000ba5d0  0002a5d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba5f8  000ba5f8  0002a5f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00118e3c  00000000  00000000  0002a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c9b  00000000  00000000  00143438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000398e1  00000000  00000000  001560d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002f48  00000000  00000000  0018f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a250  00000000  00000000  001928fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a343  00000000  00000000  0019cb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00040bf2  00000000  00000000  001d6e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00130dad  00000000  00000000  00217a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000086cc  00000000  00000000  00348830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fe5f 	bl	b8cf0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fe81 	bl	b8d40 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003da9c 	.word	0x2003da9c
   b4048:	000ba148 	.word	0x000ba148
   b404c:	2003df24 	.word	0x2003df24
   b4050:	2003df24 	.word	0x2003df24
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 f939 	bl	b82d4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000ba0f8 	.word	0x000ba0f8
   b407c:	000ba120 	.word	0x000ba120

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b830 	b.w	b40e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8fd 	bl	b4284 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f004 b8d9 	b.w	b8244 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bdcb 	b.w	b5c2c <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bdc9 	b.w	b5c2c <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bdcf 	b.w	b5c3c <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fd1c 	bl	b5ae4 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5741 	.word	0x000b5741
   b40b4:	000b8ff0 	.word	0x000b8ff0

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f004 f846 	bl	b8166 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
Adafruit_NeoPixel pixel(PIXELNUMBER,PIXELPIN,WS2812B);
Adafruit_SSD1306 display(OLED_RESET);
SYSTEM_MODE(SEMI_AUTOMATIC);


void setup() {
   b40e4:	b570      	push	{r4, r5, r6, lr}
   b40e6:	b090      	sub	sp, #64	; 0x40
 Serial.begin(9600);
   b40e8:	f004 fa00 	bl	b84ec <_Z16_fetch_usbserialv>
   b40ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40f0:	f004 f9ec 	bl	b84cc <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40f4:	2000      	movs	r0, #0
   b40f6:	f001 fb3b 	bl	b5770 <hal_timer_millis>
        while (_while() && !_condition()) {
   b40fa:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b40fe:	4604      	mov	r4, r0
   b4100:	2000      	movs	r0, #0
   b4102:	f001 fb35 	bl	b5770 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4106:	1b00      	subs	r0, r0, r4
   b4108:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b410c:	42a8      	cmp	r0, r5
   b410e:	f171 0300 	sbcs.w	r3, r1, #0
   b4112:	d207      	bcs.n	b4124 <setup+0x40>
  waitFor(Serial.isConnected, 15000);
   b4114:	f004 f9ea 	bl	b84ec <_Z16_fetch_usbserialv>
   b4118:	f004 f9dc 	bl	b84d4 <_ZN9USBSerial11isConnectedEv>
   b411c:	b910      	cbnz	r0, b4124 <setup+0x40>
            spark_process();
   b411e:	f001 fd75 	bl	b5c0c <spark_process>
        while (_while() && !_condition()) {
   b4122:	e7ed      	b.n	b4100 <setup+0x1c>
   b4124:	f004 f9e2 	bl	b84ec <_Z16_fetch_usbserialv>
   b4128:	f004 f9d4 	bl	b84d4 <_ZN9USBSerial11isConnectedEv>
    BLE.on();
   b412c:	f002 fbc8 	bl	b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4130:	f002 fc10 	bl	b6954 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(txCharacteristic);
   b4134:	f002 fbc4 	bl	b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4138:	4a49      	ldr	r2, [pc, #292]	; (b4260 <setup+0x17c>)
   b413a:	4d4a      	ldr	r5, [pc, #296]	; (b4264 <setup+0x180>)
   b413c:	4601      	mov	r1, r0
   b413e:	a80b      	add	r0, sp, #44	; 0x2c
   b4140:	f003 fd5c 	bl	b7bfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4144:	a80b      	add	r0, sp, #44	; 0x2c
   b4146:	f002 fd70 	bl	b6c2a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b414a:	f002 fbb9 	bl	b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b414e:	4a46      	ldr	r2, [pc, #280]	; (b4268 <setup+0x184>)
   b4150:	4601      	mov	r1, r0
   b4152:	a80b      	add	r0, sp, #44	; 0x2c
   b4154:	f003 fd52 	bl	b7bfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4158:	a80b      	add	r0, sp, #44	; 0x2c
   b415a:	f002 fd66 	bl	b6c2a <_ZN8particle17BleCharacteristicD1Ev>
    data.appendServiceUUID(serviceUuid);
   b415e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4160:	ac06      	add	r4, sp, #24
   b4162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4164:	682e      	ldr	r6, [r5, #0]
   b4166:	6026      	str	r6, [r4, #0]
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4168:	ad06      	add	r5, sp, #24
   b416a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b416c:	ac0b      	add	r4, sp, #44	; 0x2c
   b416e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4170:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4172:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4174:	f002 f9bc 	bl	b64f0 <_ZNK8particle7BleUuid4typeEv>
   b4178:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b417a:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b417c:	2c00      	cmp	r4, #0
   b417e:	d167      	bne.n	b4250 <setup+0x16c>
            uint16_t uuid16 = tempUUID.shorted();
   b4180:	f002 f9d2 	bl	b6528 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4184:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4186:	f8ad 0016 	strh.w	r0, [sp, #22]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b418a:	2302      	movs	r3, #2
   b418c:	f10d 0216 	add.w	r2, sp, #22
   b4190:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4192:	4836      	ldr	r0, [pc, #216]	; (b426c <setup+0x188>)
   b4194:	f003 f86a 	bl	b726c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b4198:	f002 fb92 	bl	b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b419c:	2200      	movs	r2, #0
   b419e:	4933      	ldr	r1, [pc, #204]	; (b426c <setup+0x188>)
   b41a0:	f002 fce6 	bl	b6b70 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.printf("Argon BLE Address:%s\n",BLE.address().toString().c_str());
   b41a4:	f004 f9a2 	bl	b84ec <_Z16_fetch_usbserialv>
   b41a8:	4604      	mov	r4, r0
   b41aa:	f002 fb89 	bl	b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41ae:	4601      	mov	r1, r0
   b41b0:	a806      	add	r0, sp, #24
   b41b2:	f002 fbd6 	bl	b6962 <_ZNK8particle14BleLocalDevice7addressEv>
   b41b6:	a906      	add	r1, sp, #24
   b41b8:	a80b      	add	r0, sp, #44	; 0x2c
   b41ba:	2200      	movs	r2, #0
   b41bc:	f002 f935 	bl	b642a <_ZNK8particle10BleAddress8toStringEb>
   b41c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b41c2:	492b      	ldr	r1, [pc, #172]	; (b4270 <setup+0x18c>)
   b41c4:	4620      	mov	r0, r4
   b41c6:	f7ff ff7f 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b41ca:	a80b      	add	r0, sp, #44	; 0x2c
   b41cc:	f001 fe7e 	bl	b5ecc <_ZN6StringD1Ev>
display.begin (SSD1306_SWITCHCAPVCC, 0x3c);
   b41d0:	223c      	movs	r2, #60	; 0x3c
   b41d2:	2102      	movs	r1, #2
   b41d4:	4827      	ldr	r0, [pc, #156]	; (b4274 <setup+0x190>)
   b41d6:	f000 ffa3 	bl	b5120 <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   b41da:	4826      	ldr	r0, [pc, #152]	; (b4274 <setup+0x190>)
   b41dc:	f000 ff30 	bl	b5040 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   b41e0:	4824      	ldr	r0, [pc, #144]	; (b4274 <setup+0x190>)
   b41e2:	f000 feb5 	bl	b4f50 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.drawBitmap(16,20, myBitmap,112, 44, 1);
   b41e6:	2401      	movs	r4, #1
   b41e8:	232c      	movs	r3, #44	; 0x2c
   b41ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b41ee:	2370      	movs	r3, #112	; 0x70
   b41f0:	9300      	str	r3, [sp, #0]
   b41f2:	2214      	movs	r2, #20
   b41f4:	4b20      	ldr	r3, [pc, #128]	; (b4278 <setup+0x194>)
   b41f6:	481f      	ldr	r0, [pc, #124]	; (b4274 <setup+0x190>)
   b41f8:	2110      	movs	r1, #16
   b41fa:	f001 f955 	bl	b54a8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b41fe:	481d      	ldr	r0, [pc, #116]	; (b4274 <setup+0x190>)
   b4200:	f000 ff1e 	bl	b5040 <_ZN16Adafruit_SSD13067displayEv>
  // delay(1000);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
   b4204:	223c      	movs	r2, #60	; 0x3c
   b4206:	481b      	ldr	r0, [pc, #108]	; (b4274 <setup+0x190>)
   b4208:	2102      	movs	r1, #2
   b420a:	f000 ff89 	bl	b5120 <_ZN16Adafruit_SSD13065beginEhh>
  display.setTextSize(2);
   b420e:	4819      	ldr	r0, [pc, #100]	; (b4274 <setup+0x190>)
   b4210:	2102      	movs	r1, #2
   b4212:	f001 fa4d 	bl	b56b0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(BLACK,WHITE);
   b4216:	4622      	mov	r2, r4
   b4218:	4816      	ldr	r0, [pc, #88]	; (b4274 <setup+0x190>)
   b421a:	2100      	movs	r1, #0
   b421c:	f001 fa4d 	bl	b56ba <_ZN12Adafruit_GFX12setTextColorEtt>
  display.printf("PlayTime!%c",33);
   b4220:	2221      	movs	r2, #33	; 0x21
   b4222:	4916      	ldr	r1, [pc, #88]	; (b427c <setup+0x198>)
   b4224:	4813      	ldr	r0, [pc, #76]	; (b4274 <setup+0x190>)
   b4226:	f7ff ff4f 	bl	b40c8 <_ZN5Print6printfEPKcz>
  display.display();
   b422a:	4812      	ldr	r0, [pc, #72]	; (b4274 <setup+0x190>)
   b422c:	f000 ff08 	bl	b5040 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();  
   b4230:	4810      	ldr	r0, [pc, #64]	; (b4274 <setup+0x190>)
   b4232:	f000 fe8d 	bl	b4f50 <_ZN16Adafruit_SSD130612clearDisplayEv>
pinMode(D10,OUTPUT);
   b4236:	4621      	mov	r1, r4
   b4238:	200a      	movs	r0, #10
   b423a:	f004 fb5b 	bl	b88f4 <pinMode>
pixel.begin();
   b423e:	4810      	ldr	r0, [pc, #64]	; (b4280 <setup+0x19c>)
   b4240:	f000 fa79 	bl	b4736 <_ZN17Adafruit_NeoPixel5beginEv>
pixel.show();
   b4244:	480e      	ldr	r0, [pc, #56]	; (b4280 <setup+0x19c>)
}
   b4246:	b010      	add	sp, #64	; 0x40
   b4248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
pixel.show();
   b424c:	f000 baac 	b.w	b47a8 <_ZN17Adafruit_NeoPixel4showEv>
   b4250:	f002 f96c 	bl	b652c <_ZNK8particle7BleUuid8rawBytesEv>
   b4254:	2300      	movs	r3, #0
   b4256:	9300      	str	r3, [sp, #0]
   b4258:	4602      	mov	r2, r0
   b425a:	2310      	movs	r3, #16
   b425c:	2107      	movs	r1, #7
   b425e:	e798      	b.n	b4192 <setup+0xae>
   b4260:	2003e6a0 	.word	0x2003e6a0
   b4264:	2003df34 	.word	0x2003df34
   b4268:	2003e0f4 	.word	0x2003e0f4
   b426c:	2003df90 	.word	0x2003df90
   b4270:	000b9005 	.word	0x000b9005
   b4274:	2003df9c 	.word	0x2003df9c
   b4278:	000b9131 	.word	0x000b9131
   b427c:	000b901b 	.word	0x000b901b
   b4280:	2003e0b4 	.word	0x2003e0b4

000b4284 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b4284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4288:	b089      	sub	sp, #36	; 0x24
    BLE.setScanTimeout(500);
   b428a:	f002 fb19 	bl	b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b428e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b4292:	f002 fbbd 	bl	b6a10 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    count=BLE.scan(scanResults,SCAN_RESULT_MAX);
   b4296:	f002 fb13 	bl	b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b429a:	4939      	ldr	r1, [pc, #228]	; (b4380 <loop+0xfc>)
   b429c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b4394 <loop+0x110>
   b42a0:	4c38      	ldr	r4, [pc, #224]	; (b4384 <loop+0x100>)
   b42a2:	4d39      	ldr	r5, [pc, #228]	; (b4388 <loop+0x104>)
   b42a4:	4e36      	ldr	r6, [pc, #216]	; (b4380 <loop+0xfc>)
    Serial.printf("%i devices found\n",count);
    for (int i=0; i < count; i++) {
        scanResults[i].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b42a6:	f8df b0f0 	ldr.w	fp, [pc, #240]	; b4398 <loop+0x114>
        for(j=0;j<6;j++){
   b42aa:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b439c <loop+0x118>
    count=BLE.scan(scanResults,SCAN_RESULT_MAX);
   b42ae:	2228      	movs	r2, #40	; 0x28
   b42b0:	f002 fc0a 	bl	b6ac8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   b42b4:	f889 0000 	strb.w	r0, [r9]
    Serial.printf("%i devices found\n",count);
   b42b8:	f004 f918 	bl	b84ec <_Z16_fetch_usbserialv>
   b42bc:	f899 2000 	ldrb.w	r2, [r9]
   b42c0:	4932      	ldr	r1, [pc, #200]	; (b438c <loop+0x108>)
   b42c2:	f7ff ff01 	bl	b40c8 <_ZN5Print6printfEPKcz>
    for (int i=0; i < count; i++) {
   b42c6:	2700      	movs	r7, #0
   b42c8:	46a2      	mov	sl, r4
   b42ca:	f899 3000 	ldrb.w	r3, [r9]
   b42ce:	42bb      	cmp	r3, r7
   b42d0:	dd4e      	ble.n	b4370 <loop+0xec>
        scanResults[i].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b42d2:	231f      	movs	r3, #31
   b42d4:	465a      	mov	r2, fp
   b42d6:	21ff      	movs	r1, #255	; 0xff
   b42d8:	f106 0008 	add.w	r0, r6, #8
   b42dc:	f002 f9b2 	bl	b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        for(j=0;j<6;j++){
   b42e0:	2300      	movs	r3, #0
            mac[i][j]=scanResults[i].address()[j];
   b42e2:	2206      	movs	r2, #6
        for(j=0;j<6;j++){
   b42e4:	f888 3000 	strb.w	r3, [r8]
            mac[i][j]=scanResults[i].address()[j];
   b42e8:	fb02 a207 	mla	r2, r2, r7, sl
        for(j=0;j<6;j++){
   b42ec:	f898 1000 	ldrb.w	r1, [r8]
   b42f0:	9207      	str	r2, [sp, #28]
   b42f2:	2905      	cmp	r1, #5
   b42f4:	d80f      	bhi.n	b4316 <loop+0x92>
            mac[i][j]=scanResults[i].address()[j];
   b42f6:	4630      	mov	r0, r6
   b42f8:	9106      	str	r1, [sp, #24]
   b42fa:	f002 f809 	bl	b6310 <_ZNK8particle10BleAddressixEh>
            rssi[i]=scanResults[i].rssi();
   b42fe:	f896 3020 	ldrb.w	r3, [r6, #32]
   b4302:	702b      	strb	r3, [r5, #0]
            mac[i][j]=scanResults[i].address()[j];
   b4304:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
        for(j=0;j<6;j++){
   b4308:	f898 3000 	ldrb.w	r3, [r8]
            mac[i][j]=scanResults[i].address()[j];
   b430c:	5450      	strb	r0, [r2, r1]
        for(j=0;j<6;j++){
   b430e:	3301      	adds	r3, #1
   b4310:	f888 3000 	strb.w	r3, [r8]
   b4314:	e7ea      	b.n	b42ec <loop+0x68>
        }
        if (mac[i][0]==0xFA &&mac[i][1]==0xDA){
   b4316:	7823      	ldrb	r3, [r4, #0]
   b4318:	2bfa      	cmp	r3, #250	; 0xfa
   b431a:	d124      	bne.n	b4366 <loop+0xe2>
   b431c:	7863      	ldrb	r3, [r4, #1]
   b431e:	2bda      	cmp	r3, #218	; 0xda
   b4320:	d121      	bne.n	b4366 <loop+0xe2>
            Serial.printf("FOUND=%02X:%02X:%02X:%02X:%02X:%02X,RSSI=%i\n",mac[i][0],mac[i][1],mac[i][2],mac[i][3],mac[i][4],mac[i][5],rssi[i]);
   b4322:	f004 f8e3 	bl	b84ec <_Z16_fetch_usbserialv>
   b4326:	f995 3000 	ldrsb.w	r3, [r5]
   b432a:	9304      	str	r3, [sp, #16]
   b432c:	7963      	ldrb	r3, [r4, #5]
   b432e:	9303      	str	r3, [sp, #12]
   b4330:	7923      	ldrb	r3, [r4, #4]
   b4332:	9302      	str	r3, [sp, #8]
   b4334:	78e3      	ldrb	r3, [r4, #3]
   b4336:	9301      	str	r3, [sp, #4]
   b4338:	78a3      	ldrb	r3, [r4, #2]
   b433a:	9300      	str	r3, [sp, #0]
   b433c:	7822      	ldrb	r2, [r4, #0]
   b433e:	7863      	ldrb	r3, [r4, #1]
   b4340:	4913      	ldr	r1, [pc, #76]	; (b4390 <loop+0x10c>)
   b4342:	f7ff fec1 	bl	b40c8 <_ZN5Print6printfEPKcz>
            if(rssi[i]>=-55){
   b4346:	f995 3000 	ldrsb.w	r3, [r5]
   b434a:	3337      	adds	r3, #55	; 0x37
   b434c:	db03      	blt.n	b4356 <loop+0xd2>
            digitalWrite(D10,HIGH);
   b434e:	2101      	movs	r1, #1
   b4350:	200a      	movs	r0, #10
   b4352:	f004 fae0 	bl	b8916 <digitalWrite>
          
            }
            if(rssi[i]<=-60){
   b4356:	f995 3000 	ldrsb.w	r3, [r5]
   b435a:	333b      	adds	r3, #59	; 0x3b
   b435c:	da03      	bge.n	b4366 <loop+0xe2>
              digitalWrite(D10,LOW);
   b435e:	2100      	movs	r1, #0
   b4360:	200a      	movs	r0, #10
   b4362:	f004 fad8 	bl	b8916 <digitalWrite>
    for (int i=0; i < count; i++) {
   b4366:	3701      	adds	r7, #1
   b4368:	3501      	adds	r5, #1
   b436a:	3406      	adds	r4, #6
   b436c:	3624      	adds	r6, #36	; 0x24
   b436e:	e7ac      	b.n	b42ca <loop+0x46>
            }
        }
        // Serial.printf("MAC address = %02X:%02X:%02X:%02X:%02X:%02X. RSSI = %i\n",mac[i][0],mac[i][1],mac[i][2],mac[i][3],mac[i][4],mac[i][5],rssi[i]);
    }
  delay(5000);
   b4370:	f241 3088 	movw	r0, #5000	; 0x1388
  

  }
   b4374:	b009      	add	sp, #36	; 0x24
   b4376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(5000);
   b437a:	f003 bf37 	b.w	b81ec <delay>
   b437e:	bf00      	nop
   b4380:	2003e0fc 	.word	0x2003e0fc
   b4384:	2003dfc2 	.word	0x2003dfc2
   b4388:	2003e0cc 	.word	0x2003e0cc
   b438c:	000b9027 	.word	0x000b9027
   b4390:	000b9039 	.word	0x000b9039
   b4394:	2003df8f 	.word	0x2003df8f
   b4398:	2003df70 	.word	0x2003df70
   b439c:	2003dfc1 	.word	0x2003dfc1

000b43a0 <_Z9pixelFilliii>:
   pixelFill(startPixel,endPixel,color1);
  pixelFill(startPixel,endPixel,color2);
  pixel.clear();
}
}
void pixelFill(int startPix,int endPix,int color){
   b43a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (pixelCount=startPix; pixelCount<=endPix; pixelCount=pixelCount+2){
   b43a4:	4c0e      	ldr	r4, [pc, #56]	; (b43e0 <_Z9pixelFilliii+0x40>)
      pixel.setPixelColor(pixelCount,color1);
   b43a6:	f8df 8044 	ldr.w	r8, [pc, #68]	; b43ec <_Z9pixelFilliii+0x4c>
   b43aa:	4e0e      	ldr	r6, [pc, #56]	; (b43e4 <_Z9pixelFilliii+0x44>)
      pixel.setPixelColor(pixelCount+1,color2); 
   b43ac:	4f0e      	ldr	r7, [pc, #56]	; (b43e8 <_Z9pixelFilliii+0x48>)
    for (pixelCount=startPix; pixelCount<=endPix; pixelCount=pixelCount+2){
   b43ae:	6020      	str	r0, [r4, #0]
void pixelFill(int startPix,int endPix,int color){
   b43b0:	460d      	mov	r5, r1
    for (pixelCount=startPix; pixelCount<=endPix; pixelCount=pixelCount+2){
   b43b2:	6821      	ldr	r1, [r4, #0]
   b43b4:	42a9      	cmp	r1, r5
   b43b6:	dc10      	bgt.n	b43da <_Z9pixelFilliii+0x3a>
      pixel.setPixelColor(pixelCount,color1);
   b43b8:	f8d8 2000 	ldr.w	r2, [r8]
   b43bc:	b289      	uxth	r1, r1
   b43be:	4630      	mov	r0, r6
   b43c0:	f000 fb9e 	bl	b4b00 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      pixel.setPixelColor(pixelCount+1,color2); 
   b43c4:	6823      	ldr	r3, [r4, #0]
   b43c6:	683a      	ldr	r2, [r7, #0]
   b43c8:	3301      	adds	r3, #1
   b43ca:	b299      	uxth	r1, r3
   b43cc:	4630      	mov	r0, r6
   b43ce:	f000 fb97 	bl	b4b00 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for (pixelCount=startPix; pixelCount<=endPix; pixelCount=pixelCount+2){
   b43d2:	6823      	ldr	r3, [r4, #0]
   b43d4:	3302      	adds	r3, #2
   b43d6:	6023      	str	r3, [r4, #0]
   b43d8:	e7eb      	b.n	b43b2 <_Z9pixelFilliii+0x12>
    }
   b43da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b43de:	bf00      	nop
   b43e0:	2003e0c8 	.word	0x2003e0c8
   b43e4:	2003e0b4 	.word	0x2003e0b4
   b43e8:	2003daa0 	.word	0x2003daa0
   b43ec:	2003da9c 	.word	0x2003da9c

000b43f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len,const BlePeerDevice& peer, void* context) {
   b43f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b43f4:	b092      	sub	sp, #72	; 0x48
   b43f6:	4614      	mov	r4, r2
   b43f8:	460e      	mov	r6, r1
   b43fa:	4605      	mov	r5, r0
    Serial.printf("received data from:%02X:%02X:%02X:%02X:%02X:%02X\n", peer.address()
   b43fc:	f004 f876 	bl	b84ec <_Z16_fetch_usbserialv>
   b4400:	4621      	mov	r1, r4
   b4402:	4607      	mov	r7, r0
   b4404:	a806      	add	r0, sp, #24
   b4406:	f002 f9f1 	bl	b67ec <_ZNK8particle13BlePeerDevice7addressEv>
    [0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   b440a:	2100      	movs	r1, #0
   b440c:	a806      	add	r0, sp, #24
   b440e:	f001 ff7f 	bl	b6310 <_ZNK8particle10BleAddressixEh>
   b4412:	4621      	mov	r1, r4
   b4414:	9005      	str	r0, [sp, #20]
   b4416:	a808      	add	r0, sp, #32
   b4418:	f002 f9e8 	bl	b67ec <_ZNK8particle13BlePeerDevice7addressEv>
   b441c:	2101      	movs	r1, #1
   b441e:	a808      	add	r0, sp, #32
   b4420:	f001 ff76 	bl	b6310 <_ZNK8particle10BleAddressixEh>
   b4424:	4621      	mov	r1, r4
   b4426:	9004      	str	r0, [sp, #16]
   b4428:	a80a      	add	r0, sp, #40	; 0x28
   b442a:	f002 f9df 	bl	b67ec <_ZNK8particle13BlePeerDevice7addressEv>
   b442e:	2102      	movs	r1, #2
   b4430:	a80a      	add	r0, sp, #40	; 0x28
   b4432:	f001 ff6d 	bl	b6310 <_ZNK8particle10BleAddressixEh>
   b4436:	4621      	mov	r1, r4
   b4438:	4680      	mov	r8, r0
   b443a:	a80c      	add	r0, sp, #48	; 0x30
   b443c:	f002 f9d6 	bl	b67ec <_ZNK8particle13BlePeerDevice7addressEv>
   b4440:	2103      	movs	r1, #3
   b4442:	a80c      	add	r0, sp, #48	; 0x30
   b4444:	f001 ff64 	bl	b6310 <_ZNK8particle10BleAddressixEh>
   b4448:	4621      	mov	r1, r4
   b444a:	4681      	mov	r9, r0
   b444c:	a80e      	add	r0, sp, #56	; 0x38
   b444e:	f002 f9cd 	bl	b67ec <_ZNK8particle13BlePeerDevice7addressEv>
   b4452:	2104      	movs	r1, #4
   b4454:	a80e      	add	r0, sp, #56	; 0x38
   b4456:	f001 ff5b 	bl	b6310 <_ZNK8particle10BleAddressixEh>
   b445a:	4621      	mov	r1, r4
   b445c:	4682      	mov	sl, r0
   b445e:	a810      	add	r0, sp, #64	; 0x40
   b4460:	f002 f9c4 	bl	b67ec <_ZNK8particle13BlePeerDevice7addressEv>
   b4464:	2105      	movs	r1, #5
   b4466:	a810      	add	r0, sp, #64	; 0x40
   b4468:	f001 ff52 	bl	b6310 <_ZNK8particle10BleAddressixEh>
    Serial.printf("received data from:%02X:%02X:%02X:%02X:%02X:%02X\n", peer.address()
   b446c:	e9cd 8900 	strd	r8, r9, [sp]
   b4470:	e9cd a002 	strd	sl, r0, [sp, #8]
   b4474:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b4478:	4638      	mov	r0, r7
   b447a:	4932      	ldr	r1, [pc, #200]	; (b4544 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
        Serial.printf("%02X",data[i]);
   b447c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b456c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17c>
   b4480:	4f31      	ldr	r7, [pc, #196]	; (b4548 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
    Serial.printf("received data from:%02X:%02X:%02X:%02X:%02X:%02X\n", peer.address()
   b4482:	f7ff fe21 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b4486:	2400      	movs	r4, #0
    for (h=0; h<len; h++) {
   b4488:	b2e3      	uxtb	r3, r4
   b448a:	42b3      	cmp	r3, r6
   b448c:	f104 0401 	add.w	r4, r4, #1
   b4490:	d208      	bcs.n	b44a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb4>
        Serial.printf("%02X",data[i]);
   b4492:	f004 f82b 	bl	b84ec <_Z16_fetch_usbserialv>
   b4496:	f898 3000 	ldrb.w	r3, [r8]
   b449a:	4639      	mov	r1, r7
   b449c:	5cea      	ldrb	r2, [r5, r3]
   b449e:	f7ff fe13 	bl	b40c8 <_ZN5Print6printfEPKcz>
    for (h=0; h<len; h++) {
   b44a2:	e7f1      	b.n	b4488 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>
Serial.printf("\n");
   b44a4:	f004 f822 	bl	b84ec <_Z16_fetch_usbserialv>
   b44a8:	4928      	ldr	r1, [pc, #160]	; (b454c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
OnorOff=atoi((char*)data);
   b44aa:	4e29      	ldr	r6, [pc, #164]	; (b4550 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
   b44ac:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b4570 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x180>
   b44b0:	4c28      	ldr	r4, [pc, #160]	; (b4554 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b44b2:	4f29      	ldr	r7, [pc, #164]	; (b4558 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>)
Serial.printf("\n");
   b44b4:	f7ff fe08 	bl	b40c8 <_ZN5Print6printfEPKcz>
Serial.printf("Message: %s\n",(char*)data);
   b44b8:	f004 f818 	bl	b84ec <_Z16_fetch_usbserialv>
   b44bc:	462a      	mov	r2, r5
   b44be:	4927      	ldr	r1, [pc, #156]	; (b455c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x16c>)
   b44c0:	f7ff fe02 	bl	b40c8 <_ZN5Print6printfEPKcz>
OnorOff=atoi((char*)data);
   b44c4:	4628      	mov	r0, r5
   b44c6:	f004 fbff 	bl	b8cc8 <atoi>
   b44ca:	2800      	cmp	r0, #0
   b44cc:	bf14      	ite	ne
   b44ce:	2301      	movne	r3, #1
   b44d0:	2300      	moveq	r3, #0
   b44d2:	4d23      	ldr	r5, [pc, #140]	; (b4560 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x170>)
   b44d4:	7033      	strb	r3, [r6, #0]
if (OnorOff==1){
   b44d6:	d114      	bne.n	b4502 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x112>
  digitalWrite(D10,LOW);
   b44d8:	2100      	movs	r1, #0
   b44da:	200a      	movs	r0, #10
   b44dc:	f004 fa1b 	bl	b8916 <digitalWrite>
   pixelFill(startPixel,endPixel,color1);
   b44e0:	f8d8 2000 	ldr.w	r2, [r8]
   b44e4:	6829      	ldr	r1, [r5, #0]
   b44e6:	6820      	ldr	r0, [r4, #0]
   b44e8:	f7ff ff5a 	bl	b43a0 <_Z9pixelFilliii>
  pixelFill(startPixel,endPixel,color2);
   b44ec:	6820      	ldr	r0, [r4, #0]
   b44ee:	683a      	ldr	r2, [r7, #0]
   b44f0:	6829      	ldr	r1, [r5, #0]
   b44f2:	f7ff ff55 	bl	b43a0 <_Z9pixelFilliii>
  pixel.clear();
   b44f6:	481b      	ldr	r0, [pc, #108]	; (b4564 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x174>)
}
   b44f8:	b012      	add	sp, #72	; 0x48
   b44fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pixel.clear();
   b44fe:	f000 bb42 	b.w	b4b86 <_ZN17Adafruit_NeoPixel5clearEv>
  digitalWrite(D10,HIGH);
   b4502:	2101      	movs	r1, #1
   b4504:	200a      	movs	r0, #10
   b4506:	f004 fa06 	bl	b8916 <digitalWrite>
  Serial.printf("Turn on button%i\n",OnorOff);
   b450a:	f003 ffef 	bl	b84ec <_Z16_fetch_usbserialv>
   b450e:	7832      	ldrb	r2, [r6, #0]
   b4510:	4915      	ldr	r1, [pc, #84]	; (b4568 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x178>)
   b4512:	f7ff fdd9 	bl	b40c8 <_ZN5Print6printfEPKcz>
  pixel.clear();
   b4516:	4813      	ldr	r0, [pc, #76]	; (b4564 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x174>)
   b4518:	f000 fb35 	bl	b4b86 <_ZN17Adafruit_NeoPixel5clearEv>
  pixelFill(startPixel,endPixel,color1);
   b451c:	f8d8 2000 	ldr.w	r2, [r8]
   b4520:	6829      	ldr	r1, [r5, #0]
   b4522:	6820      	ldr	r0, [r4, #0]
   b4524:	f7ff ff3c 	bl	b43a0 <_Z9pixelFilliii>
  pixelFill(startPixel,endPixel,color2);
   b4528:	683a      	ldr	r2, [r7, #0]
   b452a:	6829      	ldr	r1, [r5, #0]
   b452c:	6820      	ldr	r0, [r4, #0]
   b452e:	f7ff ff37 	bl	b43a0 <_Z9pixelFilliii>
  pixel.show();
   b4532:	480c      	ldr	r0, [pc, #48]	; (b4564 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x174>)
   b4534:	f000 f938 	bl	b47a8 <_ZN17Adafruit_NeoPixel4showEv>
if(OnorOff==0){
   b4538:	7833      	ldrb	r3, [r6, #0]
   b453a:	2b00      	cmp	r3, #0
   b453c:	d0cc      	beq.n	b44d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe8>
}
   b453e:	b012      	add	sp, #72	; 0x48
   b4540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4544:	000b9066 	.word	0x000b9066
   b4548:	000b9098 	.word	0x000b9098
   b454c:	000b9096 	.word	0x000b9096
   b4550:	2003df24 	.word	0x2003df24
   b4554:	2003e69c 	.word	0x2003e69c
   b4558:	2003daa0 	.word	0x2003daa0
   b455c:	000b909d 	.word	0x000b909d
   b4560:	2003daa4 	.word	0x2003daa4
   b4564:	2003e0b4 	.word	0x2003e0b4
   b4568:	000b90aa 	.word	0x000b90aa
   b456c:	2003dfc0 	.word	0x2003dfc0
   b4570:	2003da9c 	.word	0x2003da9c

000b4574 <_GLOBAL__sub_I_txBuf>:
   b4574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4578:	4d4f      	ldr	r5, [pc, #316]	; (b46b8 <_GLOBAL__sub_I_txBuf+0x144>)
   b457a:	b099      	sub	sp, #100	; 0x64
   b457c:	2428      	movs	r4, #40	; 0x28


class BleScanResult {
public:
    BleScanResult()
            : rssi_(BLE_RSSI_INVALID) {
   b457e:	267f      	movs	r6, #127	; 0x7f
   b4580:	4628      	mov	r0, r5
   b4582:	f001 feeb 	bl	b635c <_ZN8particle10BleAddressC1Ev>
   b4586:	f105 0008 	add.w	r0, r5, #8
   b458a:	f002 fe7a 	bl	b7282 <_ZN8particle18BleAdvertisingDataC1Ev>
   b458e:	f105 0014 	add.w	r0, r5, #20
   b4592:	f002 fe76 	bl	b7282 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_MAX];
   b4596:	3c01      	subs	r4, #1
   b4598:	f885 6020 	strb.w	r6, [r5, #32]
   b459c:	f105 0524 	add.w	r5, r5, #36	; 0x24
   b45a0:	d1ee      	bne.n	b4580 <_GLOBAL__sub_I_txBuf+0xc>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b45a2:	4946      	ldr	r1, [pc, #280]	; (b46bc <_GLOBAL__sub_I_txBuf+0x148>)
   b45a4:	4846      	ldr	r0, [pc, #280]	; (b46c0 <_GLOBAL__sub_I_txBuf+0x14c>)
   b45a6:	4d47      	ldr	r5, [pc, #284]	; (b46c4 <_GLOBAL__sub_I_txBuf+0x150>)
   b45a8:	f8df 9114 	ldr.w	r9, [pc, #276]	; b46c0 <_GLOBAL__sub_I_txBuf+0x14c>
   b45ac:	f002 f83e 	bl	b662c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b45b0:	4945      	ldr	r1, [pc, #276]	; (b46c8 <_GLOBAL__sub_I_txBuf+0x154>)
   b45b2:	4846      	ldr	r0, [pc, #280]	; (b46cc <_GLOBAL__sub_I_txBuf+0x158>)
   b45b4:	f002 f83a 	bl	b662c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b45b8:	4945      	ldr	r1, [pc, #276]	; (b46d0 <_GLOBAL__sub_I_txBuf+0x15c>)
   b45ba:	4842      	ldr	r0, [pc, #264]	; (b46c4 <_GLOBAL__sub_I_txBuf+0x150>)
   b45bc:	f002 f836 	bl	b662c <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b45c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b45c2:	f10d 0b10 	add.w	fp, sp, #16
   b45c6:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
   b45ca:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b45ce:	682f      	ldr	r7, [r5, #0]
   b45d0:	f8cb 7000 	str.w	r7, [fp]
   b45d4:	f10d 0824 	add.w	r8, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b45d8:	ad04      	add	r5, sp, #16
   b45da:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   b45de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b45e0:	ae0e      	add	r6, sp, #56	; 0x38
   b45e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b45e4:	46ca      	mov	sl, r9
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b45e6:	f8df c10c 	ldr.w	ip, [pc, #268]	; b46f4 <_GLOBAL__sub_I_txBuf+0x180>
   b45ea:	f85a e910 	ldr.w	lr, [sl], #-16
   b45ee:	f8c8 e000 	str.w	lr, [r8]
   b45f2:	6037      	str	r7, [r6, #0]
        BleUuid sUuid(svcUuid);
   b45f4:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b45f6:	e9cc 4400 	strd	r4, r4, [ip]
   b45fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b45fc:	ad13      	add	r5, sp, #76	; 0x4c
   b45fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4600:	af13      	add	r7, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
   b4602:	f8c5 e000 	str.w	lr, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4606:	ab0e      	add	r3, sp, #56	; 0x38
   b4608:	4660      	mov	r0, ip
   b460a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b460e:	4931      	ldr	r1, [pc, #196]	; (b46d4 <_GLOBAL__sub_I_txBuf+0x160>)
   b4610:	9700      	str	r7, [sp, #0]
   b4612:	f04f 0210 	mov.w	r2, #16
   b4616:	f003 f9c7 	bl	b79a8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b461a:	f8df c0b0 	ldr.w	ip, [pc, #176]	; b46cc <_GLOBAL__sub_I_txBuf+0x158>
   b461e:	f8d9 9000 	ldr.w	r9, [r9]
   b4622:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4626:	f10d 0e10 	add.w	lr, sp, #16
   b462a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b462e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b4632:	f8dc e000 	ldr.w	lr, [ip]
   b4636:	f8cb e000 	str.w	lr, [fp]
   b463a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b463e:	f10d 0a10 	add.w	sl, sp, #16
   b4642:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4646:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b464a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   b464e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4652:	f8c8 9000 	str.w	r9, [r8]
      : _M_ptr(0), _M_refcount()
   b4656:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b46f8 <_GLOBAL__sub_I_txBuf+0x184>
   b465a:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b465e:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4662:	e9c8 4400 	strd	r4, r4, [r8]
   b4666:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b466a:	463e      	mov	r6, r7
   b466c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b466e:	4b1a      	ldr	r3, [pc, #104]	; (b46d8 <_GLOBAL__sub_I_txBuf+0x164>)
        BleUuid sUuid(svcUuid);
   b4670:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4674:	4919      	ldr	r1, [pc, #100]	; (b46dc <_GLOBAL__sub_I_txBuf+0x168>)
   b4676:	9402      	str	r4, [sp, #8]
   b4678:	e9cd 7300 	strd	r7, r3, [sp]
   b467c:	f04f 0204 	mov.w	r2, #4
   b4680:	ab0e      	add	r3, sp, #56	; 0x38
   b4682:	4640      	mov	r0, r8
   b4684:	f003 f990 	bl	b79a8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
BleAdvertisingData data;
   b4688:	4815      	ldr	r0, [pc, #84]	; (b46e0 <_GLOBAL__sub_I_txBuf+0x16c>)
   b468a:	f002 fdfa 	bl	b7282 <_ZN8particle18BleAdvertisingDataC1Ev>
Adafruit_NeoPixel pixel(PIXELNUMBER,PIXELPIN,WS2812B);
   b468e:	2302      	movs	r3, #2
   b4690:	2210      	movs	r2, #16
   b4692:	210f      	movs	r1, #15
   b4694:	4813      	ldr	r0, [pc, #76]	; (b46e4 <_GLOBAL__sub_I_txBuf+0x170>)
   b4696:	f000 f875 	bl	b4784 <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_SSD1306 display(OLED_RESET);
   b469a:	2104      	movs	r1, #4
   b469c:	4812      	ldr	r0, [pc, #72]	; (b46e8 <_GLOBAL__sub_I_txBuf+0x174>)
   b469e:	f000 fc41 	bl	b4f24 <_ZN16Adafruit_SSD1306C1Ea>
              error_(SYSTEM_ERROR_NONE) {
   b46a2:	4b12      	ldr	r3, [pc, #72]	; (b46ec <_GLOBAL__sub_I_txBuf+0x178>)
    SleepResult() {}
   b46a4:	4a12      	ldr	r2, [pc, #72]	; (b46f0 <_GLOBAL__sub_I_txBuf+0x17c>)
   b46a6:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b46a8:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   b46aa:	e9c3 4400 	strd	r4, r4, [r3]
   b46ae:	b019      	add	sp, #100	; 0x64
   b46b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        set_system_mode(mode);
   b46b4:	f001 ba26 	b.w	b5b04 <set_system_mode>
   b46b8:	2003e0fc 	.word	0x2003e0fc
   b46bc:	000b90bc 	.word	0x000b90bc
   b46c0:	2003df34 	.word	0x2003df34
   b46c4:	2003df5c 	.word	0x2003df5c
   b46c8:	000b90e1 	.word	0x000b90e1
   b46cc:	2003df48 	.word	0x2003df48
   b46d0:	000b9106 	.word	0x000b9106
   b46d4:	000b912b 	.word	0x000b912b
   b46d8:	000b43f1 	.word	0x000b43f1
   b46dc:	000b912e 	.word	0x000b912e
   b46e0:	2003df90 	.word	0x2003df90
   b46e4:	2003e0b4 	.word	0x2003e0b4
   b46e8:	2003df9c 	.word	0x2003df9c
   b46ec:	2003df28 	.word	0x2003df28
   b46f0:	ffff0000 	.word	0xffff0000
   b46f4:	2003e6a0 	.word	0x2003e6a0
   b46f8:	2003e0f4 	.word	0x2003e0f4

000b46fc <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b46fc:	b538      	push	{r3, r4, r5, lr}
   b46fe:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4700:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4702:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4704:	b108      	cbz	r0, b470a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4706:	f001 fa99 	bl	b5c3c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b470a:	79a3      	ldrb	r3, [r4, #6]
   b470c:	2b06      	cmp	r3, #6
   b470e:	bf0c      	ite	eq
   b4710:	2004      	moveq	r0, #4
   b4712:	2003      	movne	r0, #3
   b4714:	fb10 f005 	smulbb	r0, r0, r5
   b4718:	b280      	uxth	r0, r0
   b471a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b471c:	f001 fa86 	bl	b5c2c <malloc>
   b4720:	60e0      	str	r0, [r4, #12]
   b4722:	b128      	cbz	r0, b4730 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4724:	88a2      	ldrh	r2, [r4, #4]
   b4726:	2100      	movs	r1, #0
   b4728:	f004 fb0a 	bl	b8d40 <memset>
    numLEDs = n;
   b472c:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b472e:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4730:	80a0      	strh	r0, [r4, #4]
   b4732:	8060      	strh	r0, [r4, #2]
}
   b4734:	e7fb      	b.n	b472e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4736 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4736:	b510      	push	{r4, lr}
   b4738:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b473a:	2101      	movs	r1, #1
   b473c:	79c0      	ldrb	r0, [r0, #7]
   b473e:	f004 f8d9 	bl	b88f4 <pinMode>
  digitalWrite(pin, LOW);
   b4742:	79e0      	ldrb	r0, [r4, #7]
   b4744:	2100      	movs	r1, #0
   b4746:	f004 f8e6 	bl	b8916 <digitalWrite>
  begun = true;
   b474a:	2301      	movs	r3, #1
   b474c:	7023      	strb	r3, [r4, #0]
}
   b474e:	bd10      	pop	{r4, pc}

000b4750 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4750:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4752:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4754:	4605      	mov	r5, r0
   b4756:	460c      	mov	r4, r1
    if (begun) {
   b4758:	b11b      	cbz	r3, b4762 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b475a:	79c0      	ldrb	r0, [r0, #7]
   b475c:	2100      	movs	r1, #0
   b475e:	f004 f8c9 	bl	b88f4 <pinMode>
    }
    pin = p;
    if (begun) {
   b4762:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4764:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4766:	b15b      	cbz	r3, b4780 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4768:	b2a0      	uxth	r0, r4
   b476a:	2101      	movs	r1, #1
   b476c:	9001      	str	r0, [sp, #4]
   b476e:	f004 f8c1 	bl	b88f4 <pinMode>
        digitalWrite(p, LOW);
   b4772:	9801      	ldr	r0, [sp, #4]
   b4774:	2100      	movs	r1, #0
    }
}
   b4776:	b003      	add	sp, #12
   b4778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b477c:	f004 b8cb 	b.w	b8916 <digitalWrite>
}
   b4780:	b003      	add	sp, #12
   b4782:	bd30      	pop	{r4, r5, pc}

000b4784 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4784:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4786:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4788:	4604      	mov	r4, r0
   b478a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b478c:	7183      	strb	r3, [r0, #6]
   b478e:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4792:	7005      	strb	r5, [r0, #0]
   b4794:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4796:	f7ff ffb1 	bl	b46fc <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b479a:	4620      	mov	r0, r4
   b479c:	4631      	mov	r1, r6
   b479e:	f7ff ffd7 	bl	b4750 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b47a2:	4620      	mov	r0, r4
   b47a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b47a8 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b47a8:	68c3      	ldr	r3, [r0, #12]
   b47aa:	2b00      	cmp	r3, #0
   b47ac:	f000 81a4 	beq.w	b4af8 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b47b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47b4:	7983      	ldrb	r3, [r0, #6]
   b47b6:	3b02      	subs	r3, #2
   b47b8:	b2db      	uxtb	r3, r3
   b47ba:	2b04      	cmp	r3, #4
   b47bc:	bf9c      	itt	ls
   b47be:	4abf      	ldrls	r2, [pc, #764]	; (b4abc <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b47c0:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b47c4:	b085      	sub	sp, #20
   b47c6:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b47c8:	bf88      	it	hi
   b47ca:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b47cc:	f000 ffc0 	bl	b5750 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b47d0:	692b      	ldr	r3, [r5, #16]
   b47d2:	1ac0      	subs	r0, r0, r3
   b47d4:	42a0      	cmp	r0, r4
   b47d6:	d3f9      	bcc.n	b47cc <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b47d8:	4cb9      	ldr	r4, [pc, #740]	; (b4ac0 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b47da:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b47dc:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47e0:	b91b      	cbnz	r3, b47ea <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47e2:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b47e6:	2b00      	cmp	r3, #0
   b47e8:	db7e      	blt.n	b48e8 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b47ea:	4cb6      	ldr	r4, [pc, #728]	; (b4ac4 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b47ec:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47f0:	b923      	cbnz	r3, b47fc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47f2:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b47f6:	2b00      	cmp	r3, #0
   b47f8:	f2c0 816e 	blt.w	b4ad8 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b47fc:	4cb2      	ldr	r4, [pc, #712]	; (b4ac8 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b47fe:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4802:	2b00      	cmp	r3, #0
   b4804:	f000 8144 	beq.w	b4a90 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4808:	79eb      	ldrb	r3, [r5, #7]
   b480a:	4ab0      	ldr	r2, [pc, #704]	; (b4acc <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b480c:	4cb0      	ldr	r4, [pc, #704]	; (b4ad0 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b480e:	6812      	ldr	r2, [r2, #0]
   b4810:	0119      	lsls	r1, r3, #4
   b4812:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4816:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4818:	49ae      	ldr	r1, [pc, #696]	; (b4ad4 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b481a:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b481c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4820:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4824:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4828:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b482a:	f003 031f 	and.w	r3, r3, #31
   b482e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4832:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4834:	433a      	orrs	r2, r7
   b4836:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4838:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b483a:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b483e:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4842:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4844:	2900      	cmp	r1, #0
   b4846:	d044      	beq.n	b48d2 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4848:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b484c:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b484e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4852:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4856:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4858:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b485a:	6863      	ldr	r3, [r4, #4]
   b485c:	1a9b      	subs	r3, r3, r2
   b485e:	2b46      	cmp	r3, #70	; 0x46
   b4860:	d9fb      	bls.n	b485a <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4862:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4864:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4868:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b486c:	ea43 0307 	orr.w	r3, r3, r7
   b4870:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4874:	d02f      	beq.n	b48d6 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4876:	6863      	ldr	r3, [r4, #4]
   b4878:	1a9b      	subs	r3, r3, r2
   b487a:	2b28      	cmp	r3, #40	; 0x28
   b487c:	d9fb      	bls.n	b4876 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b487e:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4882:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4884:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4888:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b488c:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4890:	d1e3      	bne.n	b485a <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4892:	88ab      	ldrh	r3, [r5, #4]
   b4894:	f10e 0e01 	add.w	lr, lr, #1
   b4898:	fa1f fe8e 	uxth.w	lr, lr
   b489c:	4573      	cmp	r3, lr
   b489e:	d8d8      	bhi.n	b4852 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b48a0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b48a4:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b48a8:	6863      	ldr	r3, [r4, #4]
   b48aa:	1a9b      	subs	r3, r3, r2
   b48ac:	2b46      	cmp	r3, #70	; 0x46
   b48ae:	d9fb      	bls.n	b48a8 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b48b0:	6863      	ldr	r3, [r4, #4]
   b48b2:	eba3 0909 	sub.w	r9, r3, r9
   b48b6:	4589      	cmp	r9, r1
   b48b8:	f0c0 80e4 	bcc.w	b4a84 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b48bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b48c0:	f000 ff3e 	bl	b5740 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b48c4:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b48c6:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b48ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b48ce:	2900      	cmp	r1, #0
   b48d0:	d1ba      	bne.n	b4848 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b48d2:	460a      	mov	r2, r1
   b48d4:	e7e8      	b.n	b48a8 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b48d6:	6863      	ldr	r3, [r4, #4]
   b48d8:	1a9b      	subs	r3, r3, r2
   b48da:	2b11      	cmp	r3, #17
   b48dc:	d8cf      	bhi.n	b487e <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b48de:	6863      	ldr	r3, [r4, #4]
   b48e0:	1a9b      	subs	r3, r3, r2
   b48e2:	2b11      	cmp	r3, #17
   b48e4:	d9f7      	bls.n	b48d6 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b48e6:	e7ca      	b.n	b487e <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48e8:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48ec:	2b00      	cmp	r3, #0
   b48ee:	f6bf af7c 	bge.w	b47ea <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48f2:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48f6:	2b00      	cmp	r3, #0
   b48f8:	f6bf af77 	bge.w	b47ea <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b48fc:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4900:	2b00      	cmp	r3, #0
   b4902:	f6bf af72 	bge.w	b47ea <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4906:	0136      	lsls	r6, r6, #4
   b4908:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b490a:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b490c:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b490e:	f001 f98d 	bl	b5c2c <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4912:	2800      	cmp	r0, #0
   b4914:	f43f af78 	beq.w	b4808 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4918:	88ab      	ldrh	r3, [r5, #4]
   b491a:	2b00      	cmp	r3, #0
   b491c:	f000 80ed 	beq.w	b4afa <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4920:	68ea      	ldr	r2, [r5, #12]
   b4922:	3b01      	subs	r3, #1
   b4924:	fa12 f783 	uxtah	r7, r2, r3
   b4928:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b492c:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b492e:	f248 0206 	movw	r2, #32774	; 0x8006
   b4932:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4936:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b493a:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b493e:	bf0c      	ite	eq
   b4940:	4693      	moveq	fp, r2
   b4942:	468b      	movne	fp, r1
   b4944:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4948:	bf0c      	ite	eq
   b494a:	4616      	moveq	r6, r2
   b494c:	460e      	movne	r6, r1
   b494e:	f01c 0f20 	tst.w	ip, #32
   b4952:	bf0c      	ite	eq
   b4954:	4690      	moveq	r8, r2
   b4956:	4688      	movne	r8, r1
        pos++;
   b4958:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b495c:	f8cd 8008 	str.w	r8, [sp, #8]
   b4960:	9601      	str	r6, [sp, #4]
        pos++;
   b4962:	f103 0802 	add.w	r8, r3, #2
   b4966:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b496a:	9e01      	ldr	r6, [sp, #4]
   b496c:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4970:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4974:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4978:	9e02      	ldr	r6, [sp, #8]
   b497a:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b497e:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4982:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4986:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b498a:	bf0c      	ite	eq
   b498c:	4693      	moveq	fp, r2
   b498e:	468b      	movne	fp, r1
   b4990:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4994:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4998:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b499c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49a0:	bf0c      	ite	eq
   b49a2:	4693      	moveq	fp, r2
   b49a4:	468b      	movne	fp, r1
   b49a6:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b49aa:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49ae:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b49b2:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49b6:	bf0c      	ite	eq
   b49b8:	4693      	moveq	fp, r2
   b49ba:	468b      	movne	fp, r1
   b49bc:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b49c0:	f103 0a08 	add.w	sl, r3, #8
   b49c4:	f103 0806 	add.w	r8, r3, #6
   b49c8:	3307      	adds	r3, #7
   b49ca:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49cc:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b49d0:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49d4:	bf0c      	ite	eq
   b49d6:	4693      	moveq	fp, r2
   b49d8:	468b      	movne	fp, r1
        pos++;
   b49da:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49de:	f01c 0f01 	tst.w	ip, #1
   b49e2:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b49e6:	bf15      	itete	ne
   b49e8:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b49ec:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b49f0:	fa1f f38a 	uxthne.w	r3, sl
   b49f4:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b49f8:	4577      	cmp	r7, lr
   b49fa:	d19c      	bne.n	b4936 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b49fc:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b49fe:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a00:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a02:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a04:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a06:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a08:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4a0c:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4a0e:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a10:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4a12:	4b2e      	ldr	r3, [pc, #184]	; (b4acc <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4a14:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4a16:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4a18:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4a1a:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4a1c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4a20:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4a24:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4a28:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4a2c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4a30:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4a34:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4a38:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4a3c:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4a40:	79eb      	ldrb	r3, [r5, #7]
   b4a42:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4a46:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4a48:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4a4a:	5cfe      	ldrb	r6, [r7, r3]
   b4a4c:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4a50:	f003 031f 	and.w	r3, r3, #31
   b4a54:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4a58:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4a5c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4a60:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4a64:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4a66:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4a6a:	2b00      	cmp	r3, #0
   b4a6c:	d0fb      	beq.n	b4a66 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4a6e:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4a70:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4a74:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4a78:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4a7c:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4a80:	f001 f8dc 	bl	b5c3c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4a84:	f000 fe64 	bl	b5750 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4a88:	6128      	str	r0, [r5, #16]
}
   b4a8a:	b005      	add	sp, #20
   b4a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a90:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4a94:	2b00      	cmp	r3, #0
   b4a96:	f6bf aeb7 	bge.w	b4808 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a9a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a9e:	2b00      	cmp	r3, #0
   b4aa0:	f6bf aeb2 	bge.w	b4808 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4aa4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4aa8:	2b00      	cmp	r3, #0
   b4aaa:	f6bf aead 	bge.w	b4808 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4aae:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ab2:	2b00      	cmp	r3, #0
   b4ab4:	f6bf aea8 	bge.w	b4808 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4ab8:	e725      	b.n	b4906 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4aba:	bf00      	nop
   b4abc:	000b9578 	.word	0x000b9578
   b4ac0:	4001c000 	.word	0x4001c000
   b4ac4:	40021000 	.word	0x40021000
   b4ac8:	40022000 	.word	0x40022000
   b4acc:	2003e6a8 	.word	0x2003e6a8
   b4ad0:	e0001000 	.word	0xe0001000
   b4ad4:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ad8:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4adc:	2b00      	cmp	r3, #0
   b4ade:	f6bf ae8d 	bge.w	b47fc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ae2:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ae6:	2b00      	cmp	r3, #0
   b4ae8:	f6bf ae88 	bge.w	b47fc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4aec:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4af0:	2b00      	cmp	r3, #0
   b4af2:	f6bf ae83 	bge.w	b47fc <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4af6:	e706      	b.n	b4906 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4af8:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4afa:	2304      	movs	r3, #4
   b4afc:	2102      	movs	r1, #2
   b4afe:	e783      	b.n	b4a08 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4b00 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4b00:	8843      	ldrh	r3, [r0, #2]
   b4b02:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4b04:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4b06:	d92d      	bls.n	b4b64 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4b08:	7a06      	ldrb	r6, [r0, #8]
   b4b0a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4b0e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4b12:	b2d5      	uxtb	r5, r2
   b4b14:	b13e      	cbz	r6, b4b26 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4b16:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4b18:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4b1a:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4b1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4b20:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4b24:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4b26:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4b2a:	68c7      	ldr	r7, [r0, #12]
   b4b2c:	f1bc 0f06 	cmp.w	ip, #6
   b4b30:	bf0c      	ite	eq
   b4b32:	2604      	moveq	r6, #4
   b4b34:	2603      	movne	r6, #3
   b4b36:	434e      	muls	r6, r1
   b4b38:	f1ac 0c02 	sub.w	ip, ip, #2
   b4b3c:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4b3e:	f1bc 0f06 	cmp.w	ip, #6
   b4b42:	d81d      	bhi.n	b4b80 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4b44:	e8df f00c 	tbb	[pc, ip]
   b4b48:	04081c04 	.word	0x04081c04
   b4b4c:	040f      	.short	0x040f
   b4b4e:	04          	.byte	0x04
   b4b4f:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4b50:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4b52:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4b54:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4b56:	e005      	b.n	b4b64 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4b58:	2bfe      	cmp	r3, #254	; 0xfe
   b4b5a:	bf28      	it	cs
   b4b5c:	23fe      	movcs	r3, #254	; 0xfe
   b4b5e:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4b60:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4b62:	708c      	strb	r4, [r1, #2]
}
   b4b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4b66:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4b68:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4b6a:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4b6c:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4b6e:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4b70:	b913      	cbnz	r3, b4b78 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4b72:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4b74:	70ca      	strb	r2, [r1, #3]
        } break;
   b4b76:	e7f5      	b.n	b4b64 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4b78:	435a      	muls	r2, r3
   b4b7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4b7e:	e7f9      	b.n	b4b74 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4b80:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4b82:	704c      	strb	r4, [r1, #1]
   b4b84:	e7e6      	b.n	b4b54 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4b86 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b4b86:	8882      	ldrh	r2, [r0, #4]
   b4b88:	68c0      	ldr	r0, [r0, #12]
   b4b8a:	2100      	movs	r1, #0
   b4b8c:	f004 b8d8 	b.w	b8d40 <memset>

000b4b90 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b4b90:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4b92:	f000 fdad 	bl	b56f0 <HAL_Pin_Map>
   b4b96:	4b01      	ldr	r3, [pc, #4]	; (b4b9c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4b98:	6018      	str	r0, [r3, #0]
}
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	2003e6a8 	.word	0x2003e6a8

000b4ba0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4ba2:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4ba4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4ba8:	2d02      	cmp	r5, #2
   b4baa:	d069      	beq.n	b4c80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4bac:	2d03      	cmp	r5, #3
   b4bae:	f000 8099 	beq.w	b4ce4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4bb2:	2d01      	cmp	r5, #1
   b4bb4:	d16c      	bne.n	b4c90 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4bb6:	8905      	ldrh	r5, [r0, #8]
   b4bb8:	43d2      	mvns	r2, r2
   b4bba:	442a      	add	r2, r5
   b4bbc:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4bbe:	2a00      	cmp	r2, #0
   b4bc0:	db5d      	blt.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4bc2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4bc6:	4295      	cmp	r5, r2
   b4bc8:	dd59      	ble.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4bca:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4bcc:	bfbe      	ittt	lt
   b4bce:	185b      	addlt	r3, r3, r1
   b4bd0:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4bd2:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4bd4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4bd8:	18cd      	adds	r5, r1, r3
   b4bda:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4bdc:	bfc4      	itt	gt
   b4bde:	1a43      	subgt	r3, r0, r1
   b4be0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4be2:	2b00      	cmp	r3, #0
   b4be4:	dd4b      	ble.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4be6:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4bea:	f8df c120 	ldr.w	ip, [pc, #288]	; b4d0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4bee:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4bf2:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4bf6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4bf8:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4bfc:	d01a      	beq.n	b4c34 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4bfe:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4c02:	4e40      	ldr	r6, [pc, #256]	; (b4d04 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4c04:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4c06:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4c08:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4c0a:	bf3f      	itttt	cc
   b4c0c:	eba5 0e03 	subcc.w	lr, r5, r3
   b4c10:	26ff      	movcc	r6, #255	; 0xff
   b4c12:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4c16:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4c18:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4c1c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4c1e:	bf0c      	ite	eq
   b4c20:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4c22:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4c24:	42ab      	cmp	r3, r5
   b4c26:	f80c 6002 	strb.w	r6, [ip, r2]
   b4c2a:	d328      	bcc.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4c2c:	3908      	subs	r1, #8
   b4c2e:	440b      	add	r3, r1
   b4c30:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4c32:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4c34:	2b07      	cmp	r3, #7
   b4c36:	d919      	bls.n	b4c6c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4c38:	2c01      	cmp	r4, #1
   b4c3a:	f04f 35ff 	mov.w	r5, #4294967295
   b4c3e:	bf18      	it	ne
   b4c40:	2500      	movne	r5, #0
   b4c42:	b2ed      	uxtb	r5, r5
   b4c44:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4c48:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4c4a:	3a08      	subs	r2, #8
   b4c4c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4c4e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4c50:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4c54:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4c58:	d8f7      	bhi.n	b4c4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4c5a:	f1a3 0208 	sub.w	r2, r3, #8
   b4c5e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4c62:	3201      	adds	r2, #1
   b4c64:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4c68:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4c6c:	b13b      	cbz	r3, b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4c6e:	4a26      	ldr	r2, [pc, #152]	; (b4d08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4c70:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4c72:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4c74:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4c76:	bf0c      	ite	eq
   b4c78:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4c7a:	4393      	bicne	r3, r2
   b4c7c:	7003      	strb	r3, [r0, #0]
}
   b4c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4c80:	8945      	ldrh	r5, [r0, #10]
   b4c82:	43d2      	mvns	r2, r2
   b4c84:	442a      	add	r2, r5
      x -= (w-1);
   b4c86:	18cd      	adds	r5, r1, r3
   b4c88:	8901      	ldrh	r1, [r0, #8]
   b4c8a:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4c8c:	b212      	sxth	r2, r2
      x -= (w-1);
   b4c8e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4c90:	2a00      	cmp	r2, #0
   b4c92:	dbf4      	blt.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4c94:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4c98:	4295      	cmp	r5, r2
   b4c9a:	ddf0      	ble.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4c9c:	2900      	cmp	r1, #0
    w += x;
   b4c9e:	bfbe      	ittt	lt
   b4ca0:	185b      	addlt	r3, r3, r1
   b4ca2:	b21b      	sxthlt	r3, r3
    x = 0;
   b4ca4:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4ca6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4caa:	18ce      	adds	r6, r1, r3
   b4cac:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4cae:	bfc4      	itt	gt
   b4cb0:	1a6b      	subgt	r3, r5, r1
   b4cb2:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4cb4:	2b00      	cmp	r3, #0
   b4cb6:	dde2      	ble.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4cb8:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4cba:	2580      	movs	r5, #128	; 0x80
   b4cbc:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4cc0:	4812      	ldr	r0, [pc, #72]	; (b4d0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4cc2:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4cc4:	f002 0007 	and.w	r0, r2, #7
   b4cc8:	2201      	movs	r2, #1
   b4cca:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4ccc:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4cce:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4cd0:	440b      	add	r3, r1
   b4cd2:	d10c      	bne.n	b4cee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4cd4:	428b      	cmp	r3, r1
   b4cd6:	d0d2      	beq.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4cd8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4cdc:	4310      	orrs	r0, r2
   b4cde:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4ce2:	e7f7      	b.n	b4cd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4ce4:	18cd      	adds	r5, r1, r3
   b4ce6:	8941      	ldrh	r1, [r0, #10]
   b4ce8:	1b49      	subs	r1, r1, r5
   b4cea:	b209      	sxth	r1, r1
      break;
   b4cec:	e767      	b.n	b4bbe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4cee:	43d2      	mvns	r2, r2
   b4cf0:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4cf2:	428b      	cmp	r3, r1
   b4cf4:	d0c3      	beq.n	b4c7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4cf6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4cfa:	4010      	ands	r0, r2
   b4cfc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4d00:	e7f7      	b.n	b4cf2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4d02:	bf00      	nop
   b4d04:	2003dab0 	.word	0x2003dab0
   b4d08:	2003daa8 	.word	0x2003daa8
   b4d0c:	2003dab8 	.word	0x2003dab8

000b4d10 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4d10:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4d12:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4d14:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4d18:	2d02      	cmp	r5, #2
   b4d1a:	d034      	beq.n	b4d86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4d1c:	2d03      	cmp	r5, #3
   b4d1e:	f000 809b 	beq.w	b4e58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4d22:	2d01      	cmp	r5, #1
   b4d24:	d137      	bne.n	b4d96 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4d26:	18d5      	adds	r5, r2, r3
   b4d28:	8902      	ldrh	r2, [r0, #8]
   b4d2a:	1b52      	subs	r2, r2, r5
   b4d2c:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4d2e:	2900      	cmp	r1, #0
   b4d30:	f2c0 8091 	blt.w	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d34:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4d38:	428d      	cmp	r5, r1
   b4d3a:	f340 808c 	ble.w	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4d3e:	2a00      	cmp	r2, #0
    w += x;
   b4d40:	bfbe      	ittt	lt
   b4d42:	189b      	addlt	r3, r3, r2
   b4d44:	b21b      	sxthlt	r3, r3
    x = 0;
   b4d46:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4d48:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4d4c:	18d6      	adds	r6, r2, r3
   b4d4e:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4d50:	bfc4      	itt	gt
   b4d52:	1aab      	subgt	r3, r5, r2
   b4d54:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4d56:	2b00      	cmp	r3, #0
   b4d58:	dd7d      	ble.n	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4d5a:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4d5c:	2580      	movs	r5, #128	; 0x80
   b4d5e:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4d62:	4845      	ldr	r0, [pc, #276]	; (b4e78 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4d64:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4d66:	f001 0007 	and.w	r0, r1, #7
   b4d6a:	2101      	movs	r1, #1
   b4d6c:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4d6e:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4d70:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4d72:	4413      	add	r3, r2
   b4d74:	d175      	bne.n	b4e62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4d76:	429a      	cmp	r2, r3
   b4d78:	d06d      	beq.n	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d7a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4d7e:	4308      	orrs	r0, r1
   b4d80:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4d84:	e7f7      	b.n	b4d76 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4d86:	8905      	ldrh	r5, [r0, #8]
   b4d88:	43c9      	mvns	r1, r1
   b4d8a:	4429      	add	r1, r5
      y -= (h-1);
   b4d8c:	18d5      	adds	r5, r2, r3
   b4d8e:	8942      	ldrh	r2, [r0, #10]
   b4d90:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4d92:	b209      	sxth	r1, r1
      y -= (h-1);
   b4d94:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4d96:	2900      	cmp	r1, #0
   b4d98:	db5d      	blt.n	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d9a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4d9e:	428d      	cmp	r5, r1
   b4da0:	dd59      	ble.n	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4da2:	2a00      	cmp	r2, #0
    __h += __y;
   b4da4:	bfbe      	ittt	lt
   b4da6:	189b      	addlt	r3, r3, r2
   b4da8:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4daa:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4dac:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4db0:	18d5      	adds	r5, r2, r3
   b4db2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4db4:	bfc4      	itt	gt
   b4db6:	1a83      	subgt	r3, r0, r2
   b4db8:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4dba:	2b00      	cmp	r3, #0
   b4dbc:	dd4b      	ble.n	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4dbe:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4dc2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4e78 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4dc6:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4dca:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4dce:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4dd0:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4dd4:	d01a      	beq.n	b4e0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4dd6:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4dda:	4e28      	ldr	r6, [pc, #160]	; (b4e7c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4ddc:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4dde:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4de0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4de2:	bf3f      	itttt	cc
   b4de4:	eba5 0e03 	subcc.w	lr, r5, r3
   b4de8:	26ff      	movcc	r6, #255	; 0xff
   b4dea:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4dee:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4df0:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4df4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4df6:	bf0c      	ite	eq
   b4df8:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4dfa:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4dfc:	42ab      	cmp	r3, r5
   b4dfe:	f80c 6001 	strb.w	r6, [ip, r1]
   b4e02:	d328      	bcc.n	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4e04:	3a08      	subs	r2, #8
   b4e06:	4413      	add	r3, r2
   b4e08:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4e0a:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4e0c:	2b07      	cmp	r3, #7
   b4e0e:	d919      	bls.n	b4e44 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4e10:	2c01      	cmp	r4, #1
   b4e12:	f04f 35ff 	mov.w	r5, #4294967295
   b4e16:	bf18      	it	ne
   b4e18:	2500      	movne	r5, #0
   b4e1a:	b2ed      	uxtb	r5, r5
   b4e1c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4e20:	461a      	mov	r2, r3
      h -= 8;
   b4e22:	3a08      	subs	r2, #8
   b4e24:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4e26:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4e28:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4e2c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4e30:	d8f7      	bhi.n	b4e22 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4e32:	f1a3 0208 	sub.w	r2, r3, #8
   b4e36:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4e3a:	3201      	adds	r2, #1
   b4e3c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4e40:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4e44:	b13b      	cbz	r3, b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4e46:	4a0e      	ldr	r2, [pc, #56]	; (b4e80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4e48:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4e4a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4e4c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e4e:	bf0c      	ite	eq
   b4e50:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4e52:	4393      	bicne	r3, r2
   b4e54:	7003      	strb	r3, [r0, #0]
}
   b4e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4e58:	8945      	ldrh	r5, [r0, #10]
   b4e5a:	43c9      	mvns	r1, r1
   b4e5c:	4429      	add	r1, r5
   b4e5e:	b209      	sxth	r1, r1
      break;
   b4e60:	e765      	b.n	b4d2e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4e62:	43c9      	mvns	r1, r1
   b4e64:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4e66:	429a      	cmp	r2, r3
   b4e68:	d0f5      	beq.n	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4e6a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4e6e:	4008      	ands	r0, r1
   b4e70:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4e74:	e7f7      	b.n	b4e66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4e76:	bf00      	nop
   b4e78:	2003dab8 	.word	0x2003dab8
   b4e7c:	2003dab0 	.word	0x2003dab0
   b4e80:	2003daa8 	.word	0x2003daa8

000b4e84 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4e84:	4770      	bx	lr
	...

000b4e88 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4e8a:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4e8c:	4606      	mov	r6, r0
   b4e8e:	4614      	mov	r4, r2
   b4e90:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4e92:	db2d      	blt.n	b4ef0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4e94:	f000 fc16 	bl	b56c4 <_ZN12Adafruit_GFX5widthEv>
   b4e98:	42a8      	cmp	r0, r5
   b4e9a:	dd29      	ble.n	b4ef0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4e9c:	2c00      	cmp	r4, #0
   b4e9e:	db27      	blt.n	b4ef0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4ea0:	4630      	mov	r0, r6
   b4ea2:	f000 fc12 	bl	b56ca <_ZN12Adafruit_GFX6heightEv>
   b4ea6:	42a0      	cmp	r0, r4
   b4ea8:	dd22      	ble.n	b4ef0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4eaa:	4630      	mov	r0, r6
   b4eac:	f000 fc08 	bl	b56c0 <_ZN12Adafruit_GFX11getRotationEv>
   b4eb0:	2802      	cmp	r0, #2
   b4eb2:	d01e      	beq.n	b4ef2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4eb4:	2803      	cmp	r0, #3
   b4eb6:	d025      	beq.n	b4f04 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4eb8:	2801      	cmp	r0, #1
   b4eba:	d104      	bne.n	b4ec6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4ebc:	8933      	ldrh	r3, [r6, #8]
   b4ebe:	43e2      	mvns	r2, r4
   b4ec0:	441a      	add	r2, r3
    break;
   b4ec2:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4ec4:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4ec6:	2c00      	cmp	r4, #0
   b4ec8:	4622      	mov	r2, r4
   b4eca:	bfb8      	it	lt
   b4ecc:	1de2      	addlt	r2, r4, #7
   b4ece:	10d2      	asrs	r2, r2, #3
   b4ed0:	2180      	movs	r1, #128	; 0x80
   b4ed2:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4ed6:	490e      	ldr	r1, [pc, #56]	; (b4f10 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4ed8:	2201      	movs	r2, #1
   b4eda:	f004 0407 	and.w	r4, r4, #7
   b4ede:	574b      	ldrsb	r3, [r1, r5]
   b4ee0:	fa02 f404 	lsl.w	r4, r2, r4
   b4ee4:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4ee6:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4ee8:	bf0c      	ite	eq
   b4eea:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4eec:	43a3      	bicne	r3, r4
   b4eee:	554b      	strb	r3, [r1, r5]
}
   b4ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4ef2:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4ef4:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4ef6:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4ef8:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4efa:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4efc:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4efe:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4f00:	b224      	sxth	r4, r4
    break;
   b4f02:	e7e0      	b.n	b4ec6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4f04:	8973      	ldrh	r3, [r6, #10]
   b4f06:	3b01      	subs	r3, #1
   b4f08:	1b5b      	subs	r3, r3, r5
    break;
   b4f0a:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4f0c:	b21c      	sxth	r4, r3
    break;
   b4f0e:	e7da      	b.n	b4ec6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4f10:	2003dab8 	.word	0x2003dab8

000b4f14 <_ZN16Adafruit_SSD1306D0Ev>:
   b4f14:	b510      	push	{r4, lr}
   b4f16:	2124      	movs	r1, #36	; 0x24
   b4f18:	4604      	mov	r4, r0
   b4f1a:	f7ff f8be 	bl	b409a <_ZdlPvj>
   b4f1e:	4620      	mov	r0, r4
   b4f20:	bd10      	pop	{r4, pc}
	...

000b4f24 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4f24:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4f26:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4f28:	4604      	mov	r4, r0
   b4f2a:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4f2c:	2180      	movs	r1, #128	; 0x80
   b4f2e:	f000 faa7 	bl	b5480 <_ZN12Adafruit_GFXC1Ess>
   b4f32:	4b06      	ldr	r3, [pc, #24]	; (b4f4c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4f34:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4f36:	23ff      	movs	r3, #255	; 0xff
   b4f38:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4f3c:	7763      	strb	r3, [r4, #29]
   b4f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4f42:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4f44:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4f48:	4620      	mov	r0, r4
   b4f4a:	bd38      	pop	{r3, r4, r5, pc}
   b4f4c:	000b9594 	.word	0x000b9594

000b4f50 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4f50:	4802      	ldr	r0, [pc, #8]	; (b4f5c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4f56:	2100      	movs	r1, #0
   b4f58:	f003 bef2 	b.w	b8d40 <memset>
   b4f5c:	2003dab8 	.word	0x2003dab8

000b4f60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4f60:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4f62:	4c0b      	ldr	r4, [pc, #44]	; (b4f90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4f64:	7821      	ldrb	r1, [r4, #0]
   b4f66:	f3bf 8f5b 	dmb	ish
   b4f6a:	f011 0101 	ands.w	r1, r1, #1
   b4f6e:	d10b      	bne.n	b4f88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4f70:	4620      	mov	r0, r4
   b4f72:	9101      	str	r1, [sp, #4]
   b4f74:	f7ff f8a0 	bl	b40b8 <__cxa_guard_acquire>
   b4f78:	9901      	ldr	r1, [sp, #4]
   b4f7a:	b128      	cbz	r0, b4f88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4f7c:	4805      	ldr	r0, [pc, #20]	; (b4f94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4f7e:	f000 fed9 	bl	b5d34 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4f82:	4620      	mov	r0, r4
   b4f84:	f7ff f89d 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4f88:	4802      	ldr	r0, [pc, #8]	; (b4f94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4f8a:	b002      	add	sp, #8
   b4f8c:	bd10      	pop	{r4, pc}
   b4f8e:	bf00      	nop
   b4f90:	2003e6ac 	.word	0x2003e6ac
   b4f94:	2003e6b0 	.word	0x2003e6b0

000b4f98 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4f98:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4f9a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4f9e:	b143      	cbz	r3, b4fb2 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4fa0:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4fa2:	f7ff ffdd 	bl	b4f60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4fa6:	9901      	ldr	r1, [sp, #4]
}
   b4fa8:	b003      	add	sp, #12
   b4faa:	f85d eb04 	ldr.w	lr, [sp], #4
   b4fae:	f000 bf75 	b.w	b5e9c <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4fb2:	460b      	mov	r3, r1
   b4fb4:	7f81      	ldrb	r1, [r0, #30]
   b4fb6:	7f40      	ldrb	r0, [r0, #29]
   b4fb8:	2201      	movs	r2, #1
}
   b4fba:	b003      	add	sp, #12
   b4fbc:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4fc0:	f003 bcc2 	b.w	b8948 <shiftOut>

000b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4fc4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4fc6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4fca:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4fcc:	4604      	mov	r4, r0
   b4fce:	460d      	mov	r5, r1
  if (sid != -1)
   b4fd0:	d01d      	beq.n	b500e <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4fd2:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4fd6:	2101      	movs	r1, #1
   b4fd8:	b280      	uxth	r0, r0
   b4fda:	f003 fc9c 	bl	b8916 <digitalWrite>
    digitalWrite(dc, LOW);
   b4fde:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4fe2:	2100      	movs	r1, #0
   b4fe4:	b280      	uxth	r0, r0
   b4fe6:	f003 fc96 	bl	b8916 <digitalWrite>
    digitalWrite(cs, LOW);
   b4fea:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4fee:	2100      	movs	r1, #0
   b4ff0:	b280      	uxth	r0, r0
   b4ff2:	f003 fc90 	bl	b8916 <digitalWrite>
    fastSPIwrite(c);
   b4ff6:	4629      	mov	r1, r5
   b4ff8:	4620      	mov	r0, r4
   b4ffa:	f7ff ffcd 	bl	b4f98 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4ffe:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5002:	2101      	movs	r1, #1
}
   b5004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5008:	b280      	uxth	r0, r0
   b500a:	f003 bc84 	b.w	b8916 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b500e:	f003 fd19 	bl	b8a44 <_Z19__fetch_global_Wirev>
   b5012:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5016:	f003 fb35 	bl	b8684 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b501a:	f003 fd13 	bl	b8a44 <_Z19__fetch_global_Wirev>
   b501e:	6803      	ldr	r3, [r0, #0]
   b5020:	2100      	movs	r1, #0
   b5022:	689b      	ldr	r3, [r3, #8]
   b5024:	4798      	blx	r3
    Wire.write(c);
   b5026:	f003 fd0d 	bl	b8a44 <_Z19__fetch_global_Wirev>
   b502a:	6803      	ldr	r3, [r0, #0]
   b502c:	4629      	mov	r1, r5
   b502e:	689b      	ldr	r3, [r3, #8]
   b5030:	4798      	blx	r3
    Wire.endTransmission();
   b5032:	f003 fd07 	bl	b8a44 <_Z19__fetch_global_Wirev>
}
   b5036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b503a:	f003 bb2a 	b.w	b8692 <_ZN7TwoWire15endTransmissionEv>
	...

000b5040 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5042:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5044:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5046:	f7ff ffbd 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b504a:	2100      	movs	r1, #0
   b504c:	4620      	mov	r0, r4
   b504e:	f7ff ffb9 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5052:	217f      	movs	r1, #127	; 0x7f
   b5054:	4620      	mov	r0, r4
   b5056:	f7ff ffb5 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b505a:	2122      	movs	r1, #34	; 0x22
   b505c:	4620      	mov	r0, r4
   b505e:	f7ff ffb1 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5062:	2100      	movs	r1, #0
   b5064:	4620      	mov	r0, r4
   b5066:	f7ff ffad 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b506a:	2107      	movs	r1, #7
   b506c:	4620      	mov	r0, r4
   b506e:	f7ff ffa9 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5072:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5076:	4f29      	ldr	r7, [pc, #164]	; (b511c <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5078:	3301      	adds	r3, #1
   b507a:	d02a      	beq.n	b50d2 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b507c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5080:	2101      	movs	r1, #1
   b5082:	b280      	uxth	r0, r0
   b5084:	f003 fc47 	bl	b8916 <digitalWrite>
    digitalWrite(dc, HIGH);
   b5088:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b508c:	2101      	movs	r1, #1
   b508e:	b280      	uxth	r0, r0
   b5090:	f003 fc41 	bl	b8916 <digitalWrite>
    digitalWrite(cs, LOW);
   b5094:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5098:	2100      	movs	r1, #0
   b509a:	b280      	uxth	r0, r0
   b509c:	f003 fc3b 	bl	b8916 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b50a0:	2001      	movs	r0, #1
   b50a2:	f000 fb4d 	bl	b5740 <HAL_Delay_Microseconds>
   b50a6:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50aa:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b50ac:	f817 1b01 	ldrb.w	r1, [r7], #1
   b50b0:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50b2:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b50b4:	f7ff ff70 	bl	b4f98 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50b8:	2d00      	cmp	r5, #0
   b50ba:	d1f6      	bne.n	b50aa <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b50bc:	2001      	movs	r0, #1
   b50be:	f000 fb3f 	bl	b5740 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b50c2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b50c6:	2101      	movs	r1, #1
}
   b50c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b50cc:	b280      	uxth	r0, r0
   b50ce:	f003 bc22 	b.w	b8916 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50d2:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b50d4:	f003 fcb6 	bl	b8a44 <_Z19__fetch_global_Wirev>
   b50d8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b50dc:	f003 fad2 	bl	b8684 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b50e0:	f003 fcb0 	bl	b8a44 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b50e4:	6803      	ldr	r3, [r0, #0]
   b50e6:	2140      	movs	r1, #64	; 0x40
   b50e8:	689b      	ldr	r3, [r3, #8]
   b50ea:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b50ec:	f105 0610 	add.w	r6, r5, #16
   b50f0:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b50f2:	f003 fca7 	bl	b8a44 <_Z19__fetch_global_Wirev>
   b50f6:	6803      	ldr	r3, [r0, #0]
   b50f8:	5d79      	ldrb	r1, [r7, r5]
   b50fa:	689b      	ldr	r3, [r3, #8]
   b50fc:	4798      	blx	r3
		i++;
   b50fe:	1c6b      	adds	r3, r5, #1
   b5100:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5102:	42ae      	cmp	r6, r5
   b5104:	d1f5      	bne.n	b50f2 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b5106:	f003 fc9d 	bl	b8a44 <_Z19__fetch_global_Wirev>
   b510a:	f003 fac2 	bl	b8692 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b510e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5112:	d100      	bne.n	b5116 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5116:	4635      	mov	r5, r6
   b5118:	e7dc      	b.n	b50d4 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b511a:	bf00      	nop
   b511c:	2003dab8 	.word	0x2003dab8

000b5120 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5120:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5122:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5126:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5128:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b512a:	4604      	mov	r4, r0
   b512c:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b512e:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5130:	f000 80c9 	beq.w	b52c6 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5134:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5138:	2101      	movs	r1, #1
   b513a:	b280      	uxth	r0, r0
   b513c:	f003 fbda 	bl	b88f4 <pinMode>
    pinMode(cs, OUTPUT);
   b5140:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5144:	2101      	movs	r1, #1
   b5146:	b280      	uxth	r0, r0
   b5148:	f003 fbd4 	bl	b88f4 <pinMode>
    if (!hwSPI){
   b514c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5150:	2b00      	cmp	r3, #0
   b5152:	f000 80a6 	beq.w	b52a2 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5156:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b515a:	2101      	movs	r1, #1
   b515c:	b280      	uxth	r0, r0
   b515e:	f003 fbda 	bl	b8916 <digitalWrite>
        instance().setBitOrder(order);
   b5162:	f7ff fefd 	bl	b4f60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5166:	2101      	movs	r1, #1
   b5168:	f000 fe02 	bl	b5d70 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b516c:	f7ff fef8 	bl	b4f60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5170:	2110      	movs	r1, #16
   b5172:	f000 fe6d 	bl	b5e50 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5176:	f7ff fef3 	bl	b4f60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b517a:	2100      	movs	r1, #0
   b517c:	f000 fe0c 	bl	b5d98 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5180:	f7ff feee 	bl	b4f60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5184:	f000 fde0 	bl	b5d48 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5188:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b518c:	2101      	movs	r1, #1
   b518e:	b280      	uxth	r0, r0
   b5190:	f003 fbb0 	bl	b88f4 <pinMode>
  digitalWrite(rst, HIGH);
   b5194:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5198:	2101      	movs	r1, #1
   b519a:	b280      	uxth	r0, r0
   b519c:	f003 fbbb 	bl	b8916 <digitalWrite>
  delay(1);
   b51a0:	2001      	movs	r0, #1
   b51a2:	f003 f823 	bl	b81ec <delay>
  digitalWrite(rst, LOW);
   b51a6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b51aa:	2100      	movs	r1, #0
   b51ac:	b280      	uxth	r0, r0
   b51ae:	f003 fbb2 	bl	b8916 <digitalWrite>
  delay(10);
   b51b2:	200a      	movs	r0, #10
   b51b4:	f003 f81a 	bl	b81ec <delay>
  digitalWrite(rst, HIGH);
   b51b8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b51bc:	2101      	movs	r1, #1
   b51be:	b280      	uxth	r0, r0
   b51c0:	f003 fba9 	bl	b8916 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b51c4:	4620      	mov	r0, r4
   b51c6:	21ae      	movs	r1, #174	; 0xae
   b51c8:	f7ff fefc 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b51cc:	4620      	mov	r0, r4
   b51ce:	21d5      	movs	r1, #213	; 0xd5
   b51d0:	f7ff fef8 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b51d4:	4620      	mov	r0, r4
   b51d6:	2180      	movs	r1, #128	; 0x80
   b51d8:	f7ff fef4 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b51dc:	4620      	mov	r0, r4
   b51de:	21a8      	movs	r1, #168	; 0xa8
   b51e0:	f7ff fef0 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b51e4:	4620      	mov	r0, r4
   b51e6:	213f      	movs	r1, #63	; 0x3f
   b51e8:	f7ff feec 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b51ec:	4620      	mov	r0, r4
   b51ee:	21d3      	movs	r1, #211	; 0xd3
   b51f0:	f7ff fee8 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b51f4:	4620      	mov	r0, r4
   b51f6:	2100      	movs	r1, #0
   b51f8:	f7ff fee4 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b51fc:	4620      	mov	r0, r4
   b51fe:	2140      	movs	r1, #64	; 0x40
   b5200:	f7ff fee0 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5204:	218d      	movs	r1, #141	; 0x8d
   b5206:	4620      	mov	r0, r4
   b5208:	f7ff fedc 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b520c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b520e:	bf0c      	ite	eq
   b5210:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5212:	2114      	movne	r1, #20
   b5214:	4620      	mov	r0, r4
   b5216:	f7ff fed5 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b521a:	4620      	mov	r0, r4
   b521c:	2120      	movs	r1, #32
   b521e:	f7ff fed1 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5222:	4620      	mov	r0, r4
   b5224:	2100      	movs	r1, #0
   b5226:	f7ff fecd 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b522a:	4620      	mov	r0, r4
   b522c:	21a1      	movs	r1, #161	; 0xa1
   b522e:	f7ff fec9 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5232:	4620      	mov	r0, r4
   b5234:	21c8      	movs	r1, #200	; 0xc8
   b5236:	f7ff fec5 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b523a:	4620      	mov	r0, r4
   b523c:	21da      	movs	r1, #218	; 0xda
   b523e:	f7ff fec1 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5242:	4620      	mov	r0, r4
   b5244:	2112      	movs	r1, #18
   b5246:	f7ff febd 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b524a:	2181      	movs	r1, #129	; 0x81
   b524c:	4620      	mov	r0, r4
   b524e:	f7ff feb9 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5252:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5254:	bf0c      	ite	eq
   b5256:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5258:	21cf      	movne	r1, #207	; 0xcf
   b525a:	4620      	mov	r0, r4
   b525c:	f7ff feb2 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5260:	21d9      	movs	r1, #217	; 0xd9
   b5262:	4620      	mov	r0, r4
   b5264:	f7ff feae 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5268:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b526a:	bf0c      	ite	eq
   b526c:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b526e:	21f1      	movne	r1, #241	; 0xf1
   b5270:	4620      	mov	r0, r4
   b5272:	f7ff fea7 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5276:	4620      	mov	r0, r4
   b5278:	21db      	movs	r1, #219	; 0xdb
   b527a:	f7ff fea3 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b527e:	4620      	mov	r0, r4
   b5280:	2140      	movs	r1, #64	; 0x40
   b5282:	f7ff fe9f 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5286:	4620      	mov	r0, r4
   b5288:	21a4      	movs	r1, #164	; 0xa4
   b528a:	f7ff fe9b 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b528e:	4620      	mov	r0, r4
   b5290:	21a6      	movs	r1, #166	; 0xa6
   b5292:	f7ff fe97 	bl	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5296:	4620      	mov	r0, r4
   b5298:	21af      	movs	r1, #175	; 0xaf
}
   b529a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b529e:	f7ff be91 	b.w	b4fc4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b52a2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b52a6:	2101      	movs	r1, #1
   b52a8:	b280      	uxth	r0, r0
   b52aa:	f003 fb23 	bl	b88f4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b52ae:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b52b2:	2101      	movs	r1, #1
   b52b4:	b280      	uxth	r0, r0
   b52b6:	f003 fb1d 	bl	b88f4 <pinMode>
    if (hwSPI){
   b52ba:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b52be:	2b00      	cmp	r3, #0
   b52c0:	f43f af62 	beq.w	b5188 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b52c4:	e747      	b.n	b5156 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b52c6:	f003 fbbd 	bl	b8a44 <_Z19__fetch_global_Wirev>
   b52ca:	f003 f9d1 	bl	b8670 <_ZN7TwoWire5beginEv>
   b52ce:	e75b      	b.n	b5188 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b52d0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b52d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52d4:	b085      	sub	sp, #20
   b52d6:	461f      	mov	r7, r3
   b52d8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b52dc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b52e0:	eba8 0902 	sub.w	r9, r8, r2
   b52e4:	eba7 0a01 	sub.w	sl, r7, r1
   b52e8:	f1b9 0f00 	cmp.w	r9, #0
   b52ec:	bfb8      	it	lt
   b52ee:	f1c9 0900 	rsblt	r9, r9, #0
   b52f2:	f1ba 0f00 	cmp.w	sl, #0
   b52f6:	bfb8      	it	lt
   b52f8:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b52fc:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b52fe:	4683      	mov	fp, r0
   b5300:	460c      	mov	r4, r1
   b5302:	4615      	mov	r5, r2
  if (steep) {
   b5304:	dd04      	ble.n	b5310 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b5306:	463a      	mov	r2, r7
    swap(x0, y0);
   b5308:	462c      	mov	r4, r5
    swap(x1, y1);
   b530a:	4647      	mov	r7, r8
    swap(x0, y0);
   b530c:	460d      	mov	r5, r1
    swap(x1, y1);
   b530e:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5310:	42bc      	cmp	r4, r7
   b5312:	dd05      	ble.n	b5320 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5314:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5316:	4645      	mov	r5, r8
   b5318:	4690      	mov	r8, r2
  if (x0 > x1) {
   b531a:	4622      	mov	r2, r4
   b531c:	463c      	mov	r4, r7
   b531e:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5320:	1b3e      	subs	r6, r7, r4
   b5322:	b2b2      	uxth	r2, r6
   b5324:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5326:	eba8 0205 	sub.w	r2, r8, r5
   b532a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b532e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5332:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5336:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b533a:	4545      	cmp	r5, r8
   b533c:	bfb4      	ite	lt
   b533e:	2201      	movlt	r2, #1
   b5340:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5344:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5346:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5348:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b534a:	42bc      	cmp	r4, r7
   b534c:	dc1c      	bgt.n	b5388 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b534e:	f8db 2000 	ldr.w	r2, [fp]
   b5352:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5354:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5356:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b535a:	bfc7      	ittee	gt
   b535c:	4629      	movgt	r1, r5
   b535e:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5360:	462a      	movle	r2, r5
   b5362:	4621      	movle	r1, r4
   b5364:	4658      	mov	r0, fp
   b5366:	47c0      	blx	r8
    }
    err -= dy;
   b5368:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b536a:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b536c:	1ab6      	subs	r6, r6, r2
   b536e:	b2b1      	uxth	r1, r6
   b5370:	b236      	sxth	r6, r6
    if (err < 0) {
   b5372:	2e00      	cmp	r6, #0
   b5374:	da05      	bge.n	b5382 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5376:	9a02      	ldr	r2, [sp, #8]
   b5378:	4415      	add	r5, r2
      err += dx;
   b537a:	9a00      	ldr	r2, [sp, #0]
   b537c:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b537e:	b22d      	sxth	r5, r5
      err += dx;
   b5380:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b5382:	3401      	adds	r4, #1
   b5384:	b224      	sxth	r4, r4
   b5386:	e7e0      	b.n	b534a <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5388:	b005      	add	sp, #20
   b538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b538e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b538e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5392:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b5396:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5398:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b539c:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b53a0:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b53a2:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b53a4:	4616      	mov	r6, r2
   b53a6:	468a      	mov	sl, r1
   b53a8:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b53aa:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b53ac:	6823      	ldr	r3, [r4, #0]
   b53ae:	f8cd 8000 	str.w	r8, [sp]
   b53b2:	f109 32ff 	add.w	r2, r9, #4294967295
   b53b6:	4432      	add	r2, r6
   b53b8:	69df      	ldr	r7, [r3, #28]
   b53ba:	4651      	mov	r1, sl
   b53bc:	462b      	mov	r3, r5
   b53be:	4620      	mov	r0, r4
   b53c0:	b212      	sxth	r2, r2
   b53c2:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b53c4:	6823      	ldr	r3, [r4, #0]
   b53c6:	f8cd 8000 	str.w	r8, [sp]
   b53ca:	699f      	ldr	r7, [r3, #24]
   b53cc:	4632      	mov	r2, r6
   b53ce:	464b      	mov	r3, r9
   b53d0:	4651      	mov	r1, sl
   b53d2:	4620      	mov	r0, r4
   b53d4:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b53d6:	1e6b      	subs	r3, r5, #1
   b53d8:	eb03 010a 	add.w	r1, r3, sl
   b53dc:	6823      	ldr	r3, [r4, #0]
   b53de:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b53e2:	699d      	ldr	r5, [r3, #24]
   b53e4:	4632      	mov	r2, r6
   b53e6:	464b      	mov	r3, r9
   b53e8:	b209      	sxth	r1, r1
   b53ea:	4620      	mov	r0, r4
   b53ec:	46ac      	mov	ip, r5
}
   b53ee:	b002      	add	sp, #8
   b53f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b53f4:	4760      	bx	ip

000b53f6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b53f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b53f8:	3b01      	subs	r3, #1
   b53fa:	4413      	add	r3, r2
   b53fc:	6804      	ldr	r4, [r0, #0]
   b53fe:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5402:	9501      	str	r5, [sp, #4]
   b5404:	b21b      	sxth	r3, r3
   b5406:	9300      	str	r3, [sp, #0]
   b5408:	6964      	ldr	r4, [r4, #20]
   b540a:	460b      	mov	r3, r1
   b540c:	47a0      	blx	r4
}
   b540e:	b003      	add	sp, #12
   b5410:	bd30      	pop	{r4, r5, pc}

000b5412 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5412:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5414:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5418:	6804      	ldr	r4, [r0, #0]
   b541a:	e9cd 2500 	strd	r2, r5, [sp]
   b541e:	3b01      	subs	r3, #1
   b5420:	440b      	add	r3, r1
   b5422:	6964      	ldr	r4, [r4, #20]
   b5424:	b21b      	sxth	r3, r3
   b5426:	47a0      	blx	r4
}
   b5428:	b003      	add	sp, #12
   b542a:	bd30      	pop	{r4, r5, pc}

000b542c <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b542c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5430:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5434:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5438:	4605      	mov	r5, r0
   b543a:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b543c:	460c      	mov	r4, r1
   b543e:	18ce      	adds	r6, r1, r3
   b5440:	42b4      	cmp	r4, r6
   b5442:	da0b      	bge.n	b545c <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5444:	682b      	ldr	r3, [r5, #0]
   b5446:	f8cd 8000 	str.w	r8, [sp]
   b544a:	699f      	ldr	r7, [r3, #24]
   b544c:	4621      	mov	r1, r4
   b544e:	464b      	mov	r3, r9
   b5450:	4652      	mov	r2, sl
   b5452:	4628      	mov	r0, r5
   b5454:	3401      	adds	r4, #1
   b5456:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5458:	b224      	sxth	r4, r4
   b545a:	e7f1      	b.n	b5440 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b545c:	b002      	add	sp, #8
   b545e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5462 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5462:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5464:	6802      	ldr	r2, [r0, #0]
   b5466:	9101      	str	r1, [sp, #4]
   b5468:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b546c:	9100      	str	r1, [sp, #0]
   b546e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5470:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5474:	2200      	movs	r2, #0
   b5476:	4611      	mov	r1, r2
   b5478:	47a0      	blx	r4
}
   b547a:	b002      	add	sp, #8
   b547c:	bd10      	pop	{r4, pc}

000b547e <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b547e:	4770      	bx	lr

000b5480 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5480:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5482:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5484:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5486:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b548a:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b548c:	4d05      	ldr	r5, [pc, #20]	; (b54a4 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b548e:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5490:	2201      	movs	r2, #1
   b5492:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5494:	6005      	str	r5, [r0, #0]
   b5496:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5498:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b549a:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b549c:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b549e:	7682      	strb	r2, [r0, #26]
}
   b54a0:	bd30      	pop	{r4, r5, pc}
   b54a2:	bf00      	nop
   b54a4:	000b9ac8 	.word	0x000b9ac8

000b54a8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
			      uint16_t color) {
   b54a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54ac:	b089      	sub	sp, #36	; 0x24
   b54ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b54b2:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
   b54b6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
   b54ba:	9305      	str	r3, [sp, #20]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b54bc:	1dfa      	adds	r2, r7, #7
			      uint16_t color) {
   b54be:	e9cd 0101 	strd	r0, r1, [sp, #4]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b54c2:	bf48      	it	mi
   b54c4:	f107 020e 	addmi.w	r2, r7, #14
   b54c8:	2400      	movs	r4, #0
			      uint16_t color) {
   b54ca:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  int16_t i, j, byteWidth = (w + 7) / 8;
   b54ce:	ea4f 0be2 	mov.w	fp, r2, asr #3
   b54d2:	4625      	mov	r5, r4
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b54d4:	f04f 0980 	mov.w	r9, #128	; 0x80
  for(j=0; j<h; j++) {
   b54d8:	9905      	ldr	r1, [sp, #20]
   b54da:	b22a      	sxth	r2, r5
   b54dc:	4291      	cmp	r1, r2
   b54de:	dd2a      	ble.n	b5536 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b54e0:	9a04      	ldr	r2, [sp, #16]
   b54e2:	eb02 0a04 	add.w	sl, r2, r4
	drawPixel(x+i, y+j, color);
   b54e6:	9a03      	ldr	r2, [sp, #12]
   b54e8:	442a      	add	r2, r5
   b54ea:	f04f 0800 	mov.w	r8, #0
   b54ee:	b212      	sxth	r2, r2
   b54f0:	fa0f f088 	sxth.w	r0, r8
    for(i=0; i<w; i++ ) {
   b54f4:	4287      	cmp	r7, r0
   b54f6:	fa1f f188 	uxth.w	r1, r8
   b54fa:	dd19      	ble.n	b5530 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b54fc:	10c0      	asrs	r0, r0, #3
   b54fe:	f81a c000 	ldrb.w	ip, [sl, r0]
   b5502:	f001 0007 	and.w	r0, r1, #7
   b5506:	fa49 f000 	asr.w	r0, r9, r0
   b550a:	ea1c 0f00 	tst.w	ip, r0
   b550e:	d00c      	beq.n	b552a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
	drawPixel(x+i, y+j, color);
   b5510:	9802      	ldr	r0, [sp, #8]
   b5512:	4401      	add	r1, r0
   b5514:	9801      	ldr	r0, [sp, #4]
   b5516:	6800      	ldr	r0, [r0, #0]
   b5518:	6900      	ldr	r0, [r0, #16]
   b551a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b551e:	4606      	mov	r6, r0
   b5520:	b209      	sxth	r1, r1
   b5522:	9801      	ldr	r0, [sp, #4]
   b5524:	47b0      	blx	r6
   b5526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    for(i=0; i<w; i++ ) {
   b552a:	f108 0801 	add.w	r8, r8, #1
   b552e:	e7df      	b.n	b54f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x48>
  for(j=0; j<h; j++) {
   b5530:	3501      	adds	r5, #1
   b5532:	445c      	add	r4, fp
   b5534:	e7d0      	b.n	b54d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x30>
}
   b5536:	b009      	add	sp, #36	; 0x24
   b5538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b553c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5540:	ed2d 8b02 	vpush	{d8}
   b5544:	b08d      	sub	sp, #52	; 0x34
   b5546:	4607      	mov	r7, r0
   b5548:	9104      	str	r1, [sp, #16]
   b554a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b554e:	9105      	str	r1, [sp, #20]
   b5550:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5554:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5556:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b555a:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b555c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5560:	4281      	cmp	r1, r0
   b5562:	dd52      	ble.n	b560a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5564:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5568:	4291      	cmp	r1, r2
   b556a:	dd4e      	ble.n	b560a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b556c:	2106      	movs	r1, #6
   b556e:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5572:	2c00      	cmp	r4, #0
   b5574:	dd49      	ble.n	b560a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5576:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b557a:	2c00      	cmp	r4, #0
   b557c:	dd45      	ble.n	b560a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b557e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5582:	930b      	str	r3, [sp, #44]	; 0x2c
   b5584:	b293      	uxth	r3, r2
   b5586:	9307      	str	r3, [sp, #28]
   b5588:	3308      	adds	r3, #8
   b558a:	b29b      	uxth	r3, r3
   b558c:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b558e:	2400      	movs	r4, #0
   b5590:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5592:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5594:	bf1c      	itt	ne
   b5596:	4b2c      	ldrne	r3, [pc, #176]	; (b5648 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5598:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b559a:	9e07      	ldr	r6, [sp, #28]
   b559c:	bf16      	itet	ne
   b559e:	191b      	addne	r3, r3, r4
      line = 0x0;
   b55a0:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b55a2:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b55a4:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b55a6:	9a04      	ldr	r2, [sp, #16]
   b55a8:	b2ab      	uxth	r3, r5
   b55aa:	930a      	str	r3, [sp, #40]	; 0x28
   b55ac:	fb04 f305 	mul.w	r3, r4, r5
   b55b0:	fa13 f382 	uxtah	r3, r3, r2
   b55b4:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b55b6:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b55ba:	ee08 3a10 	vmov	s16, r3
   b55be:	46b0      	mov	r8, r6
   b55c0:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b55c4:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b55c8:	9b03      	ldr	r3, [sp, #12]
   b55ca:	07db      	lsls	r3, r3, #31
   b55cc:	d52f      	bpl.n	b562e <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b55ce:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b55d0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b55d2:	d11f      	bne.n	b5614 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b55d4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b55d8:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b55da:	b232      	sxth	r2, r6
   b55dc:	4651      	mov	r1, sl
   b55de:	4638      	mov	r0, r7
   b55e0:	47d8      	blx	fp
      line >>= 1;
   b55e2:	9b03      	ldr	r3, [sp, #12]
   b55e4:	085b      	lsrs	r3, r3, #1
   b55e6:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b55e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b55ea:	3601      	adds	r6, #1
   b55ec:	4498      	add	r8, r3
   b55ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b55f0:	b2b6      	uxth	r6, r6
   b55f2:	42b3      	cmp	r3, r6
   b55f4:	fa1f f888 	uxth.w	r8, r8
   b55f8:	d1e6      	bne.n	b55c8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b55fa:	9b08      	ldr	r3, [sp, #32]
   b55fc:	3b01      	subs	r3, #1
   b55fe:	3401      	adds	r4, #1
   b5600:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5604:	b264      	sxtb	r4, r4
   b5606:	9308      	str	r3, [sp, #32]
   b5608:	d1c3      	bne.n	b5592 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b560a:	b00d      	add	sp, #52	; 0x34
   b560c:	ecbd 8b02 	vpop	{d8}
   b5610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5614:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5616:	e9cd 9200 	strd	r9, r2, [sp]
   b561a:	ee18 1a10 	vmov	r1, s16
   b561e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5622:	fa0f f288 	sxth.w	r2, r8
   b5626:	464b      	mov	r3, r9
   b5628:	4638      	mov	r0, r7
   b562a:	47d8      	blx	fp
   b562c:	e7d9      	b.n	b55e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b562e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5632:	4293      	cmp	r3, r2
   b5634:	d0d5      	beq.n	b55e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5636:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5638:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b563a:	d103      	bne.n	b5644 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b563c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5640:	9b06      	ldr	r3, [sp, #24]
   b5642:	e7ca      	b.n	b55da <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5644:	9a06      	ldr	r2, [sp, #24]
   b5646:	e7e6      	b.n	b5616 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5648:	000b95c4 	.word	0x000b95c4

000b564c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b564c:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b564e:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5650:	b085      	sub	sp, #20
   b5652:	4604      	mov	r4, r0
  if (c == '\n') {
   b5654:	d107      	bne.n	b5666 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5656:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5658:	8a63      	ldrh	r3, [r4, #18]
   b565a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b565e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5660:	2300      	movs	r3, #0
   b5662:	8223      	strh	r3, [r4, #16]
   b5664:	e021      	b.n	b56aa <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5666:	290d      	cmp	r1, #13
   b5668:	d01f      	beq.n	b56aa <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b566a:	7e03      	ldrb	r3, [r0, #24]
   b566c:	9302      	str	r3, [sp, #8]
   b566e:	8ac3      	ldrh	r3, [r0, #22]
   b5670:	9301      	str	r3, [sp, #4]
   b5672:	8a83      	ldrh	r3, [r0, #20]
   b5674:	9300      	str	r3, [sp, #0]
   b5676:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b567a:	460b      	mov	r3, r1
   b567c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5680:	f7ff ff5c 	bl	b553c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5684:	7e20      	ldrb	r0, [r4, #24]
   b5686:	8a23      	ldrh	r3, [r4, #16]
   b5688:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b568c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5690:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5692:	b21b      	sxth	r3, r3
   b5694:	4602      	mov	r2, r0
   b5696:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5698:	b139      	cbz	r1, b56aa <_ZN12Adafruit_GFX5writeEh+0x5e>
   b569a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b569e:	f06f 0505 	mvn.w	r5, #5
   b56a2:	fb05 1100 	mla	r1, r5, r0, r1
   b56a6:	428b      	cmp	r3, r1
   b56a8:	dcd6      	bgt.n	b5658 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b56aa:	2001      	movs	r0, #1
   b56ac:	b005      	add	sp, #20
   b56ae:	bd30      	pop	{r4, r5, pc}

000b56b0 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b56b0:	2901      	cmp	r1, #1
   b56b2:	bf38      	it	cc
   b56b4:	2101      	movcc	r1, #1
   b56b6:	7601      	strb	r1, [r0, #24]
}
   b56b8:	4770      	bx	lr

000b56ba <_ZN12Adafruit_GFX12setTextColorEtt>:
  textcolor   = c;
   b56ba:	8281      	strh	r1, [r0, #20]
  textbgcolor = b; 
   b56bc:	82c2      	strh	r2, [r0, #22]
}
   b56be:	4770      	bx	lr

000b56c0 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b56c0:	7e40      	ldrb	r0, [r0, #25]
   b56c2:	4770      	bx	lr

000b56c4 <_ZN12Adafruit_GFX5widthEv>:
}
   b56c4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b56c8:	4770      	bx	lr

000b56ca <_ZN12Adafruit_GFX6heightEv>:
}
   b56ca:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b56ce:	4770      	bx	lr

000b56d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <netdb_freeaddrinfo+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	689b      	ldr	r3, [r3, #8]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	00030268 	.word	0x00030268

000b56e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <netdb_getaddrinfo+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	68db      	ldr	r3, [r3, #12]
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	00030268 	.word	0x00030268

000b56f0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <HAL_Pin_Map+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	681b      	ldr	r3, [r3, #0]
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	0003022c 	.word	0x0003022c

000b5700 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <HAL_Pin_Mode+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	689b      	ldr	r3, [r3, #8]
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	0003022c 	.word	0x0003022c

000b5710 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <HAL_Get_Pin_Mode+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	68db      	ldr	r3, [r3, #12]
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	0003022c 	.word	0x0003022c

000b5720 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <HAL_GPIO_Write+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	691b      	ldr	r3, [r3, #16]
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	0003022c 	.word	0x0003022c

000b5730 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <HAL_RNG_GetRandomNumber+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	685b      	ldr	r3, [r3, #4]
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	00030218 	.word	0x00030218

000b5740 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <HAL_Delay_Microseconds+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	68db      	ldr	r3, [r3, #12]
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	00030218 	.word	0x00030218

000b5750 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	691b      	ldr	r3, [r3, #16]
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	00030218 	.word	0x00030218

000b5760 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	695b      	ldr	r3, [r3, #20]
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	00030218 	.word	0x00030218

000b5770 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <hal_timer_millis+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	00030218 	.word	0x00030218

000b5780 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <hal_ble_stack_init+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	689b      	ldr	r3, [r3, #8]
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	00030278 	.word	0x00030278

000b5790 <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   b5790:	b508      	push	{r3, lr}
   b5792:	4b02      	ldr	r3, [pc, #8]	; (b579c <hal_ble_gap_get_device_address+0xc>)
   b5794:	681b      	ldr	r3, [r3, #0]
   b5796:	69db      	ldr	r3, [r3, #28]
   b5798:	9301      	str	r3, [sp, #4]
   b579a:	bd08      	pop	{r3, pc}
   b579c:	00030278 	.word	0x00030278

000b57a0 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b57a0:	b508      	push	{r3, lr}
   b57a2:	4b02      	ldr	r3, [pc, #8]	; (b57ac <hal_ble_gap_set_advertising_data+0xc>)
   b57a4:	681b      	ldr	r3, [r3, #0]
   b57a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b57a8:	9301      	str	r3, [sp, #4]
   b57aa:	bd08      	pop	{r3, pc}
   b57ac:	00030278 	.word	0x00030278

000b57b0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b57b0:	b508      	push	{r3, lr}
   b57b2:	4b02      	ldr	r3, [pc, #8]	; (b57bc <hal_ble_gap_set_scan_response_data+0xc>)
   b57b4:	681b      	ldr	r3, [r3, #0]
   b57b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b57b8:	9301      	str	r3, [sp, #4]
   b57ba:	bd08      	pop	{r3, pc}
   b57bc:	00030278 	.word	0x00030278

000b57c0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b57c0:	b508      	push	{r3, lr}
   b57c2:	4b02      	ldr	r3, [pc, #8]	; (b57cc <hal_ble_gap_start_advertising+0xc>)
   b57c4:	681b      	ldr	r3, [r3, #0]
   b57c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b57c8:	9301      	str	r3, [sp, #4]
   b57ca:	bd08      	pop	{r3, pc}
   b57cc:	00030278 	.word	0x00030278

000b57d0 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b57d0:	b508      	push	{r3, lr}
   b57d2:	4b02      	ldr	r3, [pc, #8]	; (b57dc <hal_ble_gap_set_scan_parameters+0xc>)
   b57d4:	681b      	ldr	r3, [r3, #0]
   b57d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b57d8:	9301      	str	r3, [sp, #4]
   b57da:	bd08      	pop	{r3, pc}
   b57dc:	00030278 	.word	0x00030278

000b57e0 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b57e0:	b508      	push	{r3, lr}
   b57e2:	4b02      	ldr	r3, [pc, #8]	; (b57ec <hal_ble_gap_get_scan_parameters+0xc>)
   b57e4:	681b      	ldr	r3, [r3, #0]
   b57e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b57e8:	9301      	str	r3, [sp, #4]
   b57ea:	bd08      	pop	{r3, pc}
   b57ec:	00030278 	.word	0x00030278

000b57f0 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b57f0:	b508      	push	{r3, lr}
   b57f2:	4b02      	ldr	r3, [pc, #8]	; (b57fc <hal_ble_gap_start_scan+0xc>)
   b57f4:	681b      	ldr	r3, [r3, #0]
   b57f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b57f8:	9301      	str	r3, [sp, #4]
   b57fa:	bd08      	pop	{r3, pc}
   b57fc:	00030278 	.word	0x00030278

000b5800 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b5800:	b508      	push	{r3, lr}
   b5802:	4b03      	ldr	r3, [pc, #12]	; (b5810 <hal_ble_gap_stop_scan+0x10>)
   b5804:	681b      	ldr	r3, [r3, #0]
   b5806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b580a:	9301      	str	r3, [sp, #4]
   b580c:	bd08      	pop	{r3, pc}
   b580e:	0000      	.short	0x0000
   b5810:	00030278 	.word	0x00030278

000b5814 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b03      	ldr	r3, [pc, #12]	; (b5824 <hal_ble_gap_disconnect+0x10>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b581e:	9301      	str	r3, [sp, #4]
   b5820:	bd08      	pop	{r3, pc}
   b5822:	0000      	.short	0x0000
   b5824:	00030278 	.word	0x00030278

000b5828 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b03      	ldr	r3, [pc, #12]	; (b5838 <hal_ble_gatt_server_add_service+0x10>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5832:	9301      	str	r3, [sp, #4]
   b5834:	bd08      	pop	{r3, pc}
   b5836:	0000      	.short	0x0000
   b5838:	00030278 	.word	0x00030278

000b583c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b583c:	b508      	push	{r3, lr}
   b583e:	4b03      	ldr	r3, [pc, #12]	; (b584c <hal_ble_gatt_server_add_characteristic+0x10>)
   b5840:	681b      	ldr	r3, [r3, #0]
   b5842:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5846:	9301      	str	r3, [sp, #4]
   b5848:	bd08      	pop	{r3, pc}
   b584a:	0000      	.short	0x0000
   b584c:	00030278 	.word	0x00030278

000b5850 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5850:	b508      	push	{r3, lr}
   b5852:	4b03      	ldr	r3, [pc, #12]	; (b5860 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5854:	681b      	ldr	r3, [r3, #0]
   b5856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b585a:	9301      	str	r3, [sp, #4]
   b585c:	bd08      	pop	{r3, pc}
   b585e:	0000      	.short	0x0000
   b5860:	00030278 	.word	0x00030278

000b5864 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5864:	b508      	push	{r3, lr}
   b5866:	4b02      	ldr	r3, [pc, #8]	; (b5870 <os_mutex_recursive_create+0xc>)
   b5868:	681b      	ldr	r3, [r3, #0]
   b586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b586c:	9301      	str	r3, [sp, #4]
   b586e:	bd08      	pop	{r3, pc}
   b5870:	00030248 	.word	0x00030248

000b5874 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5874:	b508      	push	{r3, lr}
   b5876:	4b02      	ldr	r3, [pc, #8]	; (b5880 <os_mutex_recursive_lock+0xc>)
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b587c:	9301      	str	r3, [sp, #4]
   b587e:	bd08      	pop	{r3, pc}
   b5880:	00030248 	.word	0x00030248

000b5884 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5884:	b508      	push	{r3, lr}
   b5886:	4b02      	ldr	r3, [pc, #8]	; (b5890 <os_mutex_recursive_unlock+0xc>)
   b5888:	681b      	ldr	r3, [r3, #0]
   b588a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b588c:	9301      	str	r3, [sp, #4]
   b588e:	bd08      	pop	{r3, pc}
   b5890:	00030248 	.word	0x00030248

000b5894 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5894:	b508      	push	{r3, lr}
   b5896:	4b02      	ldr	r3, [pc, #8]	; (b58a0 <inet_inet_ntop+0xc>)
   b5898:	681b      	ldr	r3, [r3, #0]
   b589a:	695b      	ldr	r3, [r3, #20]
   b589c:	9301      	str	r3, [sp, #4]
   b589e:	bd08      	pop	{r3, pc}
   b58a0:	00030264 	.word	0x00030264

000b58a4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b58a4:	b508      	push	{r3, lr}
   b58a6:	4b02      	ldr	r3, [pc, #8]	; (b58b0 <hal_usart_write+0xc>)
   b58a8:	681b      	ldr	r3, [r3, #0]
   b58aa:	68db      	ldr	r3, [r3, #12]
   b58ac:	9301      	str	r3, [sp, #4]
   b58ae:	bd08      	pop	{r3, pc}
   b58b0:	0003023c 	.word	0x0003023c

000b58b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b58b4:	b508      	push	{r3, lr}
   b58b6:	4b02      	ldr	r3, [pc, #8]	; (b58c0 <hal_usart_available+0xc>)
   b58b8:	681b      	ldr	r3, [r3, #0]
   b58ba:	691b      	ldr	r3, [r3, #16]
   b58bc:	9301      	str	r3, [sp, #4]
   b58be:	bd08      	pop	{r3, pc}
   b58c0:	0003023c 	.word	0x0003023c

000b58c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b58c4:	b508      	push	{r3, lr}
   b58c6:	4b02      	ldr	r3, [pc, #8]	; (b58d0 <hal_usart_read+0xc>)
   b58c8:	681b      	ldr	r3, [r3, #0]
   b58ca:	695b      	ldr	r3, [r3, #20]
   b58cc:	9301      	str	r3, [sp, #4]
   b58ce:	bd08      	pop	{r3, pc}
   b58d0:	0003023c 	.word	0x0003023c

000b58d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b58d4:	b508      	push	{r3, lr}
   b58d6:	4b02      	ldr	r3, [pc, #8]	; (b58e0 <hal_usart_peek+0xc>)
   b58d8:	681b      	ldr	r3, [r3, #0]
   b58da:	699b      	ldr	r3, [r3, #24]
   b58dc:	9301      	str	r3, [sp, #4]
   b58de:	bd08      	pop	{r3, pc}
   b58e0:	0003023c 	.word	0x0003023c

000b58e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b58e4:	b508      	push	{r3, lr}
   b58e6:	4b02      	ldr	r3, [pc, #8]	; (b58f0 <hal_usart_flush+0xc>)
   b58e8:	681b      	ldr	r3, [r3, #0]
   b58ea:	69db      	ldr	r3, [r3, #28]
   b58ec:	9301      	str	r3, [sp, #4]
   b58ee:	bd08      	pop	{r3, pc}
   b58f0:	0003023c 	.word	0x0003023c

000b58f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b58f4:	b508      	push	{r3, lr}
   b58f6:	4b02      	ldr	r3, [pc, #8]	; (b5900 <hal_usart_is_enabled+0xc>)
   b58f8:	681b      	ldr	r3, [r3, #0]
   b58fa:	6a1b      	ldr	r3, [r3, #32]
   b58fc:	9301      	str	r3, [sp, #4]
   b58fe:	bd08      	pop	{r3, pc}
   b5900:	0003023c 	.word	0x0003023c

000b5904 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5904:	b508      	push	{r3, lr}
   b5906:	4b02      	ldr	r3, [pc, #8]	; (b5910 <hal_usart_available_data_for_write+0xc>)
   b5908:	681b      	ldr	r3, [r3, #0]
   b590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b590c:	9301      	str	r3, [sp, #4]
   b590e:	bd08      	pop	{r3, pc}
   b5910:	0003023c 	.word	0x0003023c

000b5914 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5914:	b508      	push	{r3, lr}
   b5916:	4b02      	ldr	r3, [pc, #8]	; (b5920 <hal_usart_init_ex+0xc>)
   b5918:	681b      	ldr	r3, [r3, #0]
   b591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b591c:	9301      	str	r3, [sp, #4]
   b591e:	bd08      	pop	{r3, pc}
   b5920:	0003023c 	.word	0x0003023c

000b5924 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5924:	b508      	push	{r3, lr}
   b5926:	4b02      	ldr	r3, [pc, #8]	; (b5930 <hal_i2c_begin+0xc>)
   b5928:	681b      	ldr	r3, [r3, #0]
   b592a:	68db      	ldr	r3, [r3, #12]
   b592c:	9301      	str	r3, [sp, #4]
   b592e:	bd08      	pop	{r3, pc}
   b5930:	00030228 	.word	0x00030228

000b5934 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5934:	b508      	push	{r3, lr}
   b5936:	4b02      	ldr	r3, [pc, #8]	; (b5940 <hal_i2c_begin_transmission+0xc>)
   b5938:	681b      	ldr	r3, [r3, #0]
   b593a:	699b      	ldr	r3, [r3, #24]
   b593c:	9301      	str	r3, [sp, #4]
   b593e:	bd08      	pop	{r3, pc}
   b5940:	00030228 	.word	0x00030228

000b5944 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5944:	b508      	push	{r3, lr}
   b5946:	4b02      	ldr	r3, [pc, #8]	; (b5950 <hal_i2c_end_transmission+0xc>)
   b5948:	681b      	ldr	r3, [r3, #0]
   b594a:	69db      	ldr	r3, [r3, #28]
   b594c:	9301      	str	r3, [sp, #4]
   b594e:	bd08      	pop	{r3, pc}
   b5950:	00030228 	.word	0x00030228

000b5954 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5954:	b508      	push	{r3, lr}
   b5956:	4b02      	ldr	r3, [pc, #8]	; (b5960 <hal_i2c_write+0xc>)
   b5958:	681b      	ldr	r3, [r3, #0]
   b595a:	6a1b      	ldr	r3, [r3, #32]
   b595c:	9301      	str	r3, [sp, #4]
   b595e:	bd08      	pop	{r3, pc}
   b5960:	00030228 	.word	0x00030228

000b5964 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5964:	b508      	push	{r3, lr}
   b5966:	4b02      	ldr	r3, [pc, #8]	; (b5970 <hal_i2c_available+0xc>)
   b5968:	681b      	ldr	r3, [r3, #0]
   b596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b596c:	9301      	str	r3, [sp, #4]
   b596e:	bd08      	pop	{r3, pc}
   b5970:	00030228 	.word	0x00030228

000b5974 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5974:	b508      	push	{r3, lr}
   b5976:	4b02      	ldr	r3, [pc, #8]	; (b5980 <hal_i2c_read+0xc>)
   b5978:	681b      	ldr	r3, [r3, #0]
   b597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b597c:	9301      	str	r3, [sp, #4]
   b597e:	bd08      	pop	{r3, pc}
   b5980:	00030228 	.word	0x00030228

000b5984 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5984:	b508      	push	{r3, lr}
   b5986:	4b02      	ldr	r3, [pc, #8]	; (b5990 <hal_i2c_peek+0xc>)
   b5988:	681b      	ldr	r3, [r3, #0]
   b598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b598c:	9301      	str	r3, [sp, #4]
   b598e:	bd08      	pop	{r3, pc}
   b5990:	00030228 	.word	0x00030228

000b5994 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5994:	b508      	push	{r3, lr}
   b5996:	4b02      	ldr	r3, [pc, #8]	; (b59a0 <hal_i2c_flush+0xc>)
   b5998:	681b      	ldr	r3, [r3, #0]
   b599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b599c:	9301      	str	r3, [sp, #4]
   b599e:	bd08      	pop	{r3, pc}
   b59a0:	00030228 	.word	0x00030228

000b59a4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b59a4:	b508      	push	{r3, lr}
   b59a6:	4b02      	ldr	r3, [pc, #8]	; (b59b0 <hal_i2c_is_enabled+0xc>)
   b59a8:	681b      	ldr	r3, [r3, #0]
   b59aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b59ac:	9301      	str	r3, [sp, #4]
   b59ae:	bd08      	pop	{r3, pc}
   b59b0:	00030228 	.word	0x00030228

000b59b4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b59b4:	b508      	push	{r3, lr}
   b59b6:	4b02      	ldr	r3, [pc, #8]	; (b59c0 <hal_i2c_init+0xc>)
   b59b8:	681b      	ldr	r3, [r3, #0]
   b59ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b59bc:	9301      	str	r3, [sp, #4]
   b59be:	bd08      	pop	{r3, pc}
   b59c0:	00030228 	.word	0x00030228

000b59c4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b59c4:	b508      	push	{r3, lr}
   b59c6:	4b02      	ldr	r3, [pc, #8]	; (b59d0 <hal_spi_begin+0xc>)
   b59c8:	681b      	ldr	r3, [r3, #0]
   b59ca:	681b      	ldr	r3, [r3, #0]
   b59cc:	9301      	str	r3, [sp, #4]
   b59ce:	bd08      	pop	{r3, pc}
   b59d0:	00030230 	.word	0x00030230

000b59d4 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b59d4:	b508      	push	{r3, lr}
   b59d6:	4b02      	ldr	r3, [pc, #8]	; (b59e0 <hal_spi_set_bit_order+0xc>)
   b59d8:	681b      	ldr	r3, [r3, #0]
   b59da:	689b      	ldr	r3, [r3, #8]
   b59dc:	9301      	str	r3, [sp, #4]
   b59de:	bd08      	pop	{r3, pc}
   b59e0:	00030230 	.word	0x00030230

000b59e4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b59e4:	b508      	push	{r3, lr}
   b59e6:	4b02      	ldr	r3, [pc, #8]	; (b59f0 <hal_spi_set_data_mode+0xc>)
   b59e8:	681b      	ldr	r3, [r3, #0]
   b59ea:	68db      	ldr	r3, [r3, #12]
   b59ec:	9301      	str	r3, [sp, #4]
   b59ee:	bd08      	pop	{r3, pc}
   b59f0:	00030230 	.word	0x00030230

000b59f4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b59f4:	b508      	push	{r3, lr}
   b59f6:	4b02      	ldr	r3, [pc, #8]	; (b5a00 <hal_spi_set_clock_divider+0xc>)
   b59f8:	681b      	ldr	r3, [r3, #0]
   b59fa:	691b      	ldr	r3, [r3, #16]
   b59fc:	9301      	str	r3, [sp, #4]
   b59fe:	bd08      	pop	{r3, pc}
   b5a00:	00030230 	.word	0x00030230

000b5a04 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5a04:	b508      	push	{r3, lr}
   b5a06:	4b02      	ldr	r3, [pc, #8]	; (b5a10 <hal_spi_transfer+0xc>)
   b5a08:	681b      	ldr	r3, [r3, #0]
   b5a0a:	695b      	ldr	r3, [r3, #20]
   b5a0c:	9301      	str	r3, [sp, #4]
   b5a0e:	bd08      	pop	{r3, pc}
   b5a10:	00030230 	.word	0x00030230

000b5a14 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5a14:	b508      	push	{r3, lr}
   b5a16:	4b02      	ldr	r3, [pc, #8]	; (b5a20 <hal_spi_init+0xc>)
   b5a18:	681b      	ldr	r3, [r3, #0]
   b5a1a:	69db      	ldr	r3, [r3, #28]
   b5a1c:	9301      	str	r3, [sp, #4]
   b5a1e:	bd08      	pop	{r3, pc}
   b5a20:	00030230 	.word	0x00030230

000b5a24 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5a24:	b508      	push	{r3, lr}
   b5a26:	4b02      	ldr	r3, [pc, #8]	; (b5a30 <hal_spi_is_enabled+0xc>)
   b5a28:	681b      	ldr	r3, [r3, #0]
   b5a2a:	6a1b      	ldr	r3, [r3, #32]
   b5a2c:	9301      	str	r3, [sp, #4]
   b5a2e:	bd08      	pop	{r3, pc}
   b5a30:	00030230 	.word	0x00030230

000b5a34 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5a34:	b508      	push	{r3, lr}
   b5a36:	4b02      	ldr	r3, [pc, #8]	; (b5a40 <hal_spi_info+0xc>)
   b5a38:	681b      	ldr	r3, [r3, #0]
   b5a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5a3c:	9301      	str	r3, [sp, #4]
   b5a3e:	bd08      	pop	{r3, pc}
   b5a40:	00030230 	.word	0x00030230

000b5a44 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5a44:	b508      	push	{r3, lr}
   b5a46:	4b02      	ldr	r3, [pc, #8]	; (b5a50 <hal_spi_acquire+0xc>)
   b5a48:	681b      	ldr	r3, [r3, #0]
   b5a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a4c:	9301      	str	r3, [sp, #4]
   b5a4e:	bd08      	pop	{r3, pc}
   b5a50:	00030230 	.word	0x00030230

000b5a54 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5a54:	b508      	push	{r3, lr}
   b5a56:	4b02      	ldr	r3, [pc, #8]	; (b5a60 <hal_spi_release+0xc>)
   b5a58:	681b      	ldr	r3, [r3, #0]
   b5a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a5c:	9301      	str	r3, [sp, #4]
   b5a5e:	bd08      	pop	{r3, pc}
   b5a60:	00030230 	.word	0x00030230

000b5a64 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5a64:	b508      	push	{r3, lr}
   b5a66:	4b02      	ldr	r3, [pc, #8]	; (b5a70 <HAL_USB_USART_Init+0xc>)
   b5a68:	681b      	ldr	r3, [r3, #0]
   b5a6a:	681b      	ldr	r3, [r3, #0]
   b5a6c:	9301      	str	r3, [sp, #4]
   b5a6e:	bd08      	pop	{r3, pc}
   b5a70:	0003024c 	.word	0x0003024c

000b5a74 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5a74:	b508      	push	{r3, lr}
   b5a76:	4b02      	ldr	r3, [pc, #8]	; (b5a80 <HAL_USB_USART_Begin+0xc>)
   b5a78:	681b      	ldr	r3, [r3, #0]
   b5a7a:	685b      	ldr	r3, [r3, #4]
   b5a7c:	9301      	str	r3, [sp, #4]
   b5a7e:	bd08      	pop	{r3, pc}
   b5a80:	0003024c 	.word	0x0003024c

000b5a84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5a84:	b508      	push	{r3, lr}
   b5a86:	4b02      	ldr	r3, [pc, #8]	; (b5a90 <HAL_USB_USART_Available_Data+0xc>)
   b5a88:	681b      	ldr	r3, [r3, #0]
   b5a8a:	691b      	ldr	r3, [r3, #16]
   b5a8c:	9301      	str	r3, [sp, #4]
   b5a8e:	bd08      	pop	{r3, pc}
   b5a90:	0003024c 	.word	0x0003024c

000b5a94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5a94:	b508      	push	{r3, lr}
   b5a96:	4b02      	ldr	r3, [pc, #8]	; (b5aa0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5a98:	681b      	ldr	r3, [r3, #0]
   b5a9a:	695b      	ldr	r3, [r3, #20]
   b5a9c:	9301      	str	r3, [sp, #4]
   b5a9e:	bd08      	pop	{r3, pc}
   b5aa0:	0003024c 	.word	0x0003024c

000b5aa4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5aa4:	b508      	push	{r3, lr}
   b5aa6:	4b02      	ldr	r3, [pc, #8]	; (b5ab0 <HAL_USB_USART_Receive_Data+0xc>)
   b5aa8:	681b      	ldr	r3, [r3, #0]
   b5aaa:	699b      	ldr	r3, [r3, #24]
   b5aac:	9301      	str	r3, [sp, #4]
   b5aae:	bd08      	pop	{r3, pc}
   b5ab0:	0003024c 	.word	0x0003024c

000b5ab4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5ab4:	b508      	push	{r3, lr}
   b5ab6:	4b02      	ldr	r3, [pc, #8]	; (b5ac0 <HAL_USB_USART_Send_Data+0xc>)
   b5ab8:	681b      	ldr	r3, [r3, #0]
   b5aba:	69db      	ldr	r3, [r3, #28]
   b5abc:	9301      	str	r3, [sp, #4]
   b5abe:	bd08      	pop	{r3, pc}
   b5ac0:	0003024c 	.word	0x0003024c

000b5ac4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5ac4:	b508      	push	{r3, lr}
   b5ac6:	4b02      	ldr	r3, [pc, #8]	; (b5ad0 <HAL_USB_USART_Flush_Data+0xc>)
   b5ac8:	681b      	ldr	r3, [r3, #0]
   b5aca:	6a1b      	ldr	r3, [r3, #32]
   b5acc:	9301      	str	r3, [sp, #4]
   b5ace:	bd08      	pop	{r3, pc}
   b5ad0:	0003024c 	.word	0x0003024c

000b5ad4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5ad4:	b508      	push	{r3, lr}
   b5ad6:	4b02      	ldr	r3, [pc, #8]	; (b5ae0 <HAL_USB_USART_Is_Connected+0xc>)
   b5ad8:	681b      	ldr	r3, [r3, #0]
   b5ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5adc:	9301      	str	r3, [sp, #4]
   b5ade:	bd08      	pop	{r3, pc}
   b5ae0:	0003024c 	.word	0x0003024c

000b5ae4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5ae4:	b508      	push	{r3, lr}
   b5ae6:	4b02      	ldr	r3, [pc, #8]	; (b5af0 <panic_+0xc>)
   b5ae8:	681b      	ldr	r3, [r3, #0]
   b5aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5aec:	9301      	str	r3, [sp, #4]
   b5aee:	bd08      	pop	{r3, pc}
   b5af0:	00030260 	.word	0x00030260

000b5af4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5af4:	b508      	push	{r3, lr}
   b5af6:	4b02      	ldr	r3, [pc, #8]	; (b5b00 <log_message+0xc>)
   b5af8:	681b      	ldr	r3, [r3, #0]
   b5afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5afc:	9301      	str	r3, [sp, #4]
   b5afe:	bd08      	pop	{r3, pc}
   b5b00:	00030260 	.word	0x00030260

000b5b04 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5b04:	b508      	push	{r3, lr}
   b5b06:	4b02      	ldr	r3, [pc, #8]	; (b5b10 <set_system_mode+0xc>)
   b5b08:	681b      	ldr	r3, [r3, #0]
   b5b0a:	685b      	ldr	r3, [r3, #4]
   b5b0c:	9301      	str	r3, [sp, #4]
   b5b0e:	bd08      	pop	{r3, pc}
   b5b10:	00030220 	.word	0x00030220

000b5b14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5b14:	b508      	push	{r3, lr}
   b5b16:	4b02      	ldr	r3, [pc, #8]	; (b5b20 <system_delay_ms+0xc>)
   b5b18:	681b      	ldr	r3, [r3, #0]
   b5b1a:	695b      	ldr	r3, [r3, #20]
   b5b1c:	9301      	str	r3, [sp, #4]
   b5b1e:	bd08      	pop	{r3, pc}
   b5b20:	00030220 	.word	0x00030220

000b5b24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5b24:	b508      	push	{r3, lr}
   b5b26:	4b03      	ldr	r3, [pc, #12]	; (b5b34 <system_ctrl_set_app_request_handler+0x10>)
   b5b28:	681b      	ldr	r3, [r3, #0]
   b5b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5b2e:	9301      	str	r3, [sp, #4]
   b5b30:	bd08      	pop	{r3, pc}
   b5b32:	0000      	.short	0x0000
   b5b34:	00030220 	.word	0x00030220

000b5b38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b03      	ldr	r3, [pc, #12]	; (b5b48 <system_ctrl_set_result+0x10>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5b42:	9301      	str	r3, [sp, #4]
   b5b44:	bd08      	pop	{r3, pc}
   b5b46:	0000      	.short	0x0000
   b5b48:	00030220 	.word	0x00030220

000b5b4c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5b4c:	b508      	push	{r3, lr}
   b5b4e:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <network_connect+0xc>)
   b5b50:	681b      	ldr	r3, [r3, #0]
   b5b52:	685b      	ldr	r3, [r3, #4]
   b5b54:	9301      	str	r3, [sp, #4]
   b5b56:	bd08      	pop	{r3, pc}
   b5b58:	00030240 	.word	0x00030240

000b5b5c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5b5c:	b508      	push	{r3, lr}
   b5b5e:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <network_connecting+0xc>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	689b      	ldr	r3, [r3, #8]
   b5b64:	9301      	str	r3, [sp, #4]
   b5b66:	bd08      	pop	{r3, pc}
   b5b68:	00030240 	.word	0x00030240

000b5b6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5b6c:	b508      	push	{r3, lr}
   b5b6e:	4b02      	ldr	r3, [pc, #8]	; (b5b78 <network_disconnect+0xc>)
   b5b70:	681b      	ldr	r3, [r3, #0]
   b5b72:	68db      	ldr	r3, [r3, #12]
   b5b74:	9301      	str	r3, [sp, #4]
   b5b76:	bd08      	pop	{r3, pc}
   b5b78:	00030240 	.word	0x00030240

000b5b7c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5b7c:	b508      	push	{r3, lr}
   b5b7e:	4b02      	ldr	r3, [pc, #8]	; (b5b88 <network_ready+0xc>)
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	691b      	ldr	r3, [r3, #16]
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	bd08      	pop	{r3, pc}
   b5b88:	00030240 	.word	0x00030240

000b5b8c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5b8c:	b508      	push	{r3, lr}
   b5b8e:	4b02      	ldr	r3, [pc, #8]	; (b5b98 <network_on+0xc>)
   b5b90:	681b      	ldr	r3, [r3, #0]
   b5b92:	695b      	ldr	r3, [r3, #20]
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	00030240 	.word	0x00030240

000b5b9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5b9c:	b508      	push	{r3, lr}
   b5b9e:	4b02      	ldr	r3, [pc, #8]	; (b5ba8 <network_off+0xc>)
   b5ba0:	681b      	ldr	r3, [r3, #0]
   b5ba2:	699b      	ldr	r3, [r3, #24]
   b5ba4:	9301      	str	r3, [sp, #4]
   b5ba6:	bd08      	pop	{r3, pc}
   b5ba8:	00030240 	.word	0x00030240

000b5bac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5bac:	b508      	push	{r3, lr}
   b5bae:	4b02      	ldr	r3, [pc, #8]	; (b5bb8 <network_listen+0xc>)
   b5bb0:	681b      	ldr	r3, [r3, #0]
   b5bb2:	69db      	ldr	r3, [r3, #28]
   b5bb4:	9301      	str	r3, [sp, #4]
   b5bb6:	bd08      	pop	{r3, pc}
   b5bb8:	00030240 	.word	0x00030240

000b5bbc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5bbc:	b508      	push	{r3, lr}
   b5bbe:	4b02      	ldr	r3, [pc, #8]	; (b5bc8 <network_listening+0xc>)
   b5bc0:	681b      	ldr	r3, [r3, #0]
   b5bc2:	6a1b      	ldr	r3, [r3, #32]
   b5bc4:	9301      	str	r3, [sp, #4]
   b5bc6:	bd08      	pop	{r3, pc}
   b5bc8:	00030240 	.word	0x00030240

000b5bcc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5bcc:	b508      	push	{r3, lr}
   b5bce:	4b02      	ldr	r3, [pc, #8]	; (b5bd8 <network_set_listen_timeout+0xc>)
   b5bd0:	681b      	ldr	r3, [r3, #0]
   b5bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5bd4:	9301      	str	r3, [sp, #4]
   b5bd6:	bd08      	pop	{r3, pc}
   b5bd8:	00030240 	.word	0x00030240

000b5bdc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5bdc:	b508      	push	{r3, lr}
   b5bde:	4b02      	ldr	r3, [pc, #8]	; (b5be8 <network_get_listen_timeout+0xc>)
   b5be0:	681b      	ldr	r3, [r3, #0]
   b5be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5be4:	9301      	str	r3, [sp, #4]
   b5be6:	bd08      	pop	{r3, pc}
   b5be8:	00030240 	.word	0x00030240

000b5bec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5bec:	b508      	push	{r3, lr}
   b5bee:	4b02      	ldr	r3, [pc, #8]	; (b5bf8 <network_is_on+0xc>)
   b5bf0:	681b      	ldr	r3, [r3, #0]
   b5bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bf4:	9301      	str	r3, [sp, #4]
   b5bf6:	bd08      	pop	{r3, pc}
   b5bf8:	00030240 	.word	0x00030240

000b5bfc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5bfc:	b508      	push	{r3, lr}
   b5bfe:	4b02      	ldr	r3, [pc, #8]	; (b5c08 <network_is_off+0xc>)
   b5c00:	681b      	ldr	r3, [r3, #0]
   b5c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c04:	9301      	str	r3, [sp, #4]
   b5c06:	bd08      	pop	{r3, pc}
   b5c08:	00030240 	.word	0x00030240

000b5c0c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5c0c:	b508      	push	{r3, lr}
   b5c0e:	4b02      	ldr	r3, [pc, #8]	; (b5c18 <spark_process+0xc>)
   b5c10:	681b      	ldr	r3, [r3, #0]
   b5c12:	689b      	ldr	r3, [r3, #8]
   b5c14:	9301      	str	r3, [sp, #4]
   b5c16:	bd08      	pop	{r3, pc}
   b5c18:	00030244 	.word	0x00030244

000b5c1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5c1c:	b508      	push	{r3, lr}
   b5c1e:	4b02      	ldr	r3, [pc, #8]	; (b5c28 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5c20:	681b      	ldr	r3, [r3, #0]
   b5c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c24:	9301      	str	r3, [sp, #4]
   b5c26:	bd08      	pop	{r3, pc}
   b5c28:	00030244 	.word	0x00030244

000b5c2c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5c2c:	b508      	push	{r3, lr}
   b5c2e:	4b02      	ldr	r3, [pc, #8]	; (b5c38 <malloc+0xc>)
   b5c30:	681b      	ldr	r3, [r3, #0]
   b5c32:	681b      	ldr	r3, [r3, #0]
   b5c34:	9301      	str	r3, [sp, #4]
   b5c36:	bd08      	pop	{r3, pc}
   b5c38:	0003021c 	.word	0x0003021c

000b5c3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5c3c:	b508      	push	{r3, lr}
   b5c3e:	4b02      	ldr	r3, [pc, #8]	; (b5c48 <free+0xc>)
   b5c40:	681b      	ldr	r3, [r3, #0]
   b5c42:	685b      	ldr	r3, [r3, #4]
   b5c44:	9301      	str	r3, [sp, #4]
   b5c46:	bd08      	pop	{r3, pc}
   b5c48:	0003021c 	.word	0x0003021c

000b5c4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5c4c:	b508      	push	{r3, lr}
   b5c4e:	4b02      	ldr	r3, [pc, #8]	; (b5c58 <realloc+0xc>)
   b5c50:	681b      	ldr	r3, [r3, #0]
   b5c52:	689b      	ldr	r3, [r3, #8]
   b5c54:	9301      	str	r3, [sp, #4]
   b5c56:	bd08      	pop	{r3, pc}
   b5c58:	0003021c 	.word	0x0003021c

000b5c5c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5c5c:	b508      	push	{r3, lr}
   b5c5e:	4b02      	ldr	r3, [pc, #8]	; (b5c68 <vsnprintf+0xc>)
   b5c60:	681b      	ldr	r3, [r3, #0]
   b5c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c64:	9301      	str	r3, [sp, #4]
   b5c66:	bd08      	pop	{r3, pc}
   b5c68:	0003021c 	.word	0x0003021c

000b5c6c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	4b02      	ldr	r3, [pc, #8]	; (b5c78 <abort+0xc>)
   b5c70:	681b      	ldr	r3, [r3, #0]
   b5c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c74:	9301      	str	r3, [sp, #4]
   b5c76:	bd08      	pop	{r3, pc}
   b5c78:	0003021c 	.word	0x0003021c

000b5c7c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5c7c:	b508      	push	{r3, lr}
   b5c7e:	4b02      	ldr	r3, [pc, #8]	; (b5c88 <__errno+0xc>)
   b5c80:	681b      	ldr	r3, [r3, #0]
   b5c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c84:	9301      	str	r3, [sp, #4]
   b5c86:	bd08      	pop	{r3, pc}
   b5c88:	0003021c 	.word	0x0003021c

000b5c8c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5c8c:	b508      	push	{r3, lr}
   b5c8e:	4b02      	ldr	r3, [pc, #8]	; (b5c98 <__assert_func+0xc>)
   b5c90:	681b      	ldr	r3, [r3, #0]
   b5c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c94:	9301      	str	r3, [sp, #4]
   b5c96:	bd08      	pop	{r3, pc}
   b5c98:	0003021c 	.word	0x0003021c

000b5c9c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4b02      	ldr	r3, [pc, #8]	; (b5ca8 <newlib_impure_ptr_callback+0xc>)
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	bd08      	pop	{r3, pc}
   b5ca8:	0003021c 	.word	0x0003021c

000b5cac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5cac:	2200      	movs	r2, #0
   b5cae:	6840      	ldr	r0, [r0, #4]
   b5cb0:	4611      	mov	r1, r2
   b5cb2:	f7ff bf83 	b.w	b5bbc <network_listening>

000b5cb6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5cb6:	2200      	movs	r2, #0
   b5cb8:	6840      	ldr	r0, [r0, #4]
   b5cba:	4611      	mov	r1, r2
   b5cbc:	f7ff bf8e 	b.w	b5bdc <network_get_listen_timeout>

000b5cc0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5cc0:	6840      	ldr	r0, [r0, #4]
   b5cc2:	2200      	movs	r2, #0
   b5cc4:	f7ff bf82 	b.w	b5bcc <network_set_listen_timeout>

000b5cc8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5cc8:	6840      	ldr	r0, [r0, #4]
   b5cca:	2200      	movs	r2, #0
   b5ccc:	f081 0101 	eor.w	r1, r1, #1
   b5cd0:	f7ff bf6c 	b.w	b5bac <network_listen>

000b5cd4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5cd4:	2300      	movs	r3, #0
   b5cd6:	6840      	ldr	r0, [r0, #4]
   b5cd8:	461a      	mov	r2, r3
   b5cda:	4619      	mov	r1, r3
   b5cdc:	f7ff bf5e 	b.w	b5b9c <network_off>

000b5ce0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5ce0:	2300      	movs	r3, #0
   b5ce2:	6840      	ldr	r0, [r0, #4]
   b5ce4:	461a      	mov	r2, r3
   b5ce6:	4619      	mov	r1, r3
   b5ce8:	f7ff bf50 	b.w	b5b8c <network_on>

000b5cec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5cec:	2200      	movs	r2, #0
   b5cee:	6840      	ldr	r0, [r0, #4]
   b5cf0:	4611      	mov	r1, r2
   b5cf2:	f7ff bf43 	b.w	b5b7c <network_ready>

000b5cf6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5cf6:	2200      	movs	r2, #0
   b5cf8:	6840      	ldr	r0, [r0, #4]
   b5cfa:	4611      	mov	r1, r2
   b5cfc:	f7ff bf2e 	b.w	b5b5c <network_connecting>

000b5d00 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5d00:	6840      	ldr	r0, [r0, #4]
   b5d02:	2200      	movs	r2, #0
   b5d04:	2102      	movs	r1, #2
   b5d06:	f7ff bf31 	b.w	b5b6c <network_disconnect>

000b5d0a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5d0a:	2300      	movs	r3, #0
   b5d0c:	6840      	ldr	r0, [r0, #4]
   b5d0e:	461a      	mov	r2, r3
   b5d10:	f7ff bf1c 	b.w	b5b4c <network_connect>

000b5d14 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5d14:	4b02      	ldr	r3, [pc, #8]	; (b5d20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5d16:	2203      	movs	r2, #3
   b5d18:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5d1a:	4a02      	ldr	r2, [pc, #8]	; (b5d24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5d1c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5d1e:	4770      	bx	lr
   b5d20:	2003e6b8 	.word	0x2003e6b8
   b5d24:	000b9b00 	.word	0x000b9b00

000b5d28 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5d28:	2100      	movs	r1, #0
   b5d2a:	f7ff be93 	b.w	b5a54 <hal_spi_release>

000b5d2e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5d2e:	2100      	movs	r1, #0
   b5d30:	f7ff be88 	b.w	b5a44 <hal_spi_acquire>

000b5d34 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5d34:	b510      	push	{r4, lr}
   b5d36:	4604      	mov	r4, r0
   b5d38:	4608      	mov	r0, r1
{
    _spi = spi;
   b5d3a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5d3c:	f7ff fe6a 	bl	b5a14 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5d40:	2300      	movs	r3, #0
   b5d42:	6063      	str	r3, [r4, #4]
}
   b5d44:	4620      	mov	r0, r4
   b5d46:	bd10      	pop	{r4, pc}

000b5d48 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5d48:	b513      	push	{r0, r1, r4, lr}
   b5d4a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5d4c:	7800      	ldrb	r0, [r0, #0]
   b5d4e:	f7ff ffee 	bl	b5d2e <_ZN8SPIClass4lockEv.isra.0>
   b5d52:	b958      	cbnz	r0, b5d6c <_ZN8SPIClass5beginEv+0x24>
   b5d54:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5d56:	9001      	str	r0, [sp, #4]
   b5d58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5d5c:	f7ff fe32 	bl	b59c4 <hal_spi_begin>
        unlock();
   b5d60:	9801      	ldr	r0, [sp, #4]
    }
}
   b5d62:	b002      	add	sp, #8
   b5d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d68:	f7ff bfde 	b.w	b5d28 <_ZN8SPIClass6unlockEv.isra.0>
   b5d6c:	b002      	add	sp, #8
   b5d6e:	bd10      	pop	{r4, pc}

000b5d70 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b5d70:	b513      	push	{r0, r1, r4, lr}
   b5d72:	4604      	mov	r4, r0
    if (!lock())
   b5d74:	7800      	ldrb	r0, [r0, #0]
{
   b5d76:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5d78:	f7ff ffd9 	bl	b5d2e <_ZN8SPIClass4lockEv.isra.0>
   b5d7c:	9901      	ldr	r1, [sp, #4]
   b5d7e:	b948      	cbnz	r0, b5d94 <_ZN8SPIClass11setBitOrderEh+0x24>
   b5d80:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b5d82:	9001      	str	r0, [sp, #4]
   b5d84:	f7ff fe26 	bl	b59d4 <hal_spi_set_bit_order>
        unlock();
   b5d88:	9801      	ldr	r0, [sp, #4]
    }
}
   b5d8a:	b002      	add	sp, #8
   b5d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d90:	f7ff bfca 	b.w	b5d28 <_ZN8SPIClass6unlockEv.isra.0>
   b5d94:	b002      	add	sp, #8
   b5d96:	bd10      	pop	{r4, pc}

000b5d98 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5d98:	b513      	push	{r0, r1, r4, lr}
   b5d9a:	4604      	mov	r4, r0
    if (!lock())
   b5d9c:	7800      	ldrb	r0, [r0, #0]
{
   b5d9e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5da0:	f7ff ffc5 	bl	b5d2e <_ZN8SPIClass4lockEv.isra.0>
   b5da4:	9901      	ldr	r1, [sp, #4]
   b5da6:	b948      	cbnz	r0, b5dbc <_ZN8SPIClass11setDataModeEh+0x24>
   b5da8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5daa:	9001      	str	r0, [sp, #4]
   b5dac:	f7ff fe1a 	bl	b59e4 <hal_spi_set_data_mode>
        unlock();
   b5db0:	9801      	ldr	r0, [sp, #4]
    }
}
   b5db2:	b002      	add	sp, #8
   b5db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5db8:	f7ff bfb6 	b.w	b5d28 <_ZN8SPIClass6unlockEv.isra.0>
   b5dbc:	b002      	add	sp, #8
   b5dbe:	bd10      	pop	{r4, pc}

000b5dc0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5dc0:	0840      	lsrs	r0, r0, #1
{
   b5dc2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5dc4:	6018      	str	r0, [r3, #0]
   b5dc6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5dc8:	6818      	ldr	r0, [r3, #0]
   b5dca:	4288      	cmp	r0, r1
   b5dcc:	b2e5      	uxtb	r5, r4
   b5dce:	d906      	bls.n	b5dde <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5dd0:	3401      	adds	r4, #1
   b5dd2:	2c08      	cmp	r4, #8
   b5dd4:	d002      	beq.n	b5ddc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5dd6:	0840      	lsrs	r0, r0, #1
   b5dd8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5dda:	e7f5      	b.n	b5dc8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5ddc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5de0:	5d5b      	ldrb	r3, [r3, r5]
   b5de2:	7013      	strb	r3, [r2, #0]
}
   b5de4:	bd30      	pop	{r4, r5, pc}
   b5de6:	bf00      	nop
   b5de8:	000b9b34 	.word	0x000b9b34

000b5dec <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5df0:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5df2:	2300      	movs	r3, #0
{
   b5df4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b5df6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5df8:	9302      	str	r3, [sp, #8]
{
   b5dfa:	460e      	mov	r6, r1
   b5dfc:	4617      	mov	r7, r2
    if (!lock())
   b5dfe:	f7ff ff96 	bl	b5d2e <_ZN8SPIClass4lockEv.isra.0>
   b5e02:	4605      	mov	r5, r0
   b5e04:	bb00      	cbnz	r0, b5e48 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b5e06:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5e0a:	4601      	mov	r1, r0
   b5e0c:	2214      	movs	r2, #20
   b5e0e:	a803      	add	r0, sp, #12
   b5e10:	f002 ff96 	bl	b8d40 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5e14:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5e16:	462a      	mov	r2, r5
   b5e18:	a903      	add	r1, sp, #12
   b5e1a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5e1c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5e20:	f7ff fe08 	bl	b5a34 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5e24:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b5e26:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5e2a:	ab02      	add	r3, sp, #8
   b5e2c:	f10d 0207 	add.w	r2, sp, #7
   b5e30:	fb07 f106 	mul.w	r1, r7, r6
   b5e34:	f7ff ffc4 	bl	b5dc0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5e38:	7820      	ldrb	r0, [r4, #0]
   b5e3a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5e3e:	f7ff fdd9 	bl	b59f4 <hal_spi_set_clock_divider>
        unlock();
   b5e42:	7820      	ldrb	r0, [r4, #0]
   b5e44:	f7ff ff70 	bl	b5d28 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b5e48:	9802      	ldr	r0, [sp, #8]
   b5e4a:	b008      	add	sp, #32
   b5e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5e50 <_ZN8SPIClass15setClockDividerEh>:
{
   b5e50:	b538      	push	{r3, r4, r5, lr}
   b5e52:	4604      	mov	r4, r0
    if (!lock())
   b5e54:	7800      	ldrb	r0, [r0, #0]
{
   b5e56:	460d      	mov	r5, r1
    if (!lock())
   b5e58:	f7ff ff69 	bl	b5d2e <_ZN8SPIClass4lockEv.isra.0>
   b5e5c:	4603      	mov	r3, r0
   b5e5e:	b9d0      	cbnz	r0, b5e96 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5e60:	6861      	ldr	r1, [r4, #4]
   b5e62:	b199      	cbz	r1, b5e8c <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5e64:	4a0c      	ldr	r2, [pc, #48]	; (b5e98 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b5e66:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5e6a:	4285      	cmp	r5, r0
   b5e6c:	d002      	beq.n	b5e74 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b5e6e:	3301      	adds	r3, #1
   b5e70:	2b08      	cmp	r3, #8
   b5e72:	d1f8      	bne.n	b5e66 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5e74:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b5e76:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5e78:	2201      	movs	r2, #1
   b5e7a:	40d9      	lsrs	r1, r3
   b5e7c:	4620      	mov	r0, r4
   b5e7e:	f7ff ffb5 	bl	b5dec <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5e82:	7820      	ldrb	r0, [r4, #0]
}
   b5e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5e88:	f7ff bf4e 	b.w	b5d28 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5e8c:	7820      	ldrb	r0, [r4, #0]
   b5e8e:	4629      	mov	r1, r5
   b5e90:	f7ff fdb0 	bl	b59f4 <hal_spi_set_clock_divider>
   b5e94:	e7f5      	b.n	b5e82 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b5e96:	bd38      	pop	{r3, r4, r5, pc}
   b5e98:	000b9b34 	.word	0x000b9b34

000b5e9c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5e9c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5e9e:	7800      	ldrb	r0, [r0, #0]
   b5ea0:	f7ff fdb0 	bl	b5a04 <hal_spi_transfer>
}
   b5ea4:	b2c0      	uxtb	r0, r0
   b5ea6:	bd08      	pop	{r3, pc}

000b5ea8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5ea8:	4b05      	ldr	r3, [pc, #20]	; (b5ec0 <_GLOBAL__sub_I_System+0x18>)
   b5eaa:	2202      	movs	r2, #2
   b5eac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5eae:	4b05      	ldr	r3, [pc, #20]	; (b5ec4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5eb0:	4a05      	ldr	r2, [pc, #20]	; (b5ec8 <_GLOBAL__sub_I_System+0x20>)
   b5eb2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5eb4:	2000      	movs	r0, #0
   b5eb6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5eba:	f7ff be23 	b.w	b5b04 <set_system_mode>
   b5ebe:	bf00      	nop
   b5ec0:	2003e6cc 	.word	0x2003e6cc
   b5ec4:	2003e6c0 	.word	0x2003e6c0
   b5ec8:	ffff0000 	.word	0xffff0000

000b5ecc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5ecc:	b510      	push	{r4, lr}
   b5ece:	4604      	mov	r4, r0
{
	free(buffer);
   b5ed0:	6800      	ldr	r0, [r0, #0]
   b5ed2:	f7ff feb3 	bl	b5c3c <free>
}
   b5ed6:	4620      	mov	r0, r4
   b5ed8:	bd10      	pop	{r4, pc}

000b5eda <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5eda:	b510      	push	{r4, lr}
   b5edc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5ede:	6800      	ldr	r0, [r0, #0]
   b5ee0:	b108      	cbz	r0, b5ee6 <_ZN6String10invalidateEv+0xc>
   b5ee2:	f7ff feab 	bl	b5c3c <free>
	buffer = NULL;
   b5ee6:	2300      	movs	r3, #0
	capacity = len = 0;
   b5ee8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5eec:	6023      	str	r3, [r4, #0]
}
   b5eee:	bd10      	pop	{r4, pc}

000b5ef0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5ef0:	b538      	push	{r3, r4, r5, lr}
   b5ef2:	4604      	mov	r4, r0
   b5ef4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5ef6:	6800      	ldr	r0, [r0, #0]
   b5ef8:	3101      	adds	r1, #1
   b5efa:	f7ff fea7 	bl	b5c4c <realloc>
	if (newbuffer) {
   b5efe:	b110      	cbz	r0, b5f06 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5f00:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5f04:	2001      	movs	r0, #1
	}
	return 0;
}
   b5f06:	bd38      	pop	{r3, r4, r5, pc}

000b5f08 <_ZN6String7reserveEj>:
{
   b5f08:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5f0a:	6803      	ldr	r3, [r0, #0]
{
   b5f0c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5f0e:	b123      	cbz	r3, b5f1a <_ZN6String7reserveEj+0x12>
   b5f10:	6843      	ldr	r3, [r0, #4]
   b5f12:	428b      	cmp	r3, r1
   b5f14:	d301      	bcc.n	b5f1a <_ZN6String7reserveEj+0x12>
   b5f16:	2001      	movs	r0, #1
}
   b5f18:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5f1a:	4620      	mov	r0, r4
   b5f1c:	f7ff ffe8 	bl	b5ef0 <_ZN6String12changeBufferEj>
   b5f20:	2800      	cmp	r0, #0
   b5f22:	d0f9      	beq.n	b5f18 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5f24:	68a3      	ldr	r3, [r4, #8]
   b5f26:	2b00      	cmp	r3, #0
   b5f28:	d1f5      	bne.n	b5f16 <_ZN6String7reserveEj+0xe>
   b5f2a:	6822      	ldr	r2, [r4, #0]
   b5f2c:	7013      	strb	r3, [r2, #0]
   b5f2e:	e7f2      	b.n	b5f16 <_ZN6String7reserveEj+0xe>

000b5f30 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5f32:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5f34:	4611      	mov	r1, r2
   b5f36:	9201      	str	r2, [sp, #4]
{
   b5f38:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5f3a:	f7ff ffe5 	bl	b5f08 <_ZN6String7reserveEj>
   b5f3e:	9a01      	ldr	r2, [sp, #4]
   b5f40:	b928      	cbnz	r0, b5f4e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5f42:	4620      	mov	r0, r4
   b5f44:	f7ff ffc9 	bl	b5eda <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5f48:	4620      	mov	r0, r4
   b5f4a:	b003      	add	sp, #12
   b5f4c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5f4e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5f50:	4629      	mov	r1, r5
   b5f52:	6820      	ldr	r0, [r4, #0]
   b5f54:	f002 fecc 	bl	b8cf0 <memcpy>
	buffer[len] = 0;
   b5f58:	6822      	ldr	r2, [r4, #0]
   b5f5a:	68a3      	ldr	r3, [r4, #8]
   b5f5c:	2100      	movs	r1, #0
   b5f5e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5f60:	e7f2      	b.n	b5f48 <_ZN6String4copyEPKcj+0x18>

000b5f62 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5f62:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5f64:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5f66:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5f6a:	4604      	mov	r4, r0
	len = 0;
   b5f6c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5f6e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5f70:	b141      	cbz	r1, b5f84 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5f72:	4608      	mov	r0, r1
   b5f74:	9101      	str	r1, [sp, #4]
   b5f76:	f002 ff2b 	bl	b8dd0 <strlen>
   b5f7a:	9901      	ldr	r1, [sp, #4]
   b5f7c:	4602      	mov	r2, r0
   b5f7e:	4620      	mov	r0, r4
   b5f80:	f7ff ffd6 	bl	b5f30 <_ZN6String4copyEPKcj>
}
   b5f84:	4620      	mov	r0, r4
   b5f86:	b002      	add	sp, #8
   b5f88:	bd10      	pop	{r4, pc}

000b5f8a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b5f8a:	b538      	push	{r3, r4, r5, lr}
   b5f8c:	4605      	mov	r5, r0
	if (buffer) {
   b5f8e:	6800      	ldr	r0, [r0, #0]
{
   b5f90:	460c      	mov	r4, r1
	if (buffer) {
   b5f92:	b168      	cbz	r0, b5fb0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b5f94:	686a      	ldr	r2, [r5, #4]
   b5f96:	688b      	ldr	r3, [r1, #8]
   b5f98:	429a      	cmp	r2, r3
   b5f9a:	d307      	bcc.n	b5fac <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b5f9c:	6809      	ldr	r1, [r1, #0]
   b5f9e:	f002 ff0f 	bl	b8dc0 <strcpy>
			len = rhs.len;
   b5fa2:	68a3      	ldr	r3, [r4, #8]
   b5fa4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b5fa6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b5fa8:	60a3      	str	r3, [r4, #8]
}
   b5faa:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b5fac:	f7ff fe46 	bl	b5c3c <free>
	buffer = rhs.buffer;
   b5fb0:	6823      	ldr	r3, [r4, #0]
   b5fb2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b5fb4:	6863      	ldr	r3, [r4, #4]
   b5fb6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b5fb8:	68a3      	ldr	r3, [r4, #8]
   b5fba:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b5fbc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b5fbe:	e9c4 3300 	strd	r3, r3, [r4]
   b5fc2:	e7f1      	b.n	b5fa8 <_ZN6String4moveERS_+0x1e>

000b5fc4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b5fc4:	b510      	push	{r4, lr}
	buffer = NULL;
   b5fc6:	2300      	movs	r3, #0
	capacity = 0;
   b5fc8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b5fcc:	4604      	mov	r4, r0
	len = 0;
   b5fce:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5fd0:	7303      	strb	r3, [r0, #12]
	move(rval);
   b5fd2:	f7ff ffda 	bl	b5f8a <_ZN6String4moveERS_>
}
   b5fd6:	4620      	mov	r0, r4
   b5fd8:	bd10      	pop	{r4, pc}

000b5fda <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5fda:	4288      	cmp	r0, r1
{
   b5fdc:	b510      	push	{r4, lr}
   b5fde:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5fe0:	d005      	beq.n	b5fee <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5fe2:	680b      	ldr	r3, [r1, #0]
   b5fe4:	b12b      	cbz	r3, b5ff2 <_ZN6StringaSERKS_+0x18>
   b5fe6:	688a      	ldr	r2, [r1, #8]
   b5fe8:	4619      	mov	r1, r3
   b5fea:	f7ff ffa1 	bl	b5f30 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5fee:	4620      	mov	r0, r4
   b5ff0:	bd10      	pop	{r4, pc}
	else invalidate();
   b5ff2:	f7ff ff72 	bl	b5eda <_ZN6String10invalidateEv>
   b5ff6:	e7fa      	b.n	b5fee <_ZN6StringaSERKS_+0x14>

000b5ff8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5ff8:	b510      	push	{r4, lr}
	buffer = NULL;
   b5ffa:	2300      	movs	r3, #0
String::String(const String &value)
   b5ffc:	4604      	mov	r4, r0
	capacity = 0;
   b5ffe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6002:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6004:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6006:	f7ff ffe8 	bl	b5fda <_ZN6StringaSERKS_>
}
   b600a:	4620      	mov	r0, r4
   b600c:	bd10      	pop	{r4, pc}

000b600e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b600e:	b513      	push	{r0, r1, r4, lr}
   b6010:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6012:	b159      	cbz	r1, b602c <_ZN6StringaSEPKc+0x1e>
   b6014:	4608      	mov	r0, r1
   b6016:	9101      	str	r1, [sp, #4]
   b6018:	f002 feda 	bl	b8dd0 <strlen>
   b601c:	9901      	ldr	r1, [sp, #4]
   b601e:	4602      	mov	r2, r0
   b6020:	4620      	mov	r0, r4
   b6022:	f7ff ff85 	bl	b5f30 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6026:	4620      	mov	r0, r4
   b6028:	b002      	add	sp, #8
   b602a:	bd10      	pop	{r4, pc}
	else invalidate();
   b602c:	f7ff ff55 	bl	b5eda <_ZN6String10invalidateEv>
   b6030:	e7f9      	b.n	b6026 <_ZN6StringaSEPKc+0x18>

000b6032 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6032:	b570      	push	{r4, r5, r6, lr}
   b6034:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6036:	460e      	mov	r6, r1
   b6038:	b909      	cbnz	r1, b603e <_ZN6String6concatEPKcj+0xc>
   b603a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b603c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b603e:	b16a      	cbz	r2, b605c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6040:	6884      	ldr	r4, [r0, #8]
   b6042:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6044:	4621      	mov	r1, r4
   b6046:	f7ff ff5f 	bl	b5f08 <_ZN6String7reserveEj>
   b604a:	2800      	cmp	r0, #0
   b604c:	d0f5      	beq.n	b603a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b604e:	6828      	ldr	r0, [r5, #0]
   b6050:	68ab      	ldr	r3, [r5, #8]
   b6052:	4631      	mov	r1, r6
   b6054:	4418      	add	r0, r3
   b6056:	f002 feb3 	bl	b8dc0 <strcpy>
	len = newlen;
   b605a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b605c:	2001      	movs	r0, #1
   b605e:	e7ed      	b.n	b603c <_ZN6String6concatEPKcj+0xa>

000b6060 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6060:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b6062:	2300      	movs	r3, #0
	buf[0] = c;
   b6064:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6068:	2201      	movs	r2, #1
   b606a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b606c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6070:	f7ff ffdf 	bl	b6032 <_ZN6String6concatEPKcj>
}
   b6074:	b003      	add	sp, #12
   b6076:	f85d fb04 	ldr.w	pc, [sp], #4

000b607a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b607a:	6802      	ldr	r2, [r0, #0]
{
   b607c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b607e:	6809      	ldr	r1, [r1, #0]
   b6080:	b162      	cbz	r2, b609c <_ZNK6String9compareToERKS_+0x22>
   b6082:	b941      	cbnz	r1, b6096 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b6084:	6880      	ldr	r0, [r0, #8]
   b6086:	b160      	cbz	r0, b60a2 <_ZNK6String9compareToERKS_+0x28>
   b6088:	7810      	ldrb	r0, [r2, #0]
   b608a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b608c:	6898      	ldr	r0, [r3, #8]
   b608e:	b140      	cbz	r0, b60a2 <_ZNK6String9compareToERKS_+0x28>
   b6090:	7809      	ldrb	r1, [r1, #0]
   b6092:	4248      	negs	r0, r1
   b6094:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b6096:	4610      	mov	r0, r2
   b6098:	f002 be88 	b.w	b8dac <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b609c:	2900      	cmp	r1, #0
   b609e:	d1f5      	bne.n	b608c <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b60a0:	4608      	mov	r0, r1
}
   b60a2:	4770      	bx	lr

000b60a4 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b60a4:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b60a6:	6882      	ldr	r2, [r0, #8]
   b60a8:	688b      	ldr	r3, [r1, #8]
   b60aa:	429a      	cmp	r2, r3
   b60ac:	d105      	bne.n	b60ba <_ZNK6String6equalsERKS_+0x16>
   b60ae:	f7ff ffe4 	bl	b607a <_ZNK6String9compareToERKS_>
   b60b2:	fab0 f080 	clz	r0, r0
   b60b6:	0940      	lsrs	r0, r0, #5
}
   b60b8:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b60ba:	2000      	movs	r0, #0
   b60bc:	e7fc      	b.n	b60b8 <_ZNK6String6equalsERKS_+0x14>

000b60be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b60be:	4770      	bx	lr

000b60c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b60c0:	4770      	bx	lr

000b60c2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b60c2:	4770      	bx	lr

000b60c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b60c4:	4770      	bx	lr
	...

000b60c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b60c8:	4b06      	ldr	r3, [pc, #24]	; (b60e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b60ca:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b60cc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b60ce:	f100 040c 	add.w	r4, r0, #12
	    ||
   b60d2:	d005      	beq.n	b60e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b60d4:	4608      	mov	r0, r1
   b60d6:	f002 fcdf 	bl	b8a98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b60da:	2800      	cmp	r0, #0
   b60dc:	bf08      	it	eq
   b60de:	2400      	moveq	r4, #0
      }
   b60e0:	4620      	mov	r0, r4
   b60e2:	bd10      	pop	{r4, pc}
   b60e4:	000b9cf8 	.word	0x000b9cf8

000b60e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b60e8:	4b06      	ldr	r3, [pc, #24]	; (b6104 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b60ea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b60ec:	b510      	push	{r4, lr}
   b60ee:	f100 040c 	add.w	r4, r0, #12
	    ||
   b60f2:	d005      	beq.n	b6100 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b60f4:	4608      	mov	r0, r1
   b60f6:	f002 fccf 	bl	b8a98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b60fa:	2800      	cmp	r0, #0
   b60fc:	bf08      	it	eq
   b60fe:	2400      	moveq	r4, #0
      }
   b6100:	4620      	mov	r0, r4
   b6102:	bd10      	pop	{r4, pc}
   b6104:	000b9cf8 	.word	0x000b9cf8

000b6108 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6108:	4b06      	ldr	r3, [pc, #24]	; (b6124 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b610a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b610c:	b510      	push	{r4, lr}
   b610e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6112:	d005      	beq.n	b6120 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6114:	4608      	mov	r0, r1
   b6116:	f002 fcbf 	bl	b8a98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b611a:	2800      	cmp	r0, #0
   b611c:	bf08      	it	eq
   b611e:	2400      	moveq	r4, #0
      }
   b6120:	4620      	mov	r0, r4
   b6122:	bd10      	pop	{r4, pc}
   b6124:	000b9cf8 	.word	0x000b9cf8

000b6128 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6128:	b510      	push	{r4, lr}
   b612a:	2168      	movs	r1, #104	; 0x68
   b612c:	4604      	mov	r4, r0
   b612e:	f7fd ffb4 	bl	b409a <_ZdlPvj>
   b6132:	4620      	mov	r0, r4
   b6134:	bd10      	pop	{r4, pc}

000b6136 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6136:	b510      	push	{r4, lr}
   b6138:	2128      	movs	r1, #40	; 0x28
   b613a:	4604      	mov	r4, r0
   b613c:	f7fd ffad 	bl	b409a <_ZdlPvj>
   b6140:	4620      	mov	r0, r4
   b6142:	bd10      	pop	{r4, pc}

000b6144 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6144:	b510      	push	{r4, lr}
   b6146:	2130      	movs	r1, #48	; 0x30
   b6148:	4604      	mov	r4, r0
   b614a:	f7fd ffa6 	bl	b409a <_ZdlPvj>
   b614e:	4620      	mov	r0, r4
   b6150:	bd10      	pop	{r4, pc}

000b6152 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6152:	2168      	movs	r1, #104	; 0x68
   b6154:	f7fd bfa1 	b.w	b409a <_ZdlPvj>

000b6158 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6158:	2128      	movs	r1, #40	; 0x28
   b615a:	f7fd bf9e 	b.w	b409a <_ZdlPvj>

000b615e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b615e:	2130      	movs	r1, #48	; 0x30
   b6160:	f7fd bf9b 	b.w	b409a <_ZdlPvj>

000b6164 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6164:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6166:	2500      	movs	r5, #0
   b6168:	1cec      	adds	r4, r5, #3
   b616a:	428c      	cmp	r4, r1
   b616c:	d80d      	bhi.n	b618a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b616e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6170:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6172:	5d87      	ldrb	r7, [r0, r6]
   b6174:	4297      	cmp	r7, r2
   b6176:	d105      	bne.n	b6184 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6178:	4426      	add	r6, r4
   b617a:	42b1      	cmp	r1, r6
   b617c:	d305      	bcc.n	b618a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b617e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6180:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6182:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6184:	3401      	adds	r4, #1
   b6186:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6188:	e7ee      	b.n	b6168 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b618a:	2000      	movs	r0, #0
   b618c:	e7f9      	b.n	b6182 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6190 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6190:	4a02      	ldr	r2, [pc, #8]	; (b619c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6192:	4903      	ldr	r1, [pc, #12]	; (b61a0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6194:	200a      	movs	r0, #10
   b6196:	f7ff bca5 	b.w	b5ae4 <panic_>
   b619a:	bf00      	nop
   b619c:	000b5741 	.word	0x000b5741
   b61a0:	000b9b3c 	.word	0x000b9b3c

000b61a4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b61a4:	b430      	push	{r4, r5}
   b61a6:	460d      	mov	r5, r1
   b61a8:	4611      	mov	r1, r2
   b61aa:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b61ac:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b61ae:	6809      	ldr	r1, [r1, #0]
   b61b0:	6828      	ldr	r0, [r5, #0]
   b61b2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b61b6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b61b8:	bc30      	pop	{r4, r5}
   b61ba:	4760      	bx	ip

000b61bc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b61bc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b61be:	b538      	push	{r3, r4, r5, lr}
   b61c0:	4604      	mov	r4, r0
	switch (__op)
   b61c2:	d102      	bne.n	b61ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b61c4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b61c6:	6023      	str	r3, [r4, #0]
	}
   b61c8:	e003      	b.n	b61d2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b61ca:	2a02      	cmp	r2, #2
   b61cc:	d003      	beq.n	b61d6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b61ce:	2a03      	cmp	r2, #3
   b61d0:	d00d      	beq.n	b61ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b61d2:	2000      	movs	r0, #0
   b61d4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b61d6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b61d8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b61da:	f7fd ff5a 	bl	b4092 <_Znwj>
   b61de:	4603      	mov	r3, r0
   b61e0:	2800      	cmp	r0, #0
   b61e2:	d0f0      	beq.n	b61c6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b61e4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b61e8:	e883 0003 	stmia.w	r3, {r0, r1}
   b61ec:	e7eb      	b.n	b61c6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b61ee:	6800      	ldr	r0, [r0, #0]
   b61f0:	2800      	cmp	r0, #0
   b61f2:	d0ee      	beq.n	b61d2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b61f4:	2108      	movs	r1, #8
   b61f6:	f7fd ff50 	bl	b409a <_ZdlPvj>
   b61fa:	e7ea      	b.n	b61d2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b61fc <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b61fc:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b61fe:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b6200:	4604      	mov	r4, r0
	if (_M_manager)
   b6202:	b12b      	cbz	r3, b6210 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6204:	2203      	movs	r2, #3
   b6206:	4601      	mov	r1, r0
   b6208:	4798      	blx	r3
	    _M_manager = nullptr;
   b620a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b620c:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b6210:	bd10      	pop	{r4, pc}

000b6212 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b6212:	b510      	push	{r4, lr}
	if (_M_manager)
   b6214:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b6216:	4604      	mov	r4, r0
	if (_M_manager)
   b6218:	b12b      	cbz	r3, b6226 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b621a:	2203      	movs	r2, #3
   b621c:	4601      	mov	r1, r0
   b621e:	4798      	blx	r3
	    _M_manager = nullptr;
   b6220:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b6222:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b6226:	bd10      	pop	{r4, pc}

000b6228 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b6228:	b510      	push	{r4, lr}
   b622a:	3801      	subs	r0, #1
   b622c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b6230:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b6234:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b6236:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b623a:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b623c:	bf88      	it	hi
   b623e:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b6242:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b6246:	7803      	ldrb	r3, [r0, #0]
   b6248:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b624c:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b6250:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b6252:	bf88      	it	hi
   b6254:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b6258:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b625a:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b625e:	d1e7      	bne.n	b6230 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b6260:	bd10      	pop	{r4, pc}

000b6262 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6262:	b510      	push	{r4, lr}
      if (_M_manager)
   b6264:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6266:	4604      	mov	r4, r0
      if (_M_manager)
   b6268:	b113      	cbz	r3, b6270 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b626a:	2203      	movs	r2, #3
   b626c:	4601      	mov	r1, r0
   b626e:	4798      	blx	r3
    }
   b6270:	4620      	mov	r0, r4
   b6272:	bd10      	pop	{r4, pc}

000b6274 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6274:	b510      	push	{r4, lr}
   b6276:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6278:	3058      	adds	r0, #88	; 0x58
   b627a:	f7ff fff2 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b627e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6286:	f7ff be21 	b.w	b5ecc <_ZN6StringD1Ev>

000b628a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b628a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b628c:	6843      	ldr	r3, [r0, #4]
   b628e:	3b01      	subs	r3, #1
    {
   b6290:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6292:	6043      	str	r3, [r0, #4]
   b6294:	b963      	cbnz	r3, b62b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6296:	6803      	ldr	r3, [r0, #0]
   b6298:	689b      	ldr	r3, [r3, #8]
   b629a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b629c:	68a3      	ldr	r3, [r4, #8]
   b629e:	3b01      	subs	r3, #1
   b62a0:	60a3      	str	r3, [r4, #8]
   b62a2:	b92b      	cbnz	r3, b62b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b62a4:	6823      	ldr	r3, [r4, #0]
   b62a6:	4620      	mov	r0, r4
   b62a8:	68db      	ldr	r3, [r3, #12]
    }
   b62aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b62ae:	4718      	bx	r3
    }
   b62b0:	bd10      	pop	{r4, pc}

000b62b2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b62b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b62b6:	b2da      	uxtb	r2, r3
   b62b8:	2a09      	cmp	r2, #9
   b62ba:	d801      	bhi.n	b62c0 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b62bc:	4618      	mov	r0, r3
   b62be:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b62c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b62c4:	2b05      	cmp	r3, #5
   b62c6:	d801      	bhi.n	b62cc <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b62c8:	3857      	subs	r0, #87	; 0x57
   b62ca:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b62cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b62d0:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b62d2:	bf94      	ite	ls
   b62d4:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b62d6:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b62da:	4770      	bx	lr

000b62dc <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b62dc:	b510      	push	{r4, lr}
            locked_(false) {
   b62de:	2300      	movs	r3, #0
   b62e0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b62e2:	4b04      	ldr	r3, [pc, #16]	; (b62f4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b62e4:	4604      	mov	r4, r0
   b62e6:	6818      	ldr	r0, [r3, #0]
   b62e8:	f7ff fac4 	bl	b5874 <os_mutex_recursive_lock>
        locked_ = true;
   b62ec:	2301      	movs	r3, #1
   b62ee:	7023      	strb	r3, [r4, #0]
    }
   b62f0:	4620      	mov	r0, r4
   b62f2:	bd10      	pop	{r4, pc}
   b62f4:	2003e6d8 	.word	0x2003e6d8

000b62f8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b62f8:	b510      	push	{r4, lr}
        if (locked_) {
   b62fa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b62fc:	4604      	mov	r4, r0
        if (locked_) {
   b62fe:	b11b      	cbz	r3, b6308 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6300:	4b02      	ldr	r3, [pc, #8]	; (b630c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6302:	6818      	ldr	r0, [r3, #0]
   b6304:	f7ff fabe 	bl	b5884 <os_mutex_recursive_unlock>
    }
   b6308:	4620      	mov	r0, r4
   b630a:	bd10      	pop	{r4, pc}
   b630c:	2003e6d8 	.word	0x2003e6d8

000b6310 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b6310:	2905      	cmp	r1, #5
    return address_.addr[i];
   b6312:	bf94      	ite	ls
   b6314:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b6316:	2000      	movhi	r0, #0
}
   b6318:	4770      	bx	lr

000b631a <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b631a:	b082      	sub	sp, #8
   b631c:	4603      	mov	r3, r0
    address_ = addr;
   b631e:	6808      	ldr	r0, [r1, #0]
   b6320:	6849      	ldr	r1, [r1, #4]
   b6322:	466a      	mov	r2, sp
   b6324:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6326:	466a      	mov	r2, sp
   b6328:	ca03      	ldmia	r2!, {r0, r1}
   b632a:	6018      	str	r0, [r3, #0]
}
   b632c:	4618      	mov	r0, r3
    address_ = addr.address_;
   b632e:	6059      	str	r1, [r3, #4]
}
   b6330:	b002      	add	sp, #8
   b6332:	4770      	bx	lr

000b6334 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6334:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6336:	7982      	ldrb	r2, [r0, #6]
   b6338:	798b      	ldrb	r3, [r1, #6]
   b633a:	429a      	cmp	r2, r3
   b633c:	d106      	bne.n	b634c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b633e:	2206      	movs	r2, #6
   b6340:	f002 fcc6 	bl	b8cd0 <memcmp>
   b6344:	fab0 f080 	clz	r0, r0
   b6348:	0940      	lsrs	r0, r0, #5
}
   b634a:	bd08      	pop	{r3, pc}
    return false;
   b634c:	2000      	movs	r0, #0
   b634e:	e7fc      	b.n	b634a <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6350 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6350:	f04f 33ff 	mov.w	r3, #4294967295
   b6354:	6003      	str	r3, [r0, #0]
   b6356:	8083      	strh	r3, [r0, #4]
}
   b6358:	2000      	movs	r0, #0
   b635a:	4770      	bx	lr

000b635c <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b635c:	b508      	push	{r3, lr}
   b635e:	4602      	mov	r2, r0
        : address_{} {
   b6360:	2100      	movs	r1, #0
   b6362:	6001      	str	r1, [r0, #0]
   b6364:	6041      	str	r1, [r0, #4]
    clear();
   b6366:	f7ff fff3 	bl	b6350 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b636a:	7191      	strb	r1, [r2, #6]
}
   b636c:	4610      	mov	r0, r2
   b636e:	bd08      	pop	{r3, pc}

000b6370 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b6370:	b510      	push	{r4, lr}
   b6372:	1d43      	adds	r3, r0, #5
   b6374:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b6376:	781c      	ldrb	r4, [r3, #0]
   b6378:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b637c:	4283      	cmp	r3, r0
   b637e:	f103 33ff 	add.w	r3, r3, #4294967295
   b6382:	d1f8      	bne.n	b6376 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b6384:	bd10      	pop	{r4, pc}

000b6386 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b6386:	b570      	push	{r4, r5, r6, lr}
   b6388:	4614      	mov	r4, r2
   b638a:	b088      	sub	sp, #32
   b638c:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b638e:	460d      	mov	r5, r1
   b6390:	2900      	cmp	r1, #0
   b6392:	d048      	beq.n	b6426 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b6394:	b1a4      	cbz	r4, b63c0 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b6396:	a901      	add	r1, sp, #4
   b6398:	f7ff ffea 	bl	b6370 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b639c:	b19a      	cbz	r2, b63c6 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b639e:	aa03      	add	r2, sp, #12
   b63a0:	2106      	movs	r1, #6
   b63a2:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b63a4:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b63a6:	f7ff ff3f 	bl	b6228 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b63aa:	2e11      	cmp	r6, #17
   b63ac:	bf28      	it	cs
   b63ae:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b63b0:	4632      	mov	r2, r6
   b63b2:	a903      	add	r1, sp, #12
   b63b4:	4628      	mov	r0, r5
   b63b6:	f002 fc9b 	bl	b8cf0 <memcpy>
    buf[len++] = '\0';
   b63ba:	2300      	movs	r3, #0
   b63bc:	55ab      	strb	r3, [r5, r6]
   b63be:	1c74      	adds	r4, r6, #1
}
   b63c0:	4620      	mov	r0, r4
   b63c2:	b008      	add	sp, #32
   b63c4:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b63c6:	aa03      	add	r2, sp, #12
   b63c8:	2101      	movs	r1, #1
   b63ca:	a801      	add	r0, sp, #4
   b63cc:	f7ff ff2c 	bl	b6228 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b63d0:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b63d2:	f10d 020f 	add.w	r2, sp, #15
   b63d6:	2101      	movs	r1, #1
   b63d8:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b63dc:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b63e0:	f7ff ff22 	bl	b6228 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b63e4:	f10d 0212 	add.w	r2, sp, #18
   b63e8:	2101      	movs	r1, #1
   b63ea:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b63ee:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b63f2:	f7ff ff19 	bl	b6228 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b63f6:	f10d 0215 	add.w	r2, sp, #21
   b63fa:	2101      	movs	r1, #1
   b63fc:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b6400:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b6404:	f7ff ff10 	bl	b6228 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b6408:	aa06      	add	r2, sp, #24
   b640a:	2101      	movs	r1, #1
   b640c:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b640e:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b6412:	f7ff ff09 	bl	b6228 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b6416:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b641a:	f10d 021b 	add.w	r2, sp, #27
   b641e:	2101      	movs	r1, #1
   b6420:	f10d 0009 	add.w	r0, sp, #9
   b6424:	e7be      	b.n	b63a4 <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b6426:	460c      	mov	r4, r1
   b6428:	e7ca      	b.n	b63c0 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b642a <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b642a:	b510      	push	{r4, lr}
   b642c:	b086      	sub	sp, #24
   b642e:	4604      	mov	r4, r0
   b6430:	4613      	mov	r3, r2
   b6432:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b6434:	2212      	movs	r2, #18
   b6436:	a901      	add	r1, sp, #4
   b6438:	f7ff ffa5 	bl	b6386 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b643c:	a901      	add	r1, sp, #4
   b643e:	4620      	mov	r0, r4
   b6440:	f7ff fd8f 	bl	b5f62 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6444:	4620      	mov	r0, r4
   b6446:	b006      	add	sp, #24
   b6448:	bd10      	pop	{r4, pc}
	...

000b644c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b644c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b644e:	2301      	movs	r3, #1
   b6450:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6452:	4b05      	ldr	r3, [pc, #20]	; (b6468 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6454:	4602      	mov	r2, r0
   b6456:	f103 0110 	add.w	r1, r3, #16
   b645a:	f853 4b04 	ldr.w	r4, [r3], #4
   b645e:	f842 4b04 	str.w	r4, [r2], #4
   b6462:	428b      	cmp	r3, r1
   b6464:	d1f9      	bne.n	b645a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6466:	bd10      	pop	{r4, pc}
   b6468:	000b9d06 	.word	0x000b9d06

000b646c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b646c:	b510      	push	{r4, lr}
    if (uuid128) {
   b646e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6470:	4604      	mov	r4, r0
    if (uuid128) {
   b6472:	b1b1      	cbz	r1, b64a2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6474:	2a01      	cmp	r2, #1
   b6476:	f101 0210 	add.w	r2, r1, #16
   b647a:	d10a      	bne.n	b6492 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b647c:	4601      	mov	r1, r0
   b647e:	f853 0b04 	ldr.w	r0, [r3], #4
   b6482:	f841 0b04 	str.w	r0, [r1], #4
   b6486:	4293      	cmp	r3, r2
   b6488:	d1f9      	bne.n	b647e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b648a:	2301      	movs	r3, #1
   b648c:	6123      	str	r3, [r4, #16]
}
   b648e:	4620      	mov	r0, r4
   b6490:	bd10      	pop	{r4, pc}
   b6492:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6494:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6498:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b649c:	429a      	cmp	r2, r3
   b649e:	d1f9      	bne.n	b6494 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b64a0:	e7f3      	b.n	b648a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b64a2:	2210      	movs	r2, #16
   b64a4:	f002 fc4c 	bl	b8d40 <memset>
   b64a8:	e7f1      	b.n	b648e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b64aa <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b64aa:	b538      	push	{r3, r4, r5, lr}
   b64ac:	4604      	mov	r4, r0
   b64ae:	460d      	mov	r5, r1
        : BleUuid() {
   b64b0:	f7ff ffcc 	bl	b644c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b64b4:	2300      	movs	r3, #0
   b64b6:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b64b8:	81a5      	strh	r5, [r4, #12]
}
   b64ba:	4620      	mov	r0, r4
   b64bc:	bd38      	pop	{r3, r4, r5, pc}

000b64be <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b64be:	b538      	push	{r3, r4, r5, lr}
   b64c0:	4604      	mov	r4, r0
   b64c2:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b64c4:	461a      	mov	r2, r3
   b64c6:	f7ff ffd1 	bl	b646c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b64ca:	81a5      	strh	r5, [r4, #12]
}
   b64cc:	4620      	mov	r0, r4
   b64ce:	bd38      	pop	{r3, r4, r5, pc}

000b64d0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b64d0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b64d2:	6902      	ldr	r2, [r0, #16]
   b64d4:	b922      	cbnz	r2, b64e0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b64d6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b64d8:	3800      	subs	r0, #0
   b64da:	bf18      	it	ne
   b64dc:	2001      	movne	r0, #1
}
   b64de:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b64e0:	4902      	ldr	r1, [pc, #8]	; (b64ec <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b64e2:	2210      	movs	r2, #16
   b64e4:	f002 fbf4 	bl	b8cd0 <memcmp>
   b64e8:	e7f6      	b.n	b64d8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b64ea:	bf00      	nop
   b64ec:	000b9d26 	.word	0x000b9d26

000b64f0 <_ZNK8particle7BleUuid4typeEv>:
}
   b64f0:	6900      	ldr	r0, [r0, #16]
   b64f2:	4770      	bx	lr

000b64f4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b64f4:	b538      	push	{r3, r4, r5, lr}
   b64f6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b64f8:	2214      	movs	r2, #20
   b64fa:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b64fc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b64fe:	f002 fc1f 	bl	b8d40 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6502:	6923      	ldr	r3, [r4, #16]
   b6504:	b91b      	cbnz	r3, b650e <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6506:	89a3      	ldrh	r3, [r4, #12]
   b6508:	802b      	strh	r3, [r5, #0]
}
   b650a:	4628      	mov	r0, r5
   b650c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b650e:	2301      	movs	r3, #1
   b6510:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6512:	4621      	mov	r1, r4
   b6514:	462b      	mov	r3, r5
   b6516:	f104 0210 	add.w	r2, r4, #16
   b651a:	f851 0b04 	ldr.w	r0, [r1], #4
   b651e:	f843 0b04 	str.w	r0, [r3], #4
   b6522:	4291      	cmp	r1, r2
   b6524:	d1f9      	bne.n	b651a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6526:	e7f0      	b.n	b650a <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6528 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6528:	8980      	ldrh	r0, [r0, #12]
   b652a:	4770      	bx	lr

000b652c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b652c:	4770      	bx	lr

000b652e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b652e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6530:	6902      	ldr	r2, [r0, #16]
   b6532:	690b      	ldr	r3, [r1, #16]
   b6534:	429a      	cmp	r2, r3
   b6536:	d106      	bne.n	b6546 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6538:	2210      	movs	r2, #16
   b653a:	f002 fbc9 	bl	b8cd0 <memcmp>
   b653e:	fab0 f080 	clz	r0, r0
   b6542:	0940      	lsrs	r0, r0, #5
}
   b6544:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6546:	2000      	movs	r0, #0
   b6548:	e7fc      	b.n	b6544 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b654c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b654c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b654e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6552:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6554:	4b34      	ldr	r3, [pc, #208]	; (b6628 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6556:	460c      	mov	r4, r1
   b6558:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b655a:	4602      	mov	r2, r0
   b655c:	f103 0110 	add.w	r1, r3, #16
   b6560:	f853 0b04 	ldr.w	r0, [r3], #4
   b6564:	f842 0b04 	str.w	r0, [r2], #4
   b6568:	428b      	cmp	r3, r1
   b656a:	d1f9      	bne.n	b6560 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b656c:	b344      	cbz	r4, b65c0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b656e:	2124      	movs	r1, #36	; 0x24
   b6570:	4620      	mov	r0, r4
   b6572:	f002 fc35 	bl	b8de0 <strnlen>
   b6576:	2804      	cmp	r0, #4
   b6578:	f04f 0500 	mov.w	r5, #0
   b657c:	d123      	bne.n	b65c6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b657e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6582:	af01      	add	r7, sp, #4
   b6584:	1ca5      	adds	r5, r4, #2
   b6586:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6588:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b658c:	f7ff fe91 	bl	b62b2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6590:	f1b0 0800 	subs.w	r8, r0, #0
   b6594:	db12      	blt.n	b65bc <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6596:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b659a:	f7ff fe8a 	bl	b62b2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b659e:	2800      	cmp	r0, #0
   b65a0:	db0c      	blt.n	b65bc <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b65a2:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b65a4:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b65a8:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b65aa:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b65ae:	d1eb      	bne.n	b6588 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b65b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b65b4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b65b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b65ba:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b65bc:	2300      	movs	r3, #0
   b65be:	6133      	str	r3, [r6, #16]
}
   b65c0:	b002      	add	sp, #8
   b65c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b65c6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b65ca:	2124      	movs	r1, #36	; 0x24
   b65cc:	4620      	mov	r0, r4
   b65ce:	f002 fc07 	bl	b8de0 <strnlen>
   b65d2:	42a8      	cmp	r0, r5
   b65d4:	d807      	bhi.n	b65e6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b65d6:	4642      	mov	r2, r8
   b65d8:	2100      	movs	r1, #0
   b65da:	4630      	mov	r0, r6
}
   b65dc:	b002      	add	sp, #8
   b65de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b65e2:	f002 bbad 	b.w	b8d40 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b65e6:	f1b8 0f00 	cmp.w	r8, #0
   b65ea:	d0e9      	beq.n	b65c0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b65ec:	5d60      	ldrb	r0, [r4, r5]
   b65ee:	f7ff fe60 	bl	b62b2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b65f2:	0603      	lsls	r3, r0, #24
   b65f4:	d415      	bmi.n	b6622 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b65f6:	0100      	lsls	r0, r0, #4
   b65f8:	f108 38ff 	add.w	r8, r8, #4294967295
   b65fc:	b2c7      	uxtb	r7, r0
   b65fe:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6602:	2124      	movs	r1, #36	; 0x24
   b6604:	4620      	mov	r0, r4
   b6606:	f002 fbeb 	bl	b8de0 <strnlen>
   b660a:	3501      	adds	r5, #1
   b660c:	42a8      	cmp	r0, r5
   b660e:	d908      	bls.n	b6622 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6610:	5d60      	ldrb	r0, [r4, r5]
   b6612:	f7ff fe4e 	bl	b62b2 <_ZN8particle11hexToNibbleEc>
   b6616:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6618:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b661a:	bfa4      	itt	ge
   b661c:	4338      	orrge	r0, r7
   b661e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6622:	3501      	adds	r5, #1
   b6624:	e7d1      	b.n	b65ca <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6626:	bf00      	nop
   b6628:	000b9d06 	.word	0x000b9d06

000b662c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b662c:	b513      	push	{r0, r1, r4, lr}
   b662e:	4604      	mov	r4, r0
   b6630:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6632:	f7ff ff0b 	bl	b644c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6636:	4620      	mov	r0, r4
   b6638:	9901      	ldr	r1, [sp, #4]
   b663a:	f7ff ff87 	bl	b654c <_ZN8particle7BleUuid9constructEPKc>
}
   b663e:	4620      	mov	r0, r4
   b6640:	b002      	add	sp, #8
   b6642:	bd10      	pop	{r4, pc}

000b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b6644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6646:	4605      	mov	r5, r0
   b6648:	4616      	mov	r6, r2
   b664a:	461f      	mov	r7, r3
   b664c:	460a      	mov	r2, r1
   b664e:	ab01      	add	r3, sp, #4
   b6650:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6654:	f7ff fd86 	bl	b6164 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b6658:	f030 0402 	bics.w	r4, r0, #2
   b665c:	d00c      	beq.n	b6678 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b665e:	1e84      	subs	r4, r0, #2
   b6660:	42bc      	cmp	r4, r7
   b6662:	bf28      	it	cs
   b6664:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b6666:	b13e      	cbz	r6, b6678 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b6668:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b666a:	682b      	ldr	r3, [r5, #0]
   b666c:	3102      	adds	r1, #2
   b666e:	4622      	mov	r2, r4
   b6670:	4419      	add	r1, r3
   b6672:	4630      	mov	r0, r6
   b6674:	f002 fb3c 	bl	b8cf0 <memcpy>
}
   b6678:	4620      	mov	r0, r4
   b667a:	b003      	add	sp, #12
   b667c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b667e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b667e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6680:	4613      	mov	r3, r2
   b6682:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6684:	9201      	str	r2, [sp, #4]
   b6686:	460a      	mov	r2, r1
   b6688:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b668a:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b668c:	f7ff ffda 	bl	b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b6690:	b940      	cbnz	r0, b66a4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6692:	9b01      	ldr	r3, [sp, #4]
   b6694:	4622      	mov	r2, r4
   b6696:	2109      	movs	r1, #9
   b6698:	4628      	mov	r0, r5
}
   b669a:	b003      	add	sp, #12
   b669c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b66a0:	f7ff bfd0 	b.w	b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b66a4:	b003      	add	sp, #12
   b66a6:	bd30      	pop	{r4, r5, pc}

000b66a8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b66a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b66aa:	460c      	mov	r4, r1
   b66ac:	b089      	sub	sp, #36	; 0x24
    String name;
   b66ae:	490c      	ldr	r1, [pc, #48]	; (b66e0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b66b0:	4605      	mov	r5, r0
    String name;
   b66b2:	f7ff fc56 	bl	b5f62 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b66b6:	221f      	movs	r2, #31
   b66b8:	4669      	mov	r1, sp
   b66ba:	4620      	mov	r0, r4
   b66bc:	f7ff ffdf 	bl	b667e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b66c0:	4606      	mov	r6, r0
   b66c2:	b150      	cbz	r0, b66da <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b66c4:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b66c6:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b66c8:	f814 1b01 	ldrb.w	r1, [r4], #1
   b66cc:	4628      	mov	r0, r5
   b66ce:	f7ff fcc7 	bl	b6060 <_ZN6String6concatEc>
   b66d2:	b110      	cbz	r0, b66da <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b66d4:	3701      	adds	r7, #1
   b66d6:	42be      	cmp	r6, r7
   b66d8:	d1f6      	bne.n	b66c8 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b66da:	4628      	mov	r0, r5
   b66dc:	b009      	add	sp, #36	; 0x24
   b66de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b66e0:	000b9097 	.word	0x000b9097

000b66e4 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b66e4:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b66e6:	2302      	movs	r3, #2
   b66e8:	aa01      	add	r2, sp, #4
   b66ea:	2119      	movs	r1, #25
   b66ec:	f7ff ffaa 	bl	b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b66f0:	b108      	cbz	r0, b66f6 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b66f2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b66f6:	b003      	add	sp, #12
   b66f8:	f85d fb04 	ldr.w	pc, [sp], #4

000b66fc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b66fc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b66fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6702:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6704:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6706:	8043      	strh	r3, [r0, #2]
   b6708:	220e      	movs	r2, #14
   b670a:	4629      	mov	r1, r5
   b670c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b670e:	7105      	strb	r5, [r0, #4]
   b6710:	3006      	adds	r0, #6
   b6712:	f002 fb15 	bl	b8d40 <memset>
   b6716:	f104 0014 	add.w	r0, r4, #20
   b671a:	f7ff fe97 	bl	b644c <_ZN8particle7BleUuidC1Ev>
   b671e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6722:	f7ff fe93 	bl	b644c <_ZN8particle7BleUuidC1Ev>
   b6726:	4904      	ldr	r1, [pc, #16]	; (b6738 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6728:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b672c:	f7ff fc19 	bl	b5f62 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6730:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6732:	4620      	mov	r0, r4
   b6734:	bd38      	pop	{r3, r4, r5, pc}
   b6736:	bf00      	nop
   b6738:	000b9097 	.word	0x000b9097

000b673c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b673c:	b510      	push	{r4, lr}
    return data_ + size_;
   b673e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6742:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6746:	4293      	cmp	r3, r2
   b6748:	4618      	mov	r0, r3
   b674a:	d006      	beq.n	b675a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b674c:	6804      	ldr	r4, [r0, #0]
   b674e:	8824      	ldrh	r4, [r4, #0]
   b6750:	428c      	cmp	r4, r1
   b6752:	f103 0308 	add.w	r3, r3, #8
   b6756:	d1f6      	bne.n	b6746 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6758:	bd10      	pop	{r4, pc}
        return nullptr;
   b675a:	2000      	movs	r0, #0
   b675c:	e7fc      	b.n	b6758 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6760 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6764:	2600      	movs	r6, #0
   b6766:	6006      	str	r6, [r0, #0]
   b6768:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b676a:	2028      	movs	r0, #40	; 0x28
   b676c:	460c      	mov	r4, r1
   b676e:	f7fd fc90 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6772:	1e05      	subs	r5, r0, #0
   b6774:	f105 080c 	add.w	r8, r5, #12
   b6778:	d00f      	beq.n	b679a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b677a:	2301      	movs	r3, #1
   b677c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6780:	4b08      	ldr	r3, [pc, #32]	; (b67a4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6782:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6784:	4640      	mov	r0, r8
   b6786:	f7ff fe61 	bl	b644c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b678a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b678c:	622e      	str	r6, [r5, #32]
   b678e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6792:	4646      	mov	r6, r8
   b6794:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6796:	6823      	ldr	r3, [r4, #0]
   b6798:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b679a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b679e:	4638      	mov	r0, r7
   b67a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b67a4:	000b9cc8 	.word	0x000b9cc8

000b67a8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b67a8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b67aa:	2500      	movs	r5, #0
   b67ac:	6005      	str	r5, [r0, #0]
   b67ae:	4606      	mov	r6, r0
   b67b0:	2030      	movs	r0, #48	; 0x30
   b67b2:	f7fd fc6e 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b67b6:	4604      	mov	r4, r0
   b67b8:	b188      	cbz	r0, b67de <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b67ba:	2301      	movs	r3, #1
   b67bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b67c0:	4b09      	ldr	r3, [pc, #36]	; (b67e8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b67c2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b67c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b67c8:	8183      	strh	r3, [r0, #12]
   b67ca:	300e      	adds	r0, #14
   b67cc:	f7ff fdc6 	bl	b635c <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b67d0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b67d4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b67d8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b67dc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b67de:	6074      	str	r4, [r6, #4]
   b67e0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b67e2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b67e4:	4630      	mov	r0, r6
   b67e6:	bd70      	pop	{r4, r5, r6, pc}
   b67e8:	000b9ce4 	.word	0x000b9ce4

000b67ec <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b67ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b67ee:	460d      	mov	r5, r1
   b67f0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b67f2:	a801      	add	r0, sp, #4
   b67f4:	f7ff fd72 	bl	b62dc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b67f8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b67fa:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b67fe:	6023      	str	r3, [r4, #0]
   b6800:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6804:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6806:	a801      	add	r0, sp, #4
   b6808:	f7ff fd76 	bl	b62f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b680c:	4620      	mov	r0, r4
   b680e:	b003      	add	sp, #12
   b6810:	bd30      	pop	{r4, r5, pc}

000b6812 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6812:	b530      	push	{r4, r5, lr}
   b6814:	4605      	mov	r5, r0
   b6816:	b087      	sub	sp, #28
   b6818:	460c      	mov	r4, r1
    WiringBleLock lk;
   b681a:	a801      	add	r0, sp, #4
   b681c:	f7ff fd5e 	bl	b62dc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6820:	682a      	ldr	r2, [r5, #0]
   b6822:	6823      	ldr	r3, [r4, #0]
   b6824:	8812      	ldrh	r2, [r2, #0]
   b6826:	881b      	ldrh	r3, [r3, #0]
   b6828:	429a      	cmp	r2, r3
   b682a:	d10d      	bne.n	b6848 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b682c:	4629      	mov	r1, r5
   b682e:	a802      	add	r0, sp, #8
   b6830:	f7ff ffdc 	bl	b67ec <_ZNK8particle13BlePeerDevice7addressEv>
   b6834:	4621      	mov	r1, r4
   b6836:	a804      	add	r0, sp, #16
   b6838:	f7ff ffd8 	bl	b67ec <_ZNK8particle13BlePeerDevice7addressEv>
   b683c:	a904      	add	r1, sp, #16
   b683e:	a802      	add	r0, sp, #8
   b6840:	f7ff fd78 	bl	b6334 <_ZNK8particle10BleAddresseqERKS0_>
   b6844:	4604      	mov	r4, r0
   b6846:	b900      	cbnz	r0, b684a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6848:	2400      	movs	r4, #0
    WiringBleLock lk;
   b684a:	a801      	add	r0, sp, #4
   b684c:	f7ff fd54 	bl	b62f8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6850:	4620      	mov	r0, r4
   b6852:	b007      	add	sp, #28
   b6854:	bd30      	pop	{r4, r5, pc}
	...

000b6858 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6858:	b510      	push	{r4, lr}
   b685a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b685c:	2064      	movs	r0, #100	; 0x64
   b685e:	f7fd fc18 	bl	b4092 <_Znwj>
   b6862:	b168      	cbz	r0, b6880 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6864:	2300      	movs	r3, #0
   b6866:	e9c0 3300 	strd	r3, r3, [r0]
   b686a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b686e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6872:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6876:	6203      	str	r3, [r0, #32]
   b6878:	62c3      	str	r3, [r0, #44]	; 0x2c
   b687a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b687c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b687e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6880:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6882:	b920      	cbnz	r0, b688e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6884:	4a0a      	ldr	r2, [pc, #40]	; (b68b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6886:	490b      	ldr	r1, [pc, #44]	; (b68b4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6888:	200a      	movs	r0, #10
   b688a:	f7ff f92b 	bl	b5ae4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b688e:	2000      	movs	r0, #0
   b6890:	f7fe ff76 	bl	b5780 <hal_ble_stack_init>
   b6894:	b120      	cbz	r0, b68a0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6896:	4a06      	ldr	r2, [pc, #24]	; (b68b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6898:	4907      	ldr	r1, [pc, #28]	; (b68b8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b689a:	200a      	movs	r0, #10
   b689c:	f7ff f922 	bl	b5ae4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b68a0:	6821      	ldr	r1, [r4, #0]
   b68a2:	4806      	ldr	r0, [pc, #24]	; (b68bc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b68a4:	2200      	movs	r2, #0
   b68a6:	f7fe ffd3 	bl	b5850 <hal_ble_set_callback_on_periph_link_events>
}
   b68aa:	4620      	mov	r0, r4
   b68ac:	bd10      	pop	{r4, pc}
   b68ae:	bf00      	nop
   b68b0:	000b5741 	.word	0x000b5741
   b68b4:	000b9b3c 	.word	0x000b9b3c
   b68b8:	000b9b7a 	.word	0x000b9b7a
   b68bc:	000b73b5 	.word	0x000b73b5

000b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b68c0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b68c2:	4c0a      	ldr	r4, [pc, #40]	; (b68ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b68c4:	7823      	ldrb	r3, [r4, #0]
   b68c6:	f3bf 8f5b 	dmb	ish
   b68ca:	07db      	lsls	r3, r3, #31
   b68cc:	d40c      	bmi.n	b68e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b68ce:	4620      	mov	r0, r4
   b68d0:	f7fd fbf2 	bl	b40b8 <__cxa_guard_acquire>
   b68d4:	b140      	cbz	r0, b68e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b68d6:	4806      	ldr	r0, [pc, #24]	; (b68f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b68d8:	f7ff ffbe 	bl	b6858 <_ZN8particle14BleLocalDeviceC1Ev>
   b68dc:	4620      	mov	r0, r4
   b68de:	f7fd fbf0 	bl	b40c2 <__cxa_guard_release>
   b68e2:	4804      	ldr	r0, [pc, #16]	; (b68f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b68e4:	f002 f9ea 	bl	b8cbc <atexit>
    return instance;
}
   b68e8:	4801      	ldr	r0, [pc, #4]	; (b68f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b68ea:	bd10      	pop	{r4, pc}
   b68ec:	2003e6d0 	.word	0x2003e6d0
   b68f0:	2003e6dc 	.word	0x2003e6dc
   b68f4:	000b6c95 	.word	0x000b6c95

000b68f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b68f8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b68fa:	6803      	ldr	r3, [r0, #0]
   b68fc:	3b09      	subs	r3, #9
   b68fe:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6900:	b08d      	sub	sp, #52	; 0x34
   b6902:	4604      	mov	r4, r0
   b6904:	460d      	mov	r5, r1
    switch (event->type) {
   b6906:	d811      	bhi.n	b692c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6908:	f7ff ffda 	bl	b68c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b690c:	88a1      	ldrh	r1, [r4, #4]
   b690e:	6800      	ldr	r0, [r0, #0]
   b6910:	f7ff ff14 	bl	b673c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6914:	4603      	mov	r3, r0
   b6916:	b958      	cbnz	r0, b6930 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6918:	2220      	movs	r2, #32
   b691a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b691e:	4a0b      	ldr	r2, [pc, #44]	; (b694c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6920:	9200      	str	r2, [sp, #0]
   b6922:	490b      	ldr	r1, [pc, #44]	; (b6950 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6924:	aa04      	add	r2, sp, #16
   b6926:	2032      	movs	r0, #50	; 0x32
   b6928:	f7ff f8e4 	bl	b5af4 <log_message>
}
   b692c:	b00d      	add	sp, #52	; 0x34
   b692e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6930:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6932:	2a00      	cmp	r2, #0
   b6934:	d0fa      	beq.n	b692c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6936:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b693a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b693e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6942:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6944:	aa04      	add	r2, sp, #16
   b6946:	a903      	add	r1, sp, #12
   b6948:	47a0      	blx	r4
}
   b694a:	e7ef      	b.n	b692c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b694c:	000b9bbc 	.word	0x000b9bbc
   b6950:	000b9b53 	.word	0x000b9b53

000b6954 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6954:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6956:	2000      	movs	r0, #0
   b6958:	f7fe ff12 	bl	b5780 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b695c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6960:	bd08      	pop	{r3, pc}

000b6962 <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   b6962:	b513      	push	{r0, r1, r4, lr}
   b6964:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   b6966:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   b6968:	4668      	mov	r0, sp
    hal_ble_addr_t halAddr = {};
   b696a:	e9cd 1100 	strd	r1, r1, [sp]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   b696e:	f7fe ff0f 	bl	b5790 <hal_ble_gap_get_device_address>
    address_ = addr;
   b6972:	466b      	mov	r3, sp
   b6974:	cb03      	ldmia	r3!, {r0, r1}
   b6976:	6020      	str	r0, [r4, #0]
    return BleAddress(halAddr);
}
   b6978:	4620      	mov	r0, r4
    address_ = addr;
   b697a:	6061      	str	r1, [r4, #4]
}
   b697c:	b002      	add	sp, #8
   b697e:	bd10      	pop	{r4, pc}

000b6980 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6980:	b919      	cbnz	r1, b698a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6982:	460a      	mov	r2, r1
   b6984:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6986:	f7fe bf0b 	b.w	b57a0 <hal_ble_gap_set_advertising_data>
   b698a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b698e:	2200      	movs	r2, #0
   b6990:	e7f9      	b.n	b6986 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>
	...

000b6994 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b6994:	b570      	push	{r4, r5, r6, lr}
   b6996:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b6998:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b699a:	460e      	mov	r6, r1
   b699c:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b699e:	f7ff fc2d 	bl	b61fc <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b69a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b69a6:	f7ff fc34 	bl	b6212 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b69aa:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b69ae:	2200      	movs	r2, #0
   b69b0:	4621      	mov	r1, r4
   b69b2:	4803      	ldr	r0, [pc, #12]	; (b69c0 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b69b4:	f7fe ff1c 	bl	b57f0 <hal_ble_gap_start_scan>
   b69b8:	2800      	cmp	r0, #0
        return foundCount_;
   b69ba:	bfa8      	it	ge
   b69bc:	6960      	ldrge	r0, [r4, #20]
    }
   b69be:	bd70      	pop	{r4, r5, r6, pc}
   b69c0:	000b7e95 	.word	0x000b7e95

000b69c4 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b69c4:	b510      	push	{r4, lr}
   b69c6:	4604      	mov	r4, r0
    ::free(ptr);
   b69c8:	6940      	ldr	r0, [r0, #20]
   b69ca:	f7ff f937 	bl	b5c3c <free>
   b69ce:	68a0      	ldr	r0, [r4, #8]
   b69d0:	f7ff f934 	bl	b5c3c <free>
   b69d4:	4620      	mov	r0, r4
   b69d6:	bd10      	pop	{r4, pc}

000b69d8 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b69d8:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b69da:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b69de:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b69e2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b69e6:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b69ea:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b69ee:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b69f2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b69f6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b69fa:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b69fe:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b6a02:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b6a06:	6202      	str	r2, [r0, #32]
   b6a08:	6302      	str	r2, [r0, #48]	; 0x30
   b6a0a:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b6a0e:	4770      	bx	lr

000b6a10 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b6a10:	b530      	push	{r4, r5, lr}
   b6a12:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   b6a14:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b6a16:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b6a18:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b6a1a:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b6a1e:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   b6a20:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b6a22:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   b6a24:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   b6a28:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6a2c:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b6a2e:	f7fe fed7 	bl	b57e0 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b6a32:	4621      	mov	r1, r4
   b6a34:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   b6a36:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b6a3a:	f7fe fec9 	bl	b57d0 <hal_ble_gap_set_scan_parameters>
}
   b6a3e:	b005      	add	sp, #20
   b6a40:	bd30      	pop	{r4, r5, pc}

000b6a42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6a42:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6a44:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6a48:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6a4a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b6a4e:	42ae      	cmp	r6, r5
   b6a50:	d004      	beq.n	b6a5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b6a52:	4628      	mov	r0, r5
   b6a54:	f7ff fa3a 	bl	b5ecc <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b6a58:	3510      	adds	r5, #16
   b6a5a:	e7f8      	b.n	b6a4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6a5c:	6820      	ldr	r0, [r4, #0]
   b6a5e:	f7ff f8ed 	bl	b5c3c <free>
}
   b6a62:	4620      	mov	r0, r4
   b6a64:	bd70      	pop	{r4, r5, r6, pc}

000b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6a66:	b510      	push	{r4, lr}
   b6a68:	4604      	mov	r4, r0
    ::free(ptr);
   b6a6a:	6800      	ldr	r0, [r0, #0]
   b6a6c:	f7ff f8e6 	bl	b5c3c <free>
}
   b6a70:	4620      	mov	r0, r4
   b6a72:	bd10      	pop	{r4, pc}

000b6a74 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b6a74:	b570      	push	{r4, r5, r6, lr}
   b6a76:	4604      	mov	r4, r0
    ::free(ptr);
   b6a78:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b6a7a:	f7ff f8df 	bl	b5c3c <free>
   b6a7e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b6a80:	f7ff f8dc 	bl	b5c3c <free>
    }
    ~BleScanFilter() = default;
   b6a84:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b6a88:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6a8c:	f7ff ffeb 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b6a90:	4628      	mov	r0, r5
   b6a92:	f7ff ffd6 	bl	b6a42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b6a96:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6a9a:	f7ff fbe2 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
   b6a9e:	f104 0018 	add.w	r0, r4, #24
   b6aa2:	f7ff fbde 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6aa6:	e9d4 5300 	ldrd	r5, r3, [r4]
   b6aaa:	2624      	movs	r6, #36	; 0x24
   b6aac:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6ab0:	42ae      	cmp	r6, r5
   b6ab2:	d004      	beq.n	b6abe <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b6ab4:	4628      	mov	r0, r5
   b6ab6:	f7ff ff85 	bl	b69c4 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b6aba:	3524      	adds	r5, #36	; 0x24
   b6abc:	e7f8      	b.n	b6ab0 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b6abe:	6820      	ldr	r0, [r4, #0]
   b6ac0:	f7ff f8bc 	bl	b5c3c <free>
   b6ac4:	4620      	mov	r0, r4
   b6ac6:	bd70      	pop	{r4, r5, r6, pc}

000b6ac8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b6ac8:	b530      	push	{r4, r5, lr}
   b6aca:	4615      	mov	r5, r2
   b6acc:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b6ace:	460c      	mov	r4, r1
   b6ad0:	b179      	cbz	r1, b6af2 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b6ad2:	b172      	cbz	r2, b6af2 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
   b6ad4:	a801      	add	r0, sp, #4
   b6ad6:	f7ff ff7f 	bl	b69d8 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b6ada:	4621      	mov	r1, r4
   b6adc:	462a      	mov	r2, r5
   b6ade:	a801      	add	r0, sp, #4
   b6ae0:	f7ff ff58 	bl	b6994 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b6ae4:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b6ae6:	a801      	add	r0, sp, #4
   b6ae8:	f7ff ffc4 	bl	b6a74 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b6aec:	4620      	mov	r0, r4
   b6aee:	b01f      	add	sp, #124	; 0x7c
   b6af0:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6af2:	4c01      	ldr	r4, [pc, #4]	; (b6af8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b6af4:	e7fa      	b.n	b6aec <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b6af6:	bf00      	nop
   b6af8:	fffffef2 	.word	0xfffffef2

000b6afc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6afc:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6afe:	1e14      	subs	r4, r2, #0
   b6b00:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6b02:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6b04:	db02      	blt.n	b6b0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6b06:	1862      	adds	r2, r4, r1
   b6b08:	429a      	cmp	r2, r3
   b6b0a:	dd00      	ble.n	b6b0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6b0c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6b0e:	682a      	ldr	r2, [r5, #0]
   b6b10:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6b12:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6b14:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6b16:	1a52      	subs	r2, r2, r1
   b6b18:	f002 f8f8 	bl	b8d0c <memmove>
    size_ -= n;
   b6b1c:	686a      	ldr	r2, [r5, #4]
   b6b1e:	1b12      	subs	r2, r2, r4
   b6b20:	606a      	str	r2, [r5, #4]
}
   b6b22:	bd38      	pop	{r3, r4, r5, pc}

000b6b24 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6b26:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6b28:	4604      	mov	r4, r0
   b6b2a:	460d      	mov	r5, r1
   b6b2c:	ab01      	add	r3, sp, #4
   b6b2e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6b32:	f7ff fb17 	bl	b6164 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6b36:	4602      	mov	r2, r0
   b6b38:	b138      	cbz	r0, b6b4a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6b3a:	9901      	ldr	r1, [sp, #4]
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	f7ff ffdd 	bl	b6afc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6b42:	4629      	mov	r1, r5
   b6b44:	4620      	mov	r0, r4
   b6b46:	f7ff ffed 	bl	b6b24 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6b4a:	b003      	add	sp, #12
   b6b4c:	bd30      	pop	{r4, r5, pc}

000b6b4e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6b4e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6b50:	460c      	mov	r4, r1
   b6b52:	b929      	cbnz	r1, b6b60 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6b54:	460a      	mov	r2, r1
   b6b56:	4608      	mov	r0, r1
}
   b6b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6b5c:	f7fe be28 	b.w	b57b0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6b60:	2101      	movs	r1, #1
   b6b62:	4620      	mov	r0, r4
   b6b64:	f7ff ffde 	bl	b6b24 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6b68:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6b6c:	2200      	movs	r2, #0
   b6b6e:	e7f3      	b.n	b6b58 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6b70 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6b70:	b538      	push	{r3, r4, r5, lr}
   b6b72:	4604      	mov	r4, r0
   b6b74:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6b76:	f7ff ff03 	bl	b6980 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6b7a:	2800      	cmp	r0, #0
   b6b7c:	db0a      	blt.n	b6b94 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6b7e:	4629      	mov	r1, r5
   b6b80:	4620      	mov	r0, r4
   b6b82:	f7ff ffe4 	bl	b6b4e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6b86:	2800      	cmp	r0, #0
   b6b88:	db04      	blt.n	b6b94 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b6b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6b8e:	2000      	movs	r0, #0
   b6b90:	f7fe be16 	b.w	b57c0 <hal_ble_gap_start_advertising>
}
   b6b94:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6b98 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6b98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6b9a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6b9c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6b9e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ba0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6ba2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ba4:	f7fd fa75 	bl	b4092 <_Znwj>
   b6ba8:	b118      	cbz	r0, b6bb2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6baa:	682b      	ldr	r3, [r5, #0]
   b6bac:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6bae:	686b      	ldr	r3, [r5, #4]
   b6bb0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6bb2:	4b03      	ldr	r3, [pc, #12]	; (b6bc0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6bb4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6bb6:	4b03      	ldr	r3, [pc, #12]	; (b6bc4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bb8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6bba:	60a3      	str	r3, [r4, #8]
      }
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	bd38      	pop	{r3, r4, r5, pc}
   b6bc0:	000b61a5 	.word	0x000b61a5
   b6bc4:	000b61bd 	.word	0x000b61bd

000b6bc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6bc8:	680b      	ldr	r3, [r1, #0]
   b6bca:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6bcc:	b113      	cbz	r3, b6bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6bce:	685a      	ldr	r2, [r3, #4]
   b6bd0:	3201      	adds	r2, #1
   b6bd2:	605a      	str	r2, [r3, #4]
      }
   b6bd4:	4770      	bx	lr

000b6bd6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6bd6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   b6bdc:	4604      	mov	r4, r0
   b6bde:	f840 3b04 	str.w	r3, [r0], #4
   b6be2:	f7ff fff1 	bl	b6bc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6be6:	6823      	ldr	r3, [r4, #0]
   b6be8:	b90b      	cbnz	r3, b6bee <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6bea:	f7ff fad1 	bl	b6190 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6bee:	4620      	mov	r0, r4
   b6bf0:	bd10      	pop	{r4, pc}

000b6bf2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6bf2:	b510      	push	{r4, lr}
   b6bf4:	f851 3b04 	ldr.w	r3, [r1], #4
   b6bf8:	4604      	mov	r4, r0
   b6bfa:	f840 3b04 	str.w	r3, [r0], #4
   b6bfe:	f7ff ffe3 	bl	b6bc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6c02:	4620      	mov	r0, r4
   b6c04:	bd10      	pop	{r4, pc}

000b6c06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6c06:	b510      	push	{r4, lr}
   b6c08:	f851 3b04 	ldr.w	r3, [r1], #4
   b6c0c:	4604      	mov	r4, r0
   b6c0e:	f840 3b04 	str.w	r3, [r0], #4
   b6c12:	f7ff ffd9 	bl	b6bc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6c16:	4620      	mov	r0, r4
   b6c18:	bd10      	pop	{r4, pc}

000b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6c1a:	b510      	push	{r4, lr}
   b6c1c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6c1e:	6800      	ldr	r0, [r0, #0]
   b6c20:	b108      	cbz	r0, b6c26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6c22:	f7ff fb32 	bl	b628a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6c26:	4620      	mov	r0, r4
   b6c28:	bd10      	pop	{r4, pc}

000b6c2a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6c2a:	b510      	push	{r4, lr}
   b6c2c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6c2e:	3004      	adds	r0, #4
   b6c30:	f7ff fff3 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6c34:	4620      	mov	r0, r4
   b6c36:	bd10      	pop	{r4, pc}

000b6c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c38:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6c3a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c3e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6c40:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6c44:	42ae      	cmp	r6, r5
   b6c46:	d004      	beq.n	b6c52 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6c48:	1d28      	adds	r0, r5, #4
   b6c4a:	f7ff ffe6 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c4e:	3508      	adds	r5, #8
   b6c50:	e7f8      	b.n	b6c44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6c52:	6820      	ldr	r0, [r4, #0]
   b6c54:	f7fe fff2 	bl	b5c3c <free>
}
   b6c58:	4620      	mov	r0, r4
   b6c5a:	bd70      	pop	{r4, r5, r6, pc}

000b6c5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c5c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6c5e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c62:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6c64:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6c68:	42ae      	cmp	r6, r5
   b6c6a:	d004      	beq.n	b6c76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6c6c:	1d28      	adds	r0, r5, #4
   b6c6e:	f7ff ffd4 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c72:	3508      	adds	r5, #8
   b6c74:	e7f8      	b.n	b6c68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6c76:	6820      	ldr	r0, [r4, #0]
   b6c78:	f7fe ffe0 	bl	b5c3c <free>
}
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	bd70      	pop	{r4, r5, r6, pc}

000b6c80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6c80:	b510      	push	{r4, lr}
   b6c82:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6c84:	3024      	adds	r0, #36	; 0x24
   b6c86:	f7ff ffe9 	bl	b6c5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6c8a:	f104 0018 	add.w	r0, r4, #24
   b6c8e:	f7ff ffd3 	bl	b6c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6c92:	bd10      	pop	{r4, pc}

000b6c94 <__tcf_0>:
    static BleLocalDevice instance;
   b6c94:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6c96:	4b17      	ldr	r3, [pc, #92]	; (b6cf4 <__tcf_0+0x60>)
   b6c98:	681c      	ldr	r4, [r3, #0]
   b6c9a:	b354      	cbz	r4, b6cf2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6c9c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6ca0:	f7ff fadf 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
   b6ca4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6ca8:	f7ff fadb 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
   b6cac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6cb0:	f7ff fad7 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
   b6cb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6cb8:	f7ff fad3 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6cbc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6cc0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6cc4:	42ae      	cmp	r6, r5
   b6cc6:	d004      	beq.n	b6cd2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6cc8:	1d28      	adds	r0, r5, #4
   b6cca:	f7ff ffa6 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6cce:	3508      	adds	r5, #8
   b6cd0:	e7f8      	b.n	b6cc4 <__tcf_0+0x30>
    ::free(ptr);
   b6cd2:	69a0      	ldr	r0, [r4, #24]
   b6cd4:	f7fe ffb2 	bl	b5c3c <free>
    ~BleLocalDeviceImpl() = default;
   b6cd8:	f104 000c 	add.w	r0, r4, #12
   b6cdc:	f7ff ffbe 	bl	b6c5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6ce0:	4620      	mov	r0, r4
   b6ce2:	f7ff ffa9 	bl	b6c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6cee:	f7fd b9d4 	b.w	b409a <_ZdlPvj>
   b6cf2:	bd70      	pop	{r4, r5, r6, pc}
   b6cf4:	2003e6dc 	.word	0x2003e6dc

000b6cf8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6cf8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6cfa:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6cfc:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6d00:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b6d04:	6803      	ldr	r3, [r0, #0]
   b6d06:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d08:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6d0a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6d0c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6d0e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6d10:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6d12:	f7ff ff82 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6d16:	b002      	add	sp, #8
   b6d18:	bd10      	pop	{r4, pc}

000b6d1a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6d1a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6d1c:	b510      	push	{r4, lr}
      if (_M_empty())
   b6d1e:	b90a      	cbnz	r2, b6d24 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6d20:	f001 feb6 	bl	b8a90 <_ZSt25__throw_bad_function_callv>
    }
   b6d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6d28:	68c3      	ldr	r3, [r0, #12]
   b6d2a:	4718      	bx	r3

000b6d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b6d30:	2300      	movs	r3, #0
   b6d32:	e9c0 3300 	strd	r3, r3, [r0]
   b6d36:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6d38:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b6d3c:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6d3e:	4605      	mov	r5, r0
   b6d40:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6d42:	dd4a      	ble.n	b6dda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b6d44:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b6d48:	f7fe ff70 	bl	b5c2c <malloc>
            if (!d) {
   b6d4c:	4606      	mov	r6, r0
   b6d4e:	2800      	cmp	r0, #0
   b6d50:	d043      	beq.n	b6dda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b6d52:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b6d56:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b6d58:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b6d5c:	d916      	bls.n	b6d8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b6d5e:	4550      	cmp	r0, sl
   b6d60:	d215      	bcs.n	b6d8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b6d62:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b6d66:	f1a4 0910 	sub.w	r9, r4, #16
   b6d6a:	ebaa 0404 	sub.w	r4, sl, r4
   b6d6e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b6d70:	45d1      	cmp	r9, sl
   b6d72:	d01d      	beq.n	b6db0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b6d74:	b11c      	cbz	r4, b6d7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b6d76:	4651      	mov	r1, sl
   b6d78:	4620      	mov	r0, r4
   b6d7a:	f7ff f923 	bl	b5fc4 <_ZN6StringC1EOS_>
                end->~T();
   b6d7e:	4650      	mov	r0, sl
   b6d80:	f7ff f8a4 	bl	b5ecc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6d84:	f1aa 0a10 	sub.w	sl, sl, #16
   b6d88:	3c10      	subs	r4, #16
   b6d8a:	e7f1      	b.n	b6d70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b6d8c:	d010      	beq.n	b6db0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b6d8e:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b6d90:	45a2      	cmp	sl, r4
   b6d92:	d00d      	beq.n	b6db0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b6d94:	f1b9 0f00 	cmp.w	r9, #0
   b6d98:	d003      	beq.n	b6da2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b6d9a:	4621      	mov	r1, r4
   b6d9c:	4648      	mov	r0, r9
   b6d9e:	f7ff f911 	bl	b5fc4 <_ZN6StringC1EOS_>
                p->~T();
   b6da2:	4620      	mov	r0, r4
   b6da4:	f7ff f892 	bl	b5ecc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6da8:	3410      	adds	r4, #16
   b6daa:	f109 0910 	add.w	r9, r9, #16
   b6dae:	e7ef      	b.n	b6d90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b6db0:	6828      	ldr	r0, [r5, #0]
   b6db2:	f7fe ff43 	bl	b5c3c <free>
        capacity_ = n;
   b6db6:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b6dba:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6dbc:	e9d7 4300 	ldrd	r4, r3, [r7]
   b6dc0:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b6dc4:	45a0      	cmp	r8, r4
   b6dc6:	d006      	beq.n	b6dd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b6dc8:	4621      	mov	r1, r4
   b6dca:	4630      	mov	r0, r6
   b6dcc:	f7ff f914 	bl	b5ff8 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b6dd0:	3410      	adds	r4, #16
   b6dd2:	3610      	adds	r6, #16
   b6dd4:	e7f6      	b.n	b6dc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b6dd6:	687b      	ldr	r3, [r7, #4]
   b6dd8:	606b      	str	r3, [r5, #4]
}
   b6dda:	4628      	mov	r0, r5
   b6ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6de0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b6de0:	b530      	push	{r4, r5, lr}
   b6de2:	b08d      	sub	sp, #52	; 0x34
   b6de4:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b6de6:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b6dea:	a801      	add	r0, sp, #4
   b6dec:	f7ff ff9e 	bl	b6d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b6df0:	9b02      	ldr	r3, [sp, #8]
   b6df2:	2b00      	cmp	r3, #0
   b6df4:	dd2f      	ble.n	b6e56 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b6df6:	f104 0114 	add.w	r1, r4, #20
   b6dfa:	a804      	add	r0, sp, #16
   b6dfc:	f7ff fc54 	bl	b66a8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b6e00:	f104 0108 	add.w	r1, r4, #8
   b6e04:	a808      	add	r0, sp, #32
   b6e06:	f7ff fc4f 	bl	b66a8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b6e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6e0c:	9b06      	ldr	r3, [sp, #24]
   b6e0e:	4313      	orrs	r3, r2
   b6e10:	d01f      	beq.n	b6e52 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b6e12:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b6e16:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b6e1a:	42ac      	cmp	r4, r5
   b6e1c:	d019      	beq.n	b6e52 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b6e1e:	a904      	add	r1, sp, #16
   b6e20:	4620      	mov	r0, r4
   b6e22:	f7ff f93f 	bl	b60a4 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b6e26:	b160      	cbz	r0, b6e42 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b6e28:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b6e2a:	a808      	add	r0, sp, #32
   b6e2c:	f7ff f84e 	bl	b5ecc <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b6e30:	a804      	add	r0, sp, #16
   b6e32:	f7ff f84b 	bl	b5ecc <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b6e36:	a801      	add	r0, sp, #4
   b6e38:	f7ff fe03 	bl	b6a42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b6e3c:	4620      	mov	r0, r4
   b6e3e:	b00d      	add	sp, #52	; 0x34
   b6e40:	bd30      	pop	{r4, r5, pc}
   b6e42:	4620      	mov	r0, r4
   b6e44:	a908      	add	r1, sp, #32
   b6e46:	f7ff f92d 	bl	b60a4 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b6e4a:	3410      	adds	r4, #16
   b6e4c:	2800      	cmp	r0, #0
   b6e4e:	d0e4      	beq.n	b6e1a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b6e50:	e7ea      	b.n	b6e28 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b6e52:	2400      	movs	r4, #0
   b6e54:	e7e9      	b.n	b6e2a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b6e56:	2401      	movs	r4, #1
   b6e58:	e7ed      	b.n	b6e36 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b6e5a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b6e5c:	2300      	movs	r3, #0
   b6e5e:	e9c0 3300 	strd	r3, r3, [r0]
   b6e62:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6e64:	684f      	ldr	r7, [r1, #4]
   b6e66:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6e68:	4605      	mov	r5, r0
   b6e6a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6e6c:	dd3e      	ble.n	b6eec <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b6e6e:	00f8      	lsls	r0, r7, #3
   b6e70:	f7fe fedc 	bl	b5c2c <malloc>
            if (!d) {
   b6e74:	4604      	mov	r4, r0
   b6e76:	b3c8      	cbz	r0, b6eec <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b6e78:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b6e7c:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b6e7e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b6e82:	d910      	bls.n	b6ea6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b6e84:	429c      	cmp	r4, r3
   b6e86:	d20f      	bcs.n	b6ea8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b6e88:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b6e8a:	1a1a      	subs	r2, r3, r0
   b6e8c:	f1a0 0c08 	sub.w	ip, r0, #8
   b6e90:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b6e92:	459c      	cmp	ip, r3
   b6e94:	d018      	beq.n	b6ec8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b6e96:	b11a      	cbz	r2, b6ea0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b6e98:	6819      	ldr	r1, [r3, #0]
   b6e9a:	6011      	str	r1, [r2, #0]
   b6e9c:	6859      	ldr	r1, [r3, #4]
   b6e9e:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b6ea0:	3b08      	subs	r3, #8
   b6ea2:	3a08      	subs	r2, #8
   b6ea4:	e7f5      	b.n	b6e92 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b6ea6:	d00f      	beq.n	b6ec8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b6ea8:	4601      	mov	r1, r0
   b6eaa:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b6eac:	428b      	cmp	r3, r1
   b6eae:	d00b      	beq.n	b6ec8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b6eb0:	b13a      	cbz	r2, b6ec2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b6eb2:	f8d1 c000 	ldr.w	ip, [r1]
   b6eb6:	f8c2 c000 	str.w	ip, [r2]
   b6eba:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b6ebe:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b6ec2:	3108      	adds	r1, #8
   b6ec4:	3208      	adds	r2, #8
   b6ec6:	e7f1      	b.n	b6eac <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b6ec8:	f7fe feb8 	bl	b5c3c <free>
        data_ = d;
   b6ecc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6ece:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6ed0:	e9d6 3100 	ldrd	r3, r1, [r6]
   b6ed4:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b6ed8:	4298      	cmp	r0, r3
   b6eda:	d006      	beq.n	b6eea <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b6edc:	681a      	ldr	r2, [r3, #0]
   b6ede:	6022      	str	r2, [r4, #0]
   b6ee0:	685a      	ldr	r2, [r3, #4]
   b6ee2:	6062      	str	r2, [r4, #4]
   b6ee4:	3308      	adds	r3, #8
   b6ee6:	3408      	adds	r4, #8
   b6ee8:	e7f6      	b.n	b6ed8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b6eea:	6069      	str	r1, [r5, #4]
}
   b6eec:	4628      	mov	r0, r5
   b6eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ef0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6ef0:	b570      	push	{r4, r5, r6, lr}
   b6ef2:	4604      	mov	r4, r0
        capacity_(0) {
   b6ef4:	2000      	movs	r0, #0
   b6ef6:	e9c4 0000 	strd	r0, r0, [r4]
   b6efa:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6efc:	684e      	ldr	r6, [r1, #4]
   b6efe:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6f00:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6f02:	dd12      	ble.n	b6f2a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b6f04:	0071      	lsls	r1, r6, #1
   b6f06:	f7fe fea1 	bl	b5c4c <realloc>
            if (!d) {
   b6f0a:	b170      	cbz	r0, b6f2a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b6f0c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6f0e:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6f10:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6f14:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b6f18:	429a      	cmp	r2, r3
   b6f1a:	d004      	beq.n	b6f26 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b6f1c:	f833 1b02 	ldrh.w	r1, [r3], #2
   b6f20:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b6f24:	e7f8      	b.n	b6f18 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b6f26:	686b      	ldr	r3, [r5, #4]
   b6f28:	6063      	str	r3, [r4, #4]
}
   b6f2a:	4620      	mov	r0, r4
   b6f2c:	bd70      	pop	{r4, r5, r6, pc}

000b6f2e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b6f2e:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b6f30:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b6f32:	4604      	mov	r4, r0
        if (!dismissed_) {
   b6f34:	b923      	cbnz	r3, b6f40 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b6f36:	6803      	ldr	r3, [r0, #0]
   b6f38:	6818      	ldr	r0, [r3, #0]
   b6f3a:	b108      	cbz	r0, b6f40 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b6f3c:	f7fe fe7e 	bl	b5c3c <free>
            func_();
        }
    }
   b6f40:	4620      	mov	r0, r4
   b6f42:	bd10      	pop	{r4, pc}

000b6f44 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b6f44:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b6f46:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b6f48:	4604      	mov	r4, r0
        if (!dismissed_) {
   b6f4a:	b923      	cbnz	r3, b6f56 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b6f4c:	6803      	ldr	r3, [r0, #0]
   b6f4e:	6818      	ldr	r0, [r3, #0]
   b6f50:	b108      	cbz	r0, b6f56 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b6f52:	f7fe fe73 	bl	b5c3c <free>
    }
   b6f56:	4620      	mov	r0, r4
   b6f58:	bd10      	pop	{r4, pc}
	...

000b6f5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b6f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b6f60:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b6f64:	b08f      	sub	sp, #60	; 0x3c
   b6f66:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b6f68:	f1b8 0f00 	cmp.w	r8, #0
   b6f6c:	d072      	beq.n	b7054 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b6f6e:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b6f70:	2d00      	cmp	r5, #0
   b6f72:	d06f      	beq.n	b7054 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b6f74:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6f78:	231f      	movs	r3, #31
   b6f7a:	2200      	movs	r2, #0
   b6f7c:	21ff      	movs	r1, #255	; 0xff
   b6f7e:	4648      	mov	r0, r9
   b6f80:	f7ff fb60 	bl	b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b6f84:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6f86:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6f88:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6f8a:	2200      	movs	r2, #0
   b6f8c:	4619      	mov	r1, r3
   b6f8e:	4638      	mov	r0, r7
   b6f90:	f7ff fb58 	bl	b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6f94:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6f96:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6f98:	d006      	beq.n	b6fa8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b6f9a:	42ae      	cmp	r6, r5
   b6f9c:	d030      	beq.n	b7000 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b6f9e:	2400      	movs	r4, #0
    }
   b6fa0:	4620      	mov	r0, r4
   b6fa2:	b00f      	add	sp, #60	; 0x3c
   b6fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b6fa8:	4620      	mov	r0, r4
   b6faa:	f7fe fe3f 	bl	b5c2c <malloc>
            dismissed_(false) {
   b6fae:	ab03      	add	r3, sp, #12
   b6fb0:	9304      	str	r3, [sp, #16]
   b6fb2:	2300      	movs	r3, #0
   b6fb4:	4604      	mov	r4, r0
   b6fb6:	9003      	str	r0, [sp, #12]
   b6fb8:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b6fbc:	b970      	cbnz	r0, b6fdc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b6fbe:	2320      	movs	r3, #32
   b6fc0:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b6fc4:	4b24      	ldr	r3, [pc, #144]	; (b7058 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b6fc6:	9300      	str	r3, [sp, #0]
   b6fc8:	4924      	ldr	r1, [pc, #144]	; (b705c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b6fca:	4603      	mov	r3, r0
   b6fcc:	aa06      	add	r2, sp, #24
   b6fce:	2032      	movs	r0, #50	; 0x32
   b6fd0:	f7fe fd90 	bl	b5af4 <log_message>
                    return false;
   b6fd4:	a804      	add	r0, sp, #16
   b6fd6:	f7ff ffaa 	bl	b6f2e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b6fda:	e7e1      	b.n	b6fa0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b6fdc:	4602      	mov	r2, r0
   b6fde:	21ff      	movs	r1, #255	; 0xff
   b6fe0:	462b      	mov	r3, r5
   b6fe2:	4648      	mov	r0, r9
   b6fe4:	f7ff fb2e 	bl	b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b6fe8:	9803      	ldr	r0, [sp, #12]
   b6fea:	462a      	mov	r2, r5
   b6fec:	4641      	mov	r1, r8
   b6fee:	f001 fe6f 	bl	b8cd0 <memcmp>
   b6ff2:	b118      	cbz	r0, b6ffc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b6ff4:	a804      	add	r0, sp, #16
   b6ff6:	f7ff ff9a 	bl	b6f2e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b6ffa:	e7ce      	b.n	b6f9a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b6ffc:	2401      	movs	r4, #1
   b6ffe:	e7e9      	b.n	b6fd4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b7000:	4628      	mov	r0, r5
   b7002:	f7fe fe13 	bl	b5c2c <malloc>
   b7006:	2400      	movs	r4, #0
   b7008:	ab03      	add	r3, sp, #12
   b700a:	4606      	mov	r6, r0
   b700c:	9003      	str	r0, [sp, #12]
   b700e:	9304      	str	r3, [sp, #16]
   b7010:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b7014:	b978      	cbnz	r0, b7036 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b7016:	2320      	movs	r3, #32
   b7018:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b701c:	4b0e      	ldr	r3, [pc, #56]	; (b7058 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b701e:	9300      	str	r3, [sp, #0]
   b7020:	490e      	ldr	r1, [pc, #56]	; (b705c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b7022:	4603      	mov	r3, r0
   b7024:	aa06      	add	r2, sp, #24
   b7026:	2032      	movs	r0, #50	; 0x32
   b7028:	f7fe fd64 	bl	b5af4 <log_message>
                    return false;
   b702c:	4634      	mov	r4, r6
   b702e:	a804      	add	r0, sp, #16
   b7030:	f7ff ff88 	bl	b6f44 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b7034:	e7b4      	b.n	b6fa0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b7036:	4602      	mov	r2, r0
   b7038:	21ff      	movs	r1, #255	; 0xff
   b703a:	462b      	mov	r3, r5
   b703c:	4638      	mov	r0, r7
   b703e:	f7ff fb01 	bl	b6644 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b7042:	9803      	ldr	r0, [sp, #12]
   b7044:	462a      	mov	r2, r5
   b7046:	4641      	mov	r1, r8
   b7048:	f001 fe42 	bl	b8cd0 <memcmp>
   b704c:	2800      	cmp	r0, #0
   b704e:	d1ee      	bne.n	b702e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b7050:	2401      	movs	r4, #1
   b7052:	e7ec      	b.n	b702e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b7054:	2401      	movs	r4, #1
   b7056:	e7a3      	b.n	b6fa0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b7058:	000b9bd4 	.word	0x000b9bd4
   b705c:	000b9b53 	.word	0x000b9b53

000b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7060:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7062:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7064:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7066:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7068:	dd03      	ble.n	b7072 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b706a:	f7fe fdef 	bl	b5c4c <realloc>
            if (!d) {
   b706e:	b918      	cbnz	r0, b7078 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7070:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7072:	f7fe fde3 	bl	b5c3c <free>
        T* d = nullptr;
   b7076:	2000      	movs	r0, #0
        data_ = d;
   b7078:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b707a:	60a5      	str	r5, [r4, #8]
        return true;
   b707c:	2001      	movs	r0, #1
   b707e:	e7f7      	b.n	b7070 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7080 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7080:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7082:	6883      	ldr	r3, [r0, #8]
   b7084:	428b      	cmp	r3, r1
   b7086:	da02      	bge.n	b708e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7088:	f7ff ffea 	bl	b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b708c:	bd08      	pop	{r3, pc}
    return true;
   b708e:	2001      	movs	r0, #1
   b7090:	e7fc      	b.n	b708c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7092 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7092:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b7094:	2300      	movs	r3, #0
   b7096:	e9c0 3300 	strd	r3, r3, [r0]
   b709a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b709c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b709e:	6849      	ldr	r1, [r1, #4]
   b70a0:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b70a2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b70a4:	dd10      	ble.n	b70c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b70a6:	f7ff ffdb 	bl	b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b70aa:	b168      	cbz	r0, b70c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b70ac:	e9d5 3100 	ldrd	r3, r1, [r5]
   b70b0:	6822      	ldr	r2, [r4, #0]
   b70b2:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b70b4:	4299      	cmp	r1, r3
   b70b6:	d005      	beq.n	b70c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b70b8:	b10a      	cbz	r2, b70be <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b70ba:	7818      	ldrb	r0, [r3, #0]
   b70bc:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b70be:	3301      	adds	r3, #1
   b70c0:	3201      	adds	r2, #1
   b70c2:	e7f7      	b.n	b70b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b70c4:	686b      	ldr	r3, [r5, #4]
   b70c6:	6063      	str	r3, [r4, #4]
}
   b70c8:	4620      	mov	r0, r4
   b70ca:	bd38      	pop	{r3, r4, r5, pc}

000b70cc <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b70cc:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b70ce:	680b      	ldr	r3, [r1, #0]
   b70d0:	6003      	str	r3, [r0, #0]
   b70d2:	684b      	ldr	r3, [r1, #4]
   b70d4:	6043      	str	r3, [r0, #4]
   b70d6:	4604      	mov	r4, r0
   b70d8:	460d      	mov	r5, r1
class BleAdvertisingData {
   b70da:	3008      	adds	r0, #8
   b70dc:	3108      	adds	r1, #8
   b70de:	f7ff ffd8 	bl	b7092 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b70e2:	f105 0114 	add.w	r1, r5, #20
   b70e6:	f104 0014 	add.w	r0, r4, #20
   b70ea:	f7ff ffd2 	bl	b7092 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b70ee:	f895 3020 	ldrb.w	r3, [r5, #32]
   b70f2:	f884 3020 	strb.w	r3, [r4, #32]
   b70f6:	4620      	mov	r0, r4
   b70f8:	bd38      	pop	{r3, r4, r5, pc}

000b70fa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b70fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b70fc:	4604      	mov	r4, r0
   b70fe:	a801      	add	r0, sp, #4
   b7100:	f7ff ffc7 	bl	b7092 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b7104:	9b01      	ldr	r3, [sp, #4]
   b7106:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7108:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b710a:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b710c:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b710e:	6062      	str	r2, [r4, #4]
   b7110:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7112:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7114:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7116:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7118:	9001      	str	r0, [sp, #4]
   b711a:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b711c:	f7fe fd8e 	bl	b5c3c <free>
   b7120:	b004      	add	sp, #16
   b7122:	bd10      	pop	{r4, pc}

000b7124 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7128:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b712a:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b712c:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b712e:	4419      	add	r1, r3
   b7130:	6883      	ldr	r3, [r0, #8]
   b7132:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7134:	4604      	mov	r4, r0
   b7136:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7138:	dc12      	bgt.n	b7160 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b713a:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b713c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b713e:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7140:	1bd2      	subs	r2, r2, r7
   b7142:	4631      	mov	r1, r6
   b7144:	1970      	adds	r0, r6, r5
   b7146:	f001 fde1 	bl	b8d0c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b714a:	462a      	mov	r2, r5
   b714c:	4641      	mov	r1, r8
   b714e:	4630      	mov	r0, r6
   b7150:	f001 fdce 	bl	b8cf0 <memcpy>
    size_ += n;
   b7154:	6863      	ldr	r3, [r4, #4]
   b7156:	442b      	add	r3, r5
   b7158:	6063      	str	r3, [r4, #4]
    return true;
   b715a:	2001      	movs	r0, #1
}
   b715c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7160:	f7ff ff7e 	bl	b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7164:	2800      	cmp	r0, #0
   b7166:	d1e8      	bne.n	b713a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7168:	e7f8      	b.n	b715c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b716a <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b716a:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b716c:	460a      	mov	r2, r1
   b716e:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b7170:	b510      	push	{r4, lr}
   b7172:	4604      	mov	r4, r0
    size_ = 0;
   b7174:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b7176:	b102      	cbz	r2, b717a <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b7178:	b90b      	cbnz	r3, b717e <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b717a:	2000      	movs	r0, #0
}
   b717c:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b717e:	2bff      	cmp	r3, #255	; 0xff
   b7180:	bf28      	it	cs
   b7182:	23ff      	movcs	r3, #255	; 0xff
   b7184:	f7ff ffce 	bl	b7124 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b7188:	2800      	cmp	r0, #0
   b718a:	d0f7      	beq.n	b717c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b718c:	6860      	ldr	r0, [r4, #4]
   b718e:	e7f5      	b.n	b717c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b7190 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7192:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7194:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7198:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b719a:	4604      	mov	r4, r0
   b719c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b719e:	da0b      	bge.n	b71b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b71a0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b71a2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b71a4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b71a6:	1b52      	subs	r2, r2, r5
   b71a8:	1c48      	adds	r0, r1, #1
   b71aa:	f001 fdaf 	bl	b8d0c <memmove>
    new(p) T(std::move(value));
   b71ae:	557e      	strb	r6, [r7, r5]
    ++size_;
   b71b0:	6863      	ldr	r3, [r4, #4]
   b71b2:	3301      	adds	r3, #1
   b71b4:	6063      	str	r3, [r4, #4]
}
   b71b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71b8:	3101      	adds	r1, #1
   b71ba:	f7ff ff51 	bl	b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b71be:	2800      	cmp	r0, #0
   b71c0:	d1ee      	bne.n	b71a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b71c2:	e7f8      	b.n	b71b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b71c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b71c4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b71c6:	6841      	ldr	r1, [r0, #4]
   b71c8:	f7ff bfe2 	b.w	b7190 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b71cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b71cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b71d0:	4604      	mov	r4, r0
   b71d2:	461d      	mov	r5, r3
   b71d4:	460f      	mov	r7, r1
   b71d6:	ab01      	add	r3, sp, #4
   b71d8:	4690      	mov	r8, r2
   b71da:	460a      	mov	r2, r1
   b71dc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b71e0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b71e4:	f7fe ffbe 	bl	b6164 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b71e8:	1cae      	adds	r6, r5, #2
   b71ea:	6863      	ldr	r3, [r4, #4]
   b71ec:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b71ee:	f1b9 0f00 	cmp.w	r9, #0
   b71f2:	d126      	bne.n	b7242 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b71f4:	b328      	cbz	r0, b7242 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b71f6:	4433      	add	r3, r6
   b71f8:	1a1b      	subs	r3, r3, r0
   b71fa:	2bff      	cmp	r3, #255	; 0xff
   b71fc:	d809      	bhi.n	b7212 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b71fe:	9901      	ldr	r1, [sp, #4]
   b7200:	4620      	mov	r0, r4
   b7202:	f7ff fc7b 	bl	b6afc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7206:	6861      	ldr	r1, [r4, #4]
   b7208:	4620      	mov	r0, r4
   b720a:	4431      	add	r1, r6
   b720c:	f7ff ff38 	bl	b7080 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7210:	b918      	cbnz	r0, b721a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7212:	6860      	ldr	r0, [r4, #4]
}
   b7214:	b003      	add	sp, #12
   b7216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b721a:	1c6a      	adds	r2, r5, #1
   b721c:	9901      	ldr	r1, [sp, #4]
   b721e:	b2d2      	uxtb	r2, r2
   b7220:	4620      	mov	r0, r4
   b7222:	f7ff ffb5 	bl	b7190 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7226:	9901      	ldr	r1, [sp, #4]
   b7228:	463a      	mov	r2, r7
   b722a:	3101      	adds	r1, #1
   b722c:	4620      	mov	r0, r4
   b722e:	f7ff ffaf 	bl	b7190 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7232:	9901      	ldr	r1, [sp, #4]
   b7234:	462b      	mov	r3, r5
   b7236:	4642      	mov	r2, r8
   b7238:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b723a:	4620      	mov	r0, r4
   b723c:	f7ff ff72 	bl	b7124 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7240:	e7e7      	b.n	b7212 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7242:	18f1      	adds	r1, r6, r3
   b7244:	29ff      	cmp	r1, #255	; 0xff
   b7246:	d8e4      	bhi.n	b7212 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7248:	4620      	mov	r0, r4
   b724a:	f7ff ff19 	bl	b7080 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b724e:	2800      	cmp	r0, #0
   b7250:	d0df      	beq.n	b7212 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7252:	1c69      	adds	r1, r5, #1
   b7254:	b2c9      	uxtb	r1, r1
   b7256:	4620      	mov	r0, r4
   b7258:	f7ff ffb4 	bl	b71c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b725c:	4639      	mov	r1, r7
   b725e:	4620      	mov	r0, r4
   b7260:	f7ff ffb0 	bl	b71c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7264:	6861      	ldr	r1, [r4, #4]
   b7266:	462b      	mov	r3, r5
   b7268:	4642      	mov	r2, r8
   b726a:	e7e6      	b.n	b723a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b726c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b726c:	b430      	push	{r4, r5}
   b726e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7272:	b11a      	cbz	r2, b727c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7274:	9502      	str	r5, [sp, #8]
}
   b7276:	bc30      	pop	{r4, r5}
   b7278:	f7ff bfa8 	b.w	b71cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b727c:	6840      	ldr	r0, [r0, #4]
}
   b727e:	bc30      	pop	{r4, r5}
   b7280:	4770      	bx	lr

000b7282 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7282:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7284:	2300      	movs	r3, #0
   b7286:	e9c0 3300 	strd	r3, r3, [r0]
   b728a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b728c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b728e:	9300      	str	r3, [sp, #0]
   b7290:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7292:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7296:	4619      	mov	r1, r3
   b7298:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b729c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b729e:	f7ff ffe5 	bl	b726c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b72a2:	4620      	mov	r0, r4
   b72a4:	b004      	add	sp, #16
   b72a6:	bd10      	pop	{r4, pc}

000b72a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b72a8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b72aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72ac:	4604      	mov	r4, r0
   b72ae:	460d      	mov	r5, r1
   b72b0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b72b2:	d914      	bls.n	b72de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b72b4:	4290      	cmp	r0, r2
   b72b6:	d213      	bcs.n	b72e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b72b8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b72bc:	1a75      	subs	r5, r6, r1
   b72be:	f1a1 0708 	sub.w	r7, r1, #8
   b72c2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b72c4:	42b7      	cmp	r7, r6
   b72c6:	d018      	beq.n	b72fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b72c8:	b11c      	cbz	r4, b72d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b72ca:	4631      	mov	r1, r6
   b72cc:	4620      	mov	r0, r4
   b72ce:	f7ff fc9a 	bl	b6c06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b72d2:	1d30      	adds	r0, r6, #4
   b72d4:	f7ff fca1 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b72d8:	3e08      	subs	r6, #8
   b72da:	3c08      	subs	r4, #8
   b72dc:	e7f2      	b.n	b72c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b72de:	d00c      	beq.n	b72fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b72e0:	42b5      	cmp	r5, r6
   b72e2:	d00a      	beq.n	b72fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b72e4:	b11c      	cbz	r4, b72ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b72e6:	4629      	mov	r1, r5
   b72e8:	4620      	mov	r0, r4
   b72ea:	f7ff fc8c 	bl	b6c06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b72ee:	1d28      	adds	r0, r5, #4
   b72f0:	f7ff fc93 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b72f4:	3508      	adds	r5, #8
   b72f6:	3408      	adds	r4, #8
   b72f8:	e7f2      	b.n	b72e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b72fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b72fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b72fe:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7300:	6846      	ldr	r6, [r0, #4]
   b7302:	4668      	mov	r0, sp
   b7304:	f7ff fc7f 	bl	b6c06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7308:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b730c:	429f      	cmp	r7, r3
   b730e:	db12      	blt.n	b7336 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7310:	3701      	adds	r7, #1
        if (n > 0) {
   b7312:	2f00      	cmp	r7, #0
   b7314:	dd29      	ble.n	b736a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7316:	00f8      	lsls	r0, r7, #3
   b7318:	f7fe fc88 	bl	b5c2c <malloc>
            if (!d) {
   b731c:	4605      	mov	r5, r0
   b731e:	b1f0      	cbz	r0, b735e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7320:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7324:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7328:	f7ff ffbe 	bl	b72a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b732c:	6820      	ldr	r0, [r4, #0]
   b732e:	f7fe fc85 	bl	b5c3c <free>
        data_ = d;
   b7332:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7334:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7336:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7338:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b733a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b733e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7342:	4631      	mov	r1, r6
   b7344:	f106 0008 	add.w	r0, r6, #8
   b7348:	f7ff ffae 	bl	b72a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b734c:	b11e      	cbz	r6, b7356 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b734e:	4669      	mov	r1, sp
   b7350:	4630      	mov	r0, r6
   b7352:	f7ff fc58 	bl	b6c06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7356:	6863      	ldr	r3, [r4, #4]
   b7358:	3301      	adds	r3, #1
   b735a:	6063      	str	r3, [r4, #4]
    return true;
   b735c:	2501      	movs	r5, #1
   b735e:	a801      	add	r0, sp, #4
   b7360:	f7ff fc5b 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7364:	4628      	mov	r0, r5
   b7366:	b003      	add	sp, #12
   b7368:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b736a:	2500      	movs	r5, #0
   b736c:	e7de      	b.n	b732c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b736e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b736e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7370:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7374:	4605      	mov	r5, r0
   b7376:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7378:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b737c:	42a6      	cmp	r6, r4
   b737e:	d005      	beq.n	b738c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7380:	4639      	mov	r1, r7
   b7382:	4620      	mov	r0, r4
   b7384:	f7ff fa45 	bl	b6812 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7388:	b108      	cbz	r0, b738e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b738a:	b914      	cbnz	r4, b7392 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b738c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b738e:	3408      	adds	r4, #8
   b7390:	e7f4      	b.n	b737c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7392:	1d20      	adds	r0, r4, #4
   b7394:	f7ff fc41 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7398:	e9d5 3200 	ldrd	r3, r2, [r5]
   b739c:	f104 0108 	add.w	r1, r4, #8
   b73a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b73a4:	4620      	mov	r0, r4
   b73a6:	f7ff ff7f 	bl	b72a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b73aa:	686b      	ldr	r3, [r5, #4]
   b73ac:	3b01      	subs	r3, #1
   b73ae:	606b      	str	r3, [r5, #4]
    return true;
   b73b0:	e7ec      	b.n	b738c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b73b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b73b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b73b8:	4605      	mov	r5, r0
   b73ba:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b73bc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b73be:	460c      	mov	r4, r1
        WiringBleLock lk;
   b73c0:	f7fe ff8c 	bl	b62dc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b73c4:	682e      	ldr	r6, [r5, #0]
   b73c6:	1ef3      	subs	r3, r6, #3
   b73c8:	2b0d      	cmp	r3, #13
   b73ca:	d83c      	bhi.n	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b73cc:	e8df f013 	tbh	[pc, r3, lsl #1]
   b73d0:	0053000e 	.word	0x0053000e
   b73d4:	00d1003b 	.word	0x00d1003b
   b73d8:	003b003b 	.word	0x003b003b
   b73dc:	003b003b 	.word	0x003b003b
   b73e0:	009b003b 	.word	0x009b003b
   b73e4:	009b009b 	.word	0x009b009b
   b73e8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b73ec:	a804      	add	r0, sp, #16
   b73ee:	f7ff f9db 	bl	b67a8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b73f2:	9b04      	ldr	r3, [sp, #16]
   b73f4:	89aa      	ldrh	r2, [r5, #12]
   b73f6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b73f8:	6869      	ldr	r1, [r5, #4]
   b73fa:	9804      	ldr	r0, [sp, #16]
   b73fc:	3108      	adds	r1, #8
   b73fe:	3002      	adds	r0, #2
   b7400:	f7fe ff8b 	bl	b631a <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7404:	a904      	add	r1, sp, #16
   b7406:	a806      	add	r0, sp, #24
   b7408:	f7ff fbfd 	bl	b6c06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b740c:	a906      	add	r1, sp, #24
   b740e:	f104 0018 	add.w	r0, r4, #24
   b7412:	f7ff ff73 	bl	b72fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7416:	4605      	mov	r5, r0
   b7418:	a807      	add	r0, sp, #28
   b741a:	f7ff fbfe 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b741e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7420:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7422:	b9b5      	cbnz	r5, b7452 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7424:	4b5d      	ldr	r3, [pc, #372]	; (b759c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b7426:	495e      	ldr	r1, [pc, #376]	; (b75a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7428:	9300      	str	r3, [sp, #0]
   b742a:	2032      	movs	r0, #50	; 0x32
   b742c:	462b      	mov	r3, r5
   b742e:	aa06      	add	r2, sp, #24
   b7430:	9507      	str	r5, [sp, #28]
   b7432:	f7fe fb5f 	bl	b5af4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7436:	9b04      	ldr	r3, [sp, #16]
   b7438:	4629      	mov	r1, r5
   b743a:	8818      	ldrh	r0, [r3, #0]
   b743c:	f7fe f9ea 	bl	b5814 <hal_ble_gap_disconnect>
   b7440:	a805      	add	r0, sp, #20
   b7442:	f7ff fbea 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7446:	a803      	add	r0, sp, #12
   b7448:	f7fe ff56 	bl	b62f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b744c:	b00e      	add	sp, #56	; 0x38
   b744e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7452:	4a54      	ldr	r2, [pc, #336]	; (b75a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7454:	9200      	str	r2, [sp, #0]
   b7456:	2300      	movs	r3, #0
   b7458:	4951      	ldr	r1, [pc, #324]	; (b75a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b745a:	9307      	str	r3, [sp, #28]
   b745c:	aa06      	add	r2, sp, #24
   b745e:	2001      	movs	r0, #1
   b7460:	f7fe fb48 	bl	b5af4 <log_message>
                if (impl->connectedCallback_) {
   b7464:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7466:	2b00      	cmp	r3, #0
   b7468:	d0ea      	beq.n	b7440 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b746a:	a904      	add	r1, sp, #16
   b746c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7470:	f7ff fc53 	bl	b6d1a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7474:	e7e4      	b.n	b7440 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7476:	89a9      	ldrh	r1, [r5, #12]
   b7478:	4620      	mov	r0, r4
   b747a:	f7ff f95f 	bl	b673c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b747e:	4606      	mov	r6, r0
   b7480:	2800      	cmp	r0, #0
   b7482:	d0e0      	beq.n	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7484:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7486:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b748a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b748e:	8029      	strh	r1, [r5, #0]
   b7490:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7494:	429a      	cmp	r2, r3
   b7496:	d003      	beq.n	b74a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7498:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b749c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b749e:	e7f9      	b.n	b7494 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b74a0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b74a4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b74a8:	45b8      	cmp	r8, r7
   b74aa:	d004      	beq.n	b74b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b74ac:	1d38      	adds	r0, r7, #4
   b74ae:	f7ff fbb4 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b74b2:	3708      	adds	r7, #8
   b74b4:	e7f8      	b.n	b74a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b74b6:	2300      	movs	r3, #0
   b74b8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b74ba:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b74be:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b74c2:	45b8      	cmp	r8, r7
   b74c4:	d004      	beq.n	b74d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b74c6:	1d38      	adds	r0, r7, #4
   b74c8:	f7ff fba7 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b74cc:	3708      	adds	r7, #8
   b74ce:	e7f8      	b.n	b74c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b74d0:	2300      	movs	r3, #0
   b74d2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b74d4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b74d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b74d8:	b123      	cbz	r3, b74e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b74da:	4631      	mov	r1, r6
   b74dc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b74e0:	f7ff fc1b 	bl	b6d1a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b74e4:	2300      	movs	r3, #0
   b74e6:	2220      	movs	r2, #32
   b74e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b74ec:	4a2e      	ldr	r2, [pc, #184]	; (b75a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b74ee:	9200      	str	r2, [sp, #0]
   b74f0:	492b      	ldr	r1, [pc, #172]	; (b75a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b74f2:	aa06      	add	r2, sp, #24
   b74f4:	2001      	movs	r0, #1
   b74f6:	f7fe fafd 	bl	b5af4 <log_message>
                    impl->peers_.removeOne(*peer);
   b74fa:	4631      	mov	r1, r6
   b74fc:	f104 0018 	add.w	r0, r4, #24
   b7500:	f7ff ff35 	bl	b736e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7504:	e79f      	b.n	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7506:	89a9      	ldrh	r1, [r5, #12]
   b7508:	4620      	mov	r0, r4
   b750a:	f7ff f917 	bl	b673c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b750e:	2800      	cmp	r0, #0
   b7510:	d099      	beq.n	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7512:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7514:	2b00      	cmp	r3, #0
   b7516:	d096      	beq.n	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7518:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b751a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b751c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7520:	d001      	beq.n	b7526 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7522:	2e10      	cmp	r6, #16
   b7524:	d117      	bne.n	b7556 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b7526:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7528:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b752a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b752c:	2506      	movs	r5, #6
                        };
   b752e:	f88d 3015 	strb.w	r3, [sp, #21]
   b7532:	9104      	str	r1, [sp, #16]
   b7534:	f88d 2014 	strb.w	r2, [sp, #20]
   b7538:	9006      	str	r0, [sp, #24]
   b753a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b753e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7540:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7544:	9508      	str	r5, [sp, #32]
   b7546:	e883 0003 	stmia.w	r3, {r0, r1}
   b754a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b754c:	a906      	add	r1, sp, #24
   b754e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7552:	4798      	blx	r3
   b7554:	e777      	b.n	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7556:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7558:	bf01      	itttt	eq
   b755a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b755c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b755e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7562:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7564:	bf0f      	iteee	eq
   b7566:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b756a:	461a      	movne	r2, r3
   b756c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b756e:	461d      	movne	r5, r3
   b7570:	e7dd      	b.n	b752e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7572:	89a9      	ldrh	r1, [r5, #12]
   b7574:	4620      	mov	r0, r4
   b7576:	f7ff f8e1 	bl	b673c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b757a:	4601      	mov	r1, r0
   b757c:	2800      	cmp	r0, #0
   b757e:	f43f af62 	beq.w	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7582:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7584:	2b00      	cmp	r3, #0
   b7586:	f43f af5e 	beq.w	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b758a:	686b      	ldr	r3, [r5, #4]
   b758c:	9306      	str	r3, [sp, #24]
   b758e:	aa06      	add	r2, sp, #24
   b7590:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7592:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7596:	4798      	blx	r3
   b7598:	e755      	b.n	b7446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b759a:	bf00      	nop
   b759c:	000b9bef 	.word	0x000b9bef
   b75a0:	000b9b53 	.word	0x000b9b53
   b75a4:	000b9c15 	.word	0x000b9c15
   b75a8:	000b9c32 	.word	0x000b9c32

000b75ac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b75ac:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b75ae:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b75b0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b75b2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b75b4:	dd05      	ble.n	b75c2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b75b6:	2114      	movs	r1, #20
   b75b8:	4369      	muls	r1, r5
   b75ba:	f7fe fb47 	bl	b5c4c <realloc>
            if (!d) {
   b75be:	b918      	cbnz	r0, b75c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b75c0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b75c2:	f7fe fb3b 	bl	b5c3c <free>
        T* d = nullptr;
   b75c6:	2000      	movs	r0, #0
        data_ = d;
   b75c8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b75ca:	60a5      	str	r5, [r4, #8]
        return true;
   b75cc:	2001      	movs	r0, #1
   b75ce:	e7f7      	b.n	b75c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b75d0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b75d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b75d4:	2400      	movs	r4, #0
   b75d6:	e9c0 4400 	strd	r4, r4, [r0]
   b75da:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b75dc:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b75de:	6849      	ldr	r1, [r1, #4]
   b75e0:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b75e2:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b75e4:	dd1a      	ble.n	b761c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b75e6:	f7ff ffe1 	bl	b75ac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b75ea:	b1b8      	cbz	r0, b761c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b75ec:	e9d8 9300 	ldrd	r9, r3, [r8]
   b75f0:	f04f 0c14 	mov.w	ip, #20
   b75f4:	f8d7 e000 	ldr.w	lr, [r7]
   b75f8:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b75fc:	eb09 0504 	add.w	r5, r9, r4
   b7600:	45ac      	cmp	ip, r5
   b7602:	d008      	beq.n	b7616 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b7604:	eb1e 0604 	adds.w	r6, lr, r4
   b7608:	bf1f      	itttt	ne
   b760a:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b760c:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b760e:	682b      	ldrne	r3, [r5, #0]
   b7610:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b7612:	3414      	adds	r4, #20
   b7614:	e7f2      	b.n	b75fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b7616:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b761a:	607b      	str	r3, [r7, #4]
}
   b761c:	4638      	mov	r0, r7
   b761e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7622 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7622:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b7626:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b762a:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b762c:	6883      	ldr	r3, [r0, #8]
   b762e:	19e9      	adds	r1, r5, r7
   b7630:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7632:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7634:	dc17      	bgt.n	b7666 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b7636:	2314      	movs	r3, #20
   b7638:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b763a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b763c:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b763e:	fb03 f907 	mul.w	r9, r3, r7
   b7642:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7644:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7646:	1b52      	subs	r2, r2, r5
   b7648:	4631      	mov	r1, r6
   b764a:	eb06 0009 	add.w	r0, r6, r9
   b764e:	f001 fb5d 	bl	b8d0c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7652:	464a      	mov	r2, r9
   b7654:	4641      	mov	r1, r8
   b7656:	4630      	mov	r0, r6
   b7658:	f001 fb4a 	bl	b8cf0 <memcpy>
    size_ += n;
   b765c:	6863      	ldr	r3, [r4, #4]
   b765e:	443b      	add	r3, r7
   b7660:	6063      	str	r3, [r4, #4]
}
   b7662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7666:	f7ff ffa1 	bl	b75ac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b766a:	2800      	cmp	r0, #0
   b766c:	d1e3      	bne.n	b7636 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b766e:	e7f8      	b.n	b7662 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b7670 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7670:	b082      	sub	sp, #8
   b7672:	b570      	push	{r4, r5, r6, lr}
   b7674:	460c      	mov	r4, r1
   b7676:	a904      	add	r1, sp, #16
   b7678:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b767c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7680:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7682:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7684:	da17      	bge.n	b76b6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b7686:	2314      	movs	r3, #20
   b7688:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b768c:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b768e:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b7690:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7692:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7694:	1a52      	subs	r2, r2, r1
   b7696:	18e0      	adds	r0, r4, r3
   b7698:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b769a:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b769c:	f001 fb36 	bl	b8d0c <memmove>
    new(p) T(std::move(value));
   b76a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b76a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76a4:	6833      	ldr	r3, [r6, #0]
   b76a6:	6023      	str	r3, [r4, #0]
    ++size_;
   b76a8:	686b      	ldr	r3, [r5, #4]
   b76aa:	3301      	adds	r3, #1
   b76ac:	606b      	str	r3, [r5, #4]
}
   b76ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b76b2:	b002      	add	sp, #8
   b76b4:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76b6:	3101      	adds	r1, #1
   b76b8:	f7ff ff78 	bl	b75ac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b76bc:	2800      	cmp	r0, #0
   b76be:	d1e2      	bne.n	b7686 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b76c0:	e7f5      	b.n	b76ae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b76c2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b76c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b76c6:	2400      	movs	r4, #0
   b76c8:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b76ca:	1e93      	subs	r3, r2, #2
   b76cc:	e9c0 4400 	strd	r4, r4, [r0]
   b76d0:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b76d2:	4605      	mov	r5, r0
   b76d4:	460f      	mov	r7, r1
   b76d6:	4690      	mov	r8, r2
   b76d8:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b76da:	9305      	str	r3, [sp, #20]
    return size_;
   b76dc:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b76de:	428c      	cmp	r4, r1
   b76e0:	da72      	bge.n	b77c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b76e2:	6838      	ldr	r0, [r7, #0]
   b76e4:	ab07      	add	r3, sp, #28
   b76e6:	4642      	mov	r2, r8
   b76e8:	1b09      	subs	r1, r1, r4
   b76ea:	4420      	add	r0, r4
   b76ec:	f7fe fd3a 	bl	b6164 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b76f0:	4606      	mov	r6, r0
   b76f2:	2800      	cmp	r0, #0
   b76f4:	d068      	beq.n	b77c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b76f6:	9b05      	ldr	r3, [sp, #20]
   b76f8:	2b01      	cmp	r3, #1
   b76fa:	d82f      	bhi.n	b775c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b76fc:	f1a0 0b02 	sub.w	fp, r0, #2
   b7700:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b7704:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b7708:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b770c:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b770e:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7710:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7712:	d055      	beq.n	b77c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b7714:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7716:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b771a:	4413      	add	r3, r2
   b771c:	a808      	add	r0, sp, #32
   b771e:	78d9      	ldrb	r1, [r3, #3]
   b7720:	789b      	ldrb	r3, [r3, #2]
   b7722:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b7726:	f7fe fec0 	bl	b64aa <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b772a:	f10d 0e20 	add.w	lr, sp, #32
   b772e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7732:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7736:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b773a:	f8de 3000 	ldr.w	r3, [lr]
   b773e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7742:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7746:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b774a:	ab0d      	add	r3, sp, #52	; 0x34
   b774c:	cb0c      	ldmia	r3, {r2, r3}
   b774e:	6869      	ldr	r1, [r5, #4]
   b7750:	4628      	mov	r0, r5
   b7752:	f7ff ff8d 	bl	b7670 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7756:	f109 0901 	add.w	r9, r9, #1
   b775a:	e7d7      	b.n	b770c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b775c:	f1a8 0306 	sub.w	r3, r8, #6
   b7760:	2b01      	cmp	r3, #1
   b7762:	d82d      	bhi.n	b77c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7764:	f1a0 0b02 	sub.w	fp, r0, #2
   b7768:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b776c:	f04f 0900 	mov.w	r9, #0
   b7770:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b7774:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7776:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7778:	d022      	beq.n	b77c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b777a:	3302      	adds	r3, #2
    return data_[i];
   b777c:	6839      	ldr	r1, [r7, #0]
   b777e:	4423      	add	r3, r4
   b7780:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b7784:	2201      	movs	r2, #1
   b7786:	4419      	add	r1, r3
   b7788:	a808      	add	r0, sp, #32
   b778a:	f7fe fe6f 	bl	b646c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b778e:	f10d 0e20 	add.w	lr, sp, #32
   b7792:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7796:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b779a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b779e:	f8de 3000 	ldr.w	r3, [lr]
   b77a2:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b77a6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b77aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b77ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b77b2:	6869      	ldr	r1, [r5, #4]
   b77b4:	4628      	mov	r0, r5
   b77b6:	f7ff ff5b 	bl	b7670 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b77ba:	f109 0901 	add.w	r9, r9, #1
   b77be:	e7d9      	b.n	b7774 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b77c0:	9b07      	ldr	r3, [sp, #28]
   b77c2:	441c      	add	r4, r3
   b77c4:	4434      	add	r4, r6
   b77c6:	e789      	b.n	b76dc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b77c8:	4628      	mov	r0, r5
   b77ca:	b013      	add	sp, #76	; 0x4c
   b77cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b77d0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b77d0:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b77d2:	2300      	movs	r3, #0
   b77d4:	b085      	sub	sp, #20
   b77d6:	e9c0 3300 	strd	r3, r3, [r0]
   b77da:	6083      	str	r3, [r0, #8]
   b77dc:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b77de:	2202      	movs	r2, #2
   b77e0:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b77e2:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b77e4:	f7ff ff6d 	bl	b76c2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b77e8:	a901      	add	r1, sp, #4
   b77ea:	4620      	mov	r0, r4
   b77ec:	f7ff ff19 	bl	b7622 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b77f0:	a801      	add	r0, sp, #4
   b77f2:	f7ff f938 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b77f6:	2202      	movs	r2, #2
   b77f8:	4629      	mov	r1, r5
   b77fa:	a801      	add	r0, sp, #4
   b77fc:	f7ff ff61 	bl	b76c2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7800:	a901      	add	r1, sp, #4
   b7802:	4620      	mov	r0, r4
   b7804:	f7ff ff0d 	bl	b7622 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7808:	a801      	add	r0, sp, #4
   b780a:	f7ff f92c 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b780e:	2203      	movs	r2, #3
   b7810:	4629      	mov	r1, r5
   b7812:	a801      	add	r0, sp, #4
   b7814:	f7ff ff55 	bl	b76c2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7818:	a901      	add	r1, sp, #4
   b781a:	4620      	mov	r0, r4
   b781c:	f7ff ff01 	bl	b7622 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7820:	a801      	add	r0, sp, #4
   b7822:	f7ff f920 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b7826:	2206      	movs	r2, #6
   b7828:	4629      	mov	r1, r5
   b782a:	a801      	add	r0, sp, #4
   b782c:	f7ff ff49 	bl	b76c2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7830:	a901      	add	r1, sp, #4
   b7832:	4620      	mov	r0, r4
   b7834:	f7ff fef5 	bl	b7622 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7838:	a801      	add	r0, sp, #4
   b783a:	f7ff f914 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b783e:	2207      	movs	r2, #7
   b7840:	4629      	mov	r1, r5
   b7842:	a801      	add	r0, sp, #4
   b7844:	f7ff ff3d 	bl	b76c2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7848:	a901      	add	r1, sp, #4
   b784a:	4620      	mov	r0, r4
   b784c:	f7ff fee9 	bl	b7622 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7850:	a801      	add	r0, sp, #4
   b7852:	f7ff f908 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b7856:	4620      	mov	r0, r4
   b7858:	b005      	add	sp, #20
   b785a:	bd30      	pop	{r4, r5, pc}

000b785c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7860:	b08b      	sub	sp, #44	; 0x2c
   b7862:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b7864:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b7868:	a801      	add	r0, sp, #4
   b786a:	f7ff feb1 	bl	b75d0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b786e:	9b02      	ldr	r3, [sp, #8]
   b7870:	2b00      	cmp	r3, #0
   b7872:	dd4a      	ble.n	b790a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b7874:	f104 0114 	add.w	r1, r4, #20
   b7878:	a804      	add	r0, sp, #16
   b787a:	f7ff ffa9 	bl	b77d0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b787e:	f104 0108 	add.w	r1, r4, #8
   b7882:	a807      	add	r0, sp, #28
   b7884:	f7ff ffa4 	bl	b77d0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b7888:	9d05      	ldr	r5, [sp, #20]
   b788a:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b788c:	2d00      	cmp	r5, #0
   b788e:	dc01      	bgt.n	b7894 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b7890:	2e00      	cmp	r6, #0
   b7892:	dd38      	ble.n	b7906 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b7894:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b7896:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b7898:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b789c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b78a0:	2314      	movs	r3, #20
   b78a2:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b78a6:	fb03 8505 	mla	r5, r3, r5, r8
   b78aa:	fb03 9606 	mla	r6, r3, r6, r9
   b78ae:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b78b0:	45ba      	cmp	sl, r7
   b78b2:	d028      	beq.n	b7906 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b78b4:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b78b6:	45ab      	cmp	fp, r5
   b78b8:	d015      	beq.n	b78e6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b78ba:	4659      	mov	r1, fp
   b78bc:	4650      	mov	r0, sl
   b78be:	f7fe fe36 	bl	b652e <_ZNK8particle7BleUuideqERKS0_>
   b78c2:	f10b 0b14 	add.w	fp, fp, #20
   b78c6:	4604      	mov	r4, r0
   b78c8:	2800      	cmp	r0, #0
   b78ca:	d0f4      	beq.n	b78b6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b78cc:	a807      	add	r0, sp, #28
   b78ce:	f7ff f8ca 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b78d2:	a804      	add	r0, sp, #16
   b78d4:	f7ff f8c7 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b78d8:	a801      	add	r0, sp, #4
   b78da:	f7ff f8c4 	bl	b6a66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b78de:	4620      	mov	r0, r4
   b78e0:	b00b      	add	sp, #44	; 0x2c
   b78e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b78e6:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b78e8:	45b3      	cmp	fp, r6
   b78ea:	d009      	beq.n	b7900 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b78ec:	4659      	mov	r1, fp
   b78ee:	4650      	mov	r0, sl
   b78f0:	f7fe fe1d 	bl	b652e <_ZNK8particle7BleUuideqERKS0_>
   b78f4:	f10b 0b14 	add.w	fp, fp, #20
   b78f8:	4604      	mov	r4, r0
   b78fa:	2800      	cmp	r0, #0
   b78fc:	d0f4      	beq.n	b78e8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b78fe:	e7e5      	b.n	b78cc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b7900:	f10a 0a14 	add.w	sl, sl, #20
   b7904:	e7d4      	b.n	b78b0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b7906:	2400      	movs	r4, #0
   b7908:	e7e0      	b.n	b78cc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b790a:	2401      	movs	r4, #1
   b790c:	e7e4      	b.n	b78d8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b790e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b790e:	b513      	push	{r0, r1, r4, lr}
   b7910:	460b      	mov	r3, r1
   b7912:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7914:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7918:	466c      	mov	r4, sp
   b791a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b791e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7922:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7926:	e894 0003 	ldmia.w	r4, {r0, r1}
   b792a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b792e:	b002      	add	sp, #8
   b7930:	bd10      	pop	{r4, pc}

000b7932 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7932:	b538      	push	{r3, r4, r5, lr}
   b7934:	4605      	mov	r5, r0
   b7936:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7938:	f7ff ffe9 	bl	b790e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b793c:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b793e:	68a2      	ldr	r2, [r4, #8]
   b7940:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7942:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7944:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7946:	68e2      	ldr	r2, [r4, #12]
   b7948:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b794a:	60e3      	str	r3, [r4, #12]
      }
   b794c:	bd38      	pop	{r3, r4, r5, pc}

000b794e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b794e:	b570      	push	{r4, r5, r6, lr}
   b7950:	4604      	mov	r4, r0
   b7952:	b08c      	sub	sp, #48	; 0x30
   b7954:	460e      	mov	r6, r1
   b7956:	9201      	str	r2, [sp, #4]
   b7958:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b795a:	f7fe fecf 	bl	b66fc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b795e:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7960:	9901      	ldr	r1, [sp, #4]
   b7962:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7966:	f7fe fb52 	bl	b600e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b796a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b796e:	b1cd      	cbz	r5, b79a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7970:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7972:	9502      	str	r5, [sp, #8]
   b7974:	a902      	add	r1, sp, #8
   b7976:	a804      	add	r0, sp, #16
   b7978:	9303      	str	r3, [sp, #12]
   b797a:	f7ff f90d 	bl	b6b98 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b797e:	2300      	movs	r3, #0
	__x.swap(*this);
   b7980:	a908      	add	r1, sp, #32
   b7982:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7984:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7986:	f7ff ffd4 	bl	b7932 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b798a:	4631      	mov	r1, r6
   b798c:	a808      	add	r0, sp, #32
   b798e:	f7ff ffd0 	bl	b7932 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7992:	a808      	add	r0, sp, #32
   b7994:	f7fe fc65 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
   b7998:	a804      	add	r0, sp, #16
   b799a:	f7fe fc62 	bl	b6262 <_ZNSt14_Function_baseD1Ev>
    }
   b799e:	4620      	mov	r0, r4
   b79a0:	b00c      	add	sp, #48	; 0x30
   b79a2:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b79a4:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b79a6:	e7ea      	b.n	b797e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

000b79a8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b79a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79ac:	b087      	sub	sp, #28
   b79ae:	461d      	mov	r5, r3
   b79b0:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b79b4:	4680      	mov	r8, r0
   b79b6:	468b      	mov	fp, r1
   b79b8:	4692      	mov	sl, r2
   b79ba:	9912      	ldr	r1, [sp, #72]	; 0x48
   b79bc:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b79be:	2200      	movs	r2, #0
   b79c0:	2068      	movs	r0, #104	; 0x68
   b79c2:	9102      	str	r1, [sp, #8]
   b79c4:	9204      	str	r2, [sp, #16]
   b79c6:	f7fc fb64 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b79ca:	1e06      	subs	r6, r0, #0
   b79cc:	f106 090c 	add.w	r9, r6, #12
   b79d0:	d018      	beq.n	b7a04 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b79d2:	2201      	movs	r2, #1
	: _M_impl(__a)
   b79d4:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b79d6:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b79da:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b79dc:	4a15      	ldr	r2, [pc, #84]	; (b7a34 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b79de:	f847 2b20 	str.w	r2, [r7], #32
   b79e2:	9b03      	ldr	r3, [sp, #12]
   b79e4:	9100      	str	r1, [sp, #0]
   b79e6:	465a      	mov	r2, fp
   b79e8:	4651      	mov	r1, sl
   b79ea:	4648      	mov	r0, r9
   b79ec:	f7ff ffaf 	bl	b794e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b79f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b79f4:	682b      	ldr	r3, [r5, #0]
   b79f6:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b79f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b79fa:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b79fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a00:	6823      	ldr	r3, [r4, #0]
   b7a02:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7a04:	a904      	add	r1, sp, #16
   b7a06:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7a08:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7a0c:	f7ff f974 	bl	b6cf8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7a10:	a805      	add	r0, sp, #20
   b7a12:	f7ff f902 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7a16:	f8d8 3000 	ldr.w	r3, [r8]
   b7a1a:	b93b      	cbnz	r3, b7a2c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7a1c:	4a06      	ldr	r2, [pc, #24]	; (b7a38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7a1e:	4907      	ldr	r1, [pc, #28]	; (b7a3c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7a20:	200a      	movs	r0, #10
}
   b7a22:	b007      	add	sp, #28
   b7a24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7a28:	f7fe b85c 	b.w	b5ae4 <panic_>
}
   b7a2c:	b007      	add	sp, #28
   b7a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7a32:	bf00      	nop
   b7a34:	000b9cac 	.word	0x000b9cac
   b7a38:	000b5741 	.word	0x000b5741
   b7a3c:	000b9b3c 	.word	0x000b9b3c

000b7a40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7a40:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a44:	4604      	mov	r4, r0
   b7a46:	460d      	mov	r5, r1
   b7a48:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7a4a:	d914      	bls.n	b7a76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7a4c:	4290      	cmp	r0, r2
   b7a4e:	d213      	bcs.n	b7a78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7a50:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7a54:	1a75      	subs	r5, r6, r1
   b7a56:	f1a1 0708 	sub.w	r7, r1, #8
   b7a5a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7a5c:	42b7      	cmp	r7, r6
   b7a5e:	d018      	beq.n	b7a92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7a60:	b11c      	cbz	r4, b7a6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7a62:	4631      	mov	r1, r6
   b7a64:	4620      	mov	r0, r4
   b7a66:	f7ff f8c4 	bl	b6bf2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7a6a:	1d30      	adds	r0, r6, #4
   b7a6c:	f7ff f8d5 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7a70:	3e08      	subs	r6, #8
   b7a72:	3c08      	subs	r4, #8
   b7a74:	e7f2      	b.n	b7a5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7a76:	d00c      	beq.n	b7a92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7a78:	42b5      	cmp	r5, r6
   b7a7a:	d00a      	beq.n	b7a92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7a7c:	b11c      	cbz	r4, b7a86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7a7e:	4629      	mov	r1, r5
   b7a80:	4620      	mov	r0, r4
   b7a82:	f7ff f8b6 	bl	b6bf2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7a86:	1d28      	adds	r0, r5, #4
   b7a88:	f7ff f8c7 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7a8c:	3508      	adds	r5, #8
   b7a8e:	3408      	adds	r4, #8
   b7a90:	e7f2      	b.n	b7a78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7a94:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7a96:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7a98:	4605      	mov	r5, r0
        if (n > 0) {
   b7a9a:	dd11      	ble.n	b7ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7a9c:	00f0      	lsls	r0, r6, #3
   b7a9e:	f7fe f8c5 	bl	b5c2c <malloc>
            if (!d) {
   b7aa2:	4604      	mov	r4, r0
   b7aa4:	b158      	cbz	r0, b7abe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7aa6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7aaa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7aae:	f7ff ffc7 	bl	b7a40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7ab2:	6828      	ldr	r0, [r5, #0]
   b7ab4:	f7fe f8c2 	bl	b5c3c <free>
        data_ = d;
   b7ab8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7aba:	60ae      	str	r6, [r5, #8]
        return true;
   b7abc:	2001      	movs	r0, #1
    }
   b7abe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7ac0:	2400      	movs	r4, #0
   b7ac2:	e7f6      	b.n	b7ab2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7ac4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7ac6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7ac8:	6845      	ldr	r5, [r0, #4]
   b7aca:	4668      	mov	r0, sp
   b7acc:	f7ff f891 	bl	b6bf2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ad0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7ad4:	4299      	cmp	r1, r3
   b7ad6:	da10      	bge.n	b7afa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7ad8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7ada:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7adc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7ae0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7ae4:	4629      	mov	r1, r5
   b7ae6:	f105 0008 	add.w	r0, r5, #8
   b7aea:	f7ff ffa9 	bl	b7a40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7aee:	b98d      	cbnz	r5, b7b14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7af0:	6863      	ldr	r3, [r4, #4]
   b7af2:	3301      	adds	r3, #1
   b7af4:	6063      	str	r3, [r4, #4]
    return true;
   b7af6:	2601      	movs	r6, #1
   b7af8:	e006      	b.n	b7b08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7afa:	3101      	adds	r1, #1
   b7afc:	4620      	mov	r0, r4
   b7afe:	f7ff ffc9 	bl	b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7b02:	4606      	mov	r6, r0
   b7b04:	2800      	cmp	r0, #0
   b7b06:	d1e7      	bne.n	b7ad8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7b08:	a801      	add	r0, sp, #4
   b7b0a:	f7ff f886 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7b0e:	4630      	mov	r0, r6
   b7b10:	b002      	add	sp, #8
   b7b12:	bd70      	pop	{r4, r5, r6, pc}
   b7b14:	4669      	mov	r1, sp
   b7b16:	4628      	mov	r0, r5
   b7b18:	f7ff f86b 	bl	b6bf2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7b1c:	e7e8      	b.n	b7af0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7b1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7b1e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b22:	4604      	mov	r4, r0
   b7b24:	460d      	mov	r5, r1
   b7b26:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7b28:	d914      	bls.n	b7b54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7b2a:	4290      	cmp	r0, r2
   b7b2c:	d213      	bcs.n	b7b56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7b2e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7b32:	1a75      	subs	r5, r6, r1
   b7b34:	f1a1 0708 	sub.w	r7, r1, #8
   b7b38:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7b3a:	42b7      	cmp	r7, r6
   b7b3c:	d018      	beq.n	b7b70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7b3e:	b11c      	cbz	r4, b7b48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7b40:	4631      	mov	r1, r6
   b7b42:	4620      	mov	r0, r4
   b7b44:	f7ff f847 	bl	b6bd6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b48:	1d30      	adds	r0, r6, #4
   b7b4a:	f7ff f866 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7b4e:	3e08      	subs	r6, #8
   b7b50:	3c08      	subs	r4, #8
   b7b52:	e7f2      	b.n	b7b3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7b54:	d00c      	beq.n	b7b70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7b56:	42b5      	cmp	r5, r6
   b7b58:	d00a      	beq.n	b7b70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7b5a:	b11c      	cbz	r4, b7b64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7b5c:	4629      	mov	r1, r5
   b7b5e:	4620      	mov	r0, r4
   b7b60:	f7ff f839 	bl	b6bd6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b64:	1d28      	adds	r0, r5, #4
   b7b66:	f7ff f858 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7b6a:	3508      	adds	r5, #8
   b7b6c:	3408      	adds	r4, #8
   b7b6e:	e7f2      	b.n	b7b56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7b72:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7b74:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7b76:	4605      	mov	r5, r0
        if (n > 0) {
   b7b78:	dd11      	ble.n	b7b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7b7a:	00f0      	lsls	r0, r6, #3
   b7b7c:	f7fe f856 	bl	b5c2c <malloc>
            if (!d) {
   b7b80:	4604      	mov	r4, r0
   b7b82:	b158      	cbz	r0, b7b9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7b84:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7b88:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7b8c:	f7ff ffc7 	bl	b7b1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7b90:	6828      	ldr	r0, [r5, #0]
   b7b92:	f7fe f853 	bl	b5c3c <free>
        data_ = d;
   b7b96:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7b98:	60ae      	str	r6, [r5, #8]
        return true;
   b7b9a:	2001      	movs	r0, #1
    }
   b7b9c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7b9e:	2400      	movs	r4, #0
   b7ba0:	e7f6      	b.n	b7b90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7ba2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7ba4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7ba6:	6845      	ldr	r5, [r0, #4]
   b7ba8:	4668      	mov	r0, sp
   b7baa:	f7ff f814 	bl	b6bd6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7bae:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7bb2:	4299      	cmp	r1, r3
   b7bb4:	da10      	bge.n	b7bd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7bb6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7bb8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7bba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7bbe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7bc2:	4629      	mov	r1, r5
   b7bc4:	f105 0008 	add.w	r0, r5, #8
   b7bc8:	f7ff ffa9 	bl	b7b1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7bcc:	b98d      	cbnz	r5, b7bf2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7bce:	6863      	ldr	r3, [r4, #4]
   b7bd0:	3301      	adds	r3, #1
   b7bd2:	6063      	str	r3, [r4, #4]
    return true;
   b7bd4:	2601      	movs	r6, #1
   b7bd6:	e006      	b.n	b7be6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7bd8:	3101      	adds	r1, #1
   b7bda:	4620      	mov	r0, r4
   b7bdc:	f7ff ffc9 	bl	b7b72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7be0:	4606      	mov	r6, r0
   b7be2:	2800      	cmp	r0, #0
   b7be4:	d1e7      	bne.n	b7bb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7be6:	a801      	add	r0, sp, #4
   b7be8:	f7ff f817 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7bec:	4630      	mov	r0, r6
   b7bee:	b002      	add	sp, #8
   b7bf0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7bf2:	4669      	mov	r1, sp
   b7bf4:	4628      	mov	r0, r5
   b7bf6:	f7fe ffee 	bl	b6bd6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7bfa:	e7e8      	b.n	b7bce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7bfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c00:	4617      	mov	r7, r2
   b7c02:	b0a1      	sub	sp, #132	; 0x84
   b7c04:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7c06:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7c08:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7c0a:	f7fe fb67 	bl	b62dc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7c0e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7c10:	7923      	ldrb	r3, [r4, #4]
   b7c12:	b953      	cbnz	r3, b7c2a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7c14:	4639      	mov	r1, r7
   b7c16:	4640      	mov	r0, r8
   b7c18:	f7fe ffdd 	bl	b6bd6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7c1c:	a80a      	add	r0, sp, #40	; 0x28
   b7c1e:	f7fe fb6b 	bl	b62f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7c22:	4640      	mov	r0, r8
   b7c24:	b021      	add	sp, #132	; 0x84
   b7c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7c2a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7c2c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7c30:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7c34:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7c36:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7c3a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7c3e:	9b03      	ldr	r3, [sp, #12]
   b7c40:	429d      	cmp	r5, r3
   b7c42:	d021      	beq.n	b7c88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7c44:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7c48:	4658      	mov	r0, fp
   b7c4a:	f109 0114 	add.w	r1, r9, #20
   b7c4e:	f7fe fc6e 	bl	b652e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7c52:	b1b8      	cbz	r0, b7c84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7c54:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7c58:	4650      	mov	r0, sl
   b7c5a:	f7fe fc68 	bl	b652e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7c5e:	b188      	cbz	r0, b7c84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7c60:	6823      	ldr	r3, [r4, #0]
   b7c62:	f8d9 2000 	ldr.w	r2, [r9]
   b7c66:	4053      	eors	r3, r2
   b7c68:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7c6c:	d10a      	bne.n	b7c84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7c6e:	2220      	movs	r2, #32
   b7c70:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7c74:	4a5e      	ldr	r2, [pc, #376]	; (b7df0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7c76:	9200      	str	r2, [sp, #0]
   b7c78:	aa15      	add	r2, sp, #84	; 0x54
   b7c7a:	495e      	ldr	r1, [pc, #376]	; (b7df4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7c7c:	2032      	movs	r0, #50	; 0x32
   b7c7e:	f7fd ff39 	bl	b5af4 <log_message>
   b7c82:	e7c7      	b.n	b7c14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7c84:	3508      	adds	r5, #8
   b7c86:	e7da      	b.n	b7c3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7c88:	4650      	mov	r0, sl
   b7c8a:	f7fe fc21 	bl	b64d0 <_ZNK8particle7BleUuid7isValidEv>
   b7c8e:	b960      	cbnz	r0, b7caa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b7c90:	4959      	ldr	r1, [pc, #356]	; (b7df8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7c92:	2201      	movs	r2, #1
   b7c94:	a815      	add	r0, sp, #84	; 0x54
   b7c96:	ad15      	add	r5, sp, #84	; 0x54
   b7c98:	f7fe fbe8 	bl	b646c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7c9e:	46d4      	mov	ip, sl
   b7ca0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7ca4:	682b      	ldr	r3, [r5, #0]
   b7ca6:	f8cc 3000 	str.w	r3, [ip]
   b7caa:	6833      	ldr	r3, [r6, #0]
   b7cac:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7cb0:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7cb4:	455d      	cmp	r5, fp
   b7cb6:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7cb8:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7cba:	d06e      	beq.n	b7d9a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7cbc:	f855 0b08 	ldr.w	r0, [r5], #8
   b7cc0:	f7fe fc35 	bl	b652e <_ZNK8particle7BleUuideqERKS0_>
   b7cc4:	2800      	cmp	r0, #0
   b7cc6:	d0f5      	beq.n	b7cb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7cc8:	f104 0a14 	add.w	sl, r4, #20
   b7ccc:	4650      	mov	r0, sl
   b7cce:	f7fe fbff 	bl	b64d0 <_ZNK8particle7BleUuid7isValidEv>
   b7cd2:	b988      	cbnz	r0, b7cf8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7cd4:	4b49      	ldr	r3, [pc, #292]	; (b7dfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7cd6:	4948      	ldr	r1, [pc, #288]	; (b7df8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7cd8:	881a      	ldrh	r2, [r3, #0]
   b7cda:	3201      	adds	r2, #1
   b7cdc:	b292      	uxth	r2, r2
   b7cde:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7ce0:	a815      	add	r0, sp, #84	; 0x54
   b7ce2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7ce4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7ce6:	f7fe fbea 	bl	b64be <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7cec:	46d4      	mov	ip, sl
   b7cee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7cf2:	682b      	ldr	r3, [r5, #0]
   b7cf4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7cf8:	4b41      	ldr	r3, [pc, #260]	; (b7e00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7cfa:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7cfc:	2228      	movs	r2, #40	; 0x28
   b7cfe:	2100      	movs	r1, #0
   b7d00:	a816      	add	r0, sp, #88	; 0x58
   b7d02:	f001 f81d 	bl	b8d40 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7d06:	4651      	mov	r1, sl
   b7d08:	a804      	add	r0, sp, #16
   b7d0a:	f7fe fbf3 	bl	b64f4 <_ZN8particle7BleUuid7halUUIDEv>
   b7d0e:	ab04      	add	r3, sp, #16
   b7d10:	aa18      	add	r2, sp, #96	; 0x60
   b7d12:	f10d 0c20 	add.w	ip, sp, #32
   b7d16:	6818      	ldr	r0, [r3, #0]
   b7d18:	6859      	ldr	r1, [r3, #4]
   b7d1a:	4615      	mov	r5, r2
   b7d1c:	c503      	stmia	r5!, {r0, r1}
   b7d1e:	3308      	adds	r3, #8
   b7d20:	4563      	cmp	r3, ip
   b7d22:	462a      	mov	r2, r5
   b7d24:	d1f7      	bne.n	b7d16 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7d26:	6818      	ldr	r0, [r3, #0]
   b7d28:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b7d2a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7d2c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7d30:	f8d9 3000 	ldr.w	r3, [r9]
   b7d34:	8a9b      	ldrh	r3, [r3, #20]
   b7d36:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7d3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7d3c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7d3e:	4b31      	ldr	r3, [pc, #196]	; (b7e04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7d40:	2200      	movs	r2, #0
   b7d42:	1da1      	adds	r1, r4, #6
   b7d44:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7d46:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7d4a:	f7fd fd77 	bl	b583c <hal_ble_gatt_server_add_characteristic>
   b7d4e:	2800      	cmp	r0, #0
   b7d50:	f47f af60 	bne.w	b7c14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7d54:	2301      	movs	r3, #1
   b7d56:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7d58:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7d5a:	4639      	mov	r1, r7
        return characteristics_;
   b7d5c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7d5e:	a80d      	add	r0, sp, #52	; 0x34
   b7d60:	f7fe ff39 	bl	b6bd6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7d64:	4620      	mov	r0, r4
   b7d66:	a90d      	add	r1, sp, #52	; 0x34
   b7d68:	f7ff ff1b 	bl	b7ba2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7d6c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7d6e:	a80e      	add	r0, sp, #56	; 0x38
   b7d70:	f7fe ff53 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d74:	2c00      	cmp	r4, #0
   b7d76:	f47f af4d 	bne.w	b7c14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7d7a:	2320      	movs	r3, #32
   b7d7c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7d80:	4b21      	ldr	r3, [pc, #132]	; (b7e08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7d82:	9300      	str	r3, [sp, #0]
   b7d84:	aa0d      	add	r2, sp, #52	; 0x34
   b7d86:	4623      	mov	r3, r4
   b7d88:	e777      	b.n	b7c7a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7d8a:	4639      	mov	r1, r7
   b7d8c:	4640      	mov	r0, r8
   b7d8e:	f7fe ff22 	bl	b6bd6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7d92:	a80c      	add	r0, sp, #48	; 0x30
   b7d94:	f7fe ff41 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d98:	e740      	b.n	b7c1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7d9a:	a80b      	add	r0, sp, #44	; 0x2c
   b7d9c:	f7fe fce0 	bl	b6760 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7da0:	4651      	mov	r1, sl
   b7da2:	a815      	add	r0, sp, #84	; 0x54
   b7da4:	f7fe fba6 	bl	b64f4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7daa:	2300      	movs	r3, #0
   b7dac:	3214      	adds	r2, #20
   b7dae:	a915      	add	r1, sp, #84	; 0x54
   b7db0:	2001      	movs	r0, #1
   b7db2:	f7fd fd39 	bl	b5828 <hal_ble_gatt_server_add_service>
   b7db6:	2800      	cmp	r0, #0
   b7db8:	d1e7      	bne.n	b7d8a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7dba:	6835      	ldr	r5, [r6, #0]
   b7dbc:	a90b      	add	r1, sp, #44	; 0x2c
   b7dbe:	a80d      	add	r0, sp, #52	; 0x34
   b7dc0:	f7fe ff17 	bl	b6bf2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7dc4:	4628      	mov	r0, r5
   b7dc6:	a90d      	add	r1, sp, #52	; 0x34
   b7dc8:	f7ff fe7c 	bl	b7ac4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7dcc:	4605      	mov	r5, r0
   b7dce:	a80e      	add	r0, sp, #56	; 0x38
   b7dd0:	f7fe ff23 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7dd4:	2d00      	cmp	r5, #0
   b7dd6:	d0d8      	beq.n	b7d8a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7dd8:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7dda:	6853      	ldr	r3, [r2, #4]
   b7ddc:	6812      	ldr	r2, [r2, #0]
   b7dde:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7de2:	3b01      	subs	r3, #1
   b7de4:	a80c      	add	r0, sp, #48	; 0x30
   b7de6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7dea:	f7fe ff16 	bl	b6c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7dee:	e76b      	b.n	b7cc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7df0:	000b9c51 	.word	0x000b9c51
   b7df4:	000b9b53 	.word	0x000b9b53
   b7df8:	000b9d16 	.word	0x000b9d16
   b7dfc:	2003e6d4 	.word	0x2003e6d4
   b7e00:	002c0003 	.word	0x002c0003
   b7e04:	000b68f9 	.word	0x000b68f9
   b7e08:	000b9c7c 	.word	0x000b9c7c

000b7e0c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7e0c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e10:	4604      	mov	r4, r0
   b7e12:	460d      	mov	r5, r1
   b7e14:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7e16:	d914      	bls.n	b7e42 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7e18:	4290      	cmp	r0, r2
   b7e1a:	d213      	bcs.n	b7e44 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7e1c:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b7e20:	1a75      	subs	r5, r6, r1
   b7e22:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b7e26:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7e28:	42b7      	cmp	r7, r6
   b7e2a:	d018      	beq.n	b7e5e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7e2c:	b11c      	cbz	r4, b7e36 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7e2e:	4631      	mov	r1, r6
   b7e30:	4620      	mov	r0, r4
   b7e32:	f7ff f94b 	bl	b70cc <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b7e36:	4630      	mov	r0, r6
   b7e38:	f7fe fdc4 	bl	b69c4 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b7e3c:	3e24      	subs	r6, #36	; 0x24
   b7e3e:	3c24      	subs	r4, #36	; 0x24
   b7e40:	e7f2      	b.n	b7e28 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7e42:	d00c      	beq.n	b7e5e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7e44:	42b5      	cmp	r5, r6
   b7e46:	d00a      	beq.n	b7e5e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7e48:	b11c      	cbz	r4, b7e52 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7e4a:	4629      	mov	r1, r5
   b7e4c:	4620      	mov	r0, r4
   b7e4e:	f7ff f93d 	bl	b70cc <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b7e52:	4628      	mov	r0, r5
   b7e54:	f7fe fdb6 	bl	b69c4 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b7e58:	3524      	adds	r5, #36	; 0x24
   b7e5a:	3424      	adds	r4, #36	; 0x24
   b7e5c:	e7f2      	b.n	b7e44 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7e60 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b7e62:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7e64:	4605      	mov	r5, r0
        if (n > 0) {
   b7e66:	dd13      	ble.n	b7e90 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b7e68:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b7e6a:	fb07 f006 	mul.w	r0, r7, r6
   b7e6e:	f7fd fedd 	bl	b5c2c <malloc>
            if (!d) {
   b7e72:	4604      	mov	r4, r0
   b7e74:	b158      	cbz	r0, b7e8e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b7e76:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7e7a:	fb07 1202 	mla	r2, r7, r2, r1
   b7e7e:	f7ff ffc5 	bl	b7e0c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7e82:	6828      	ldr	r0, [r5, #0]
   b7e84:	f7fd feda 	bl	b5c3c <free>
        data_ = d;
   b7e88:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7e8a:	60ae      	str	r6, [r5, #8]
        return true;
   b7e8c:	2001      	movs	r0, #1
    }
   b7e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7e90:	2400      	movs	r4, #0
   b7e92:	e7f6      	b.n	b7e82 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b7e94 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b7e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e98:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b7e9a:	ad01      	add	r5, sp, #4
   b7e9c:	4606      	mov	r6, r0
   b7e9e:	4628      	mov	r0, r5
   b7ea0:	460c      	mov	r4, r1
   b7ea2:	f7fe fa5b 	bl	b635c <_ZN8particle10BleAddressC1Ev>
   b7ea6:	a803      	add	r0, sp, #12
   b7ea8:	f7ff f9eb 	bl	b7282 <_ZN8particle18BleAdvertisingDataC1Ev>
   b7eac:	a806      	add	r0, sp, #24
   b7eae:	f7ff f9e8 	bl	b7282 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b7eb2:	6930      	ldr	r0, [r6, #16]
   b7eb4:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b7eb6:	89f2      	ldrh	r2, [r6, #14]
   b7eb8:	ab13      	add	r3, sp, #76	; 0x4c
   b7eba:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b7ebc:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b7ec0:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b7ec2:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b7ec4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b7ec8:	a806      	add	r0, sp, #24
   b7eca:	f7ff f94e 	bl	b716a <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b7ece:	89b2      	ldrh	r2, [r6, #12]
   b7ed0:	6871      	ldr	r1, [r6, #4]
   b7ed2:	a803      	add	r0, sp, #12
   b7ed4:	f7ff f949 	bl	b716a <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b7ed8:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b7edc:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b7ede:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b7ee0:	d003      	beq.n	b7eea <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b7ee2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b7ee6:	429a      	cmp	r2, r3
   b7ee8:	db5c      	blt.n	b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b7eea:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b7eee:	2b7f      	cmp	r3, #127	; 0x7f
   b7ef0:	d003      	beq.n	b7efa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b7ef2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b7ef6:	429a      	cmp	r2, r3
   b7ef8:	dc54      	bgt.n	b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b7efa:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b7efe:	4638      	mov	r0, r7
   b7f00:	f7fe ffab 	bl	b6e5a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b7f04:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b7f06:	2b00      	cmp	r3, #0
   b7f08:	dd52      	ble.n	b7fb0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b7f0a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b7f0c:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b7f10:	45b1      	cmp	r9, r6
   b7f12:	d050      	beq.n	b7fb6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b7f14:	4630      	mov	r0, r6
   b7f16:	4629      	mov	r1, r5
   b7f18:	f7fe fa0c 	bl	b6334 <_ZNK8particle10BleAddresseqERKS0_>
   b7f1c:	3608      	adds	r6, #8
   b7f1e:	4680      	mov	r8, r0
   b7f20:	2800      	cmp	r0, #0
   b7f22:	d0f5      	beq.n	b7f10 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b7f24:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b7f26:	f7fd fe89 	bl	b5c3c <free>
        if (!delegator->filterByRssi(result) ||
   b7f2a:	f1b8 0f00 	cmp.w	r8, #0
   b7f2e:	d039      	beq.n	b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b7f30:	4629      	mov	r1, r5
   b7f32:	4620      	mov	r0, r4
   b7f34:	f7fe ff54 	bl	b6de0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b7f38:	b3a0      	cbz	r0, b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b7f3a:	4629      	mov	r1, r5
   b7f3c:	4620      	mov	r0, r4
   b7f3e:	f7ff fc8d 	bl	b785c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b7f42:	4606      	mov	r6, r0
   b7f44:	b370      	cbz	r0, b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b7f46:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b7f4a:	4638      	mov	r0, r7
   b7f4c:	f7fe ffd0 	bl	b6ef0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b7f50:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b7f52:	2b00      	cmp	r3, #0
   b7f54:	dd12      	ble.n	b7f7c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b7f56:	a806      	add	r0, sp, #24
   b7f58:	f7fe fbc4 	bl	b66e4 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b7f5c:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b7f5e:	a803      	add	r0, sp, #12
   b7f60:	f7fe fbc0 	bl	b66e4 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b7f64:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b7f68:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b7f6c:	429a      	cmp	r2, r3
   b7f6e:	d025      	beq.n	b7fbc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b7f70:	f833 1b02 	ldrh.w	r1, [r3], #2
   b7f74:	4588      	cmp	r8, r1
   b7f76:	d001      	beq.n	b7f7c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b7f78:	4288      	cmp	r0, r1
   b7f7a:	d1f7      	bne.n	b7f6c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b7f7c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b7f7e:	f7fd fe5d 	bl	b5c3c <free>
              !delegator->filterByServiceUUID(result) ||
   b7f82:	b17e      	cbz	r6, b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b7f84:	4629      	mov	r1, r5
   b7f86:	4620      	mov	r0, r4
   b7f88:	f7fe ffe8 	bl	b6f5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b7f8c:	b150      	cbz	r0, b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b7f8e:	6a23      	ldr	r3, [r4, #32]
   b7f90:	b1b3      	cbz	r3, b7fc0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b7f92:	6963      	ldr	r3, [r4, #20]
   b7f94:	9513      	str	r5, [sp, #76]	; 0x4c
   b7f96:	3301      	adds	r3, #1
   b7f98:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7f9c:	4639      	mov	r1, r7
   b7f9e:	f104 0018 	add.w	r0, r4, #24
   b7fa2:	4798      	blx	r3
            return;
   b7fa4:	4628      	mov	r0, r5
   b7fa6:	f7fe fd0d 	bl	b69c4 <_ZN8particle13BleScanResultD1Ev>
    }
   b7faa:	b01d      	add	sp, #116	; 0x74
   b7fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b7fb0:	f04f 0801 	mov.w	r8, #1
   b7fb4:	e7b6      	b.n	b7f24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b7fb6:	f04f 0800 	mov.w	r8, #0
   b7fba:	e7b3      	b.n	b7f24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b7fbc:	2600      	movs	r6, #0
   b7fbe:	e7dd      	b.n	b7f7c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b7fc0:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b7fc4:	f1b8 0f00 	cmp.w	r8, #0
   b7fc8:	d007      	beq.n	b7fda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b7fca:	6963      	ldr	r3, [r4, #20]
   b7fcc:	3301      	adds	r3, #1
   b7fce:	6163      	str	r3, [r4, #20]
   b7fd0:	4629      	mov	r1, r5
   b7fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b7fd4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7fd8:	e7e3      	b.n	b7fa2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b7fda:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b7fde:	f1bc 0f00 	cmp.w	ip, #0
   b7fe2:	d025      	beq.n	b8030 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b7fe4:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b7fe6:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b7fe8:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b7fea:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b7fec:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b7fee:	d8d9      	bhi.n	b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b7ff0:	2224      	movs	r2, #36	; 0x24
   b7ff2:	4353      	muls	r3, r2
    address_ = addr.address_;
   b7ff4:	462a      	mov	r2, r5
   b7ff6:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b7ff8:	3b24      	subs	r3, #36	; 0x24
   b7ffa:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b7ffe:	f84c 0003 	str.w	r0, [ip, r3]
   b8002:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b8004:	f106 0008 	add.w	r0, r6, #8
   b8008:	a903      	add	r1, sp, #12
   b800a:	f7ff f876 	bl	b70fa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b800e:	a906      	add	r1, sp, #24
   b8010:	f106 0014 	add.w	r0, r6, #20
   b8014:	f7ff f871 	bl	b70fa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b8018:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b801c:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b8020:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b8024:	429a      	cmp	r2, r3
   b8026:	d3bd      	bcc.n	b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b8028:	4640      	mov	r0, r8
   b802a:	f7fd fbe9 	bl	b5800 <hal_ble_gap_stop_scan>
   b802e:	e7b9      	b.n	b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b8030:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8034:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b8038:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b803c:	a903      	add	r1, sp, #12
   b803e:	a80c      	add	r0, sp, #48	; 0x30
   b8040:	f7ff f827 	bl	b7092 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8044:	a906      	add	r1, sp, #24
   b8046:	a80f      	add	r0, sp, #60	; 0x3c
   b8048:	f7ff f823 	bl	b7092 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b804c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b8050:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b8054:	4641      	mov	r1, r8
   b8056:	4638      	mov	r0, r7
   b8058:	6866      	ldr	r6, [r4, #4]
   b805a:	f7ff f837 	bl	b70cc <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b805e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8062:	4299      	cmp	r1, r3
   b8064:	da10      	bge.n	b8088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b8066:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8068:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b806a:	2224      	movs	r2, #36	; 0x24
   b806c:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b8070:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b8074:	fb02 3201 	mla	r2, r2, r1, r3
   b8078:	4631      	mov	r1, r6
   b807a:	f7ff fec7 	bl	b7e0c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b807e:	b986      	cbnz	r6, b80a2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b8080:	6863      	ldr	r3, [r4, #4]
   b8082:	3301      	adds	r3, #1
   b8084:	6063      	str	r3, [r4, #4]
    return true;
   b8086:	e005      	b.n	b8094 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8088:	3101      	adds	r1, #1
   b808a:	4620      	mov	r0, r4
   b808c:	f7ff fee8 	bl	b7e60 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8090:	2800      	cmp	r0, #0
   b8092:	d1e8      	bne.n	b8066 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b8094:	4638      	mov	r0, r7
   b8096:	f7fe fc95 	bl	b69c4 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b809a:	4640      	mov	r0, r8
   b809c:	f7fe fc92 	bl	b69c4 <_ZN8particle13BleScanResultD1Ev>
   b80a0:	e780      	b.n	b7fa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b80a2:	4639      	mov	r1, r7
   b80a4:	4630      	mov	r0, r6
   b80a6:	f7ff f811 	bl	b70cc <_ZN8particle13BleScanResultC1EOS0_>
   b80aa:	e7e9      	b.n	b8080 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b80ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b80ac:	4802      	ldr	r0, [pc, #8]	; (b80b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b80ae:	2300      	movs	r3, #0
   b80b0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b80b2:	f7fd bbd7 	b.w	b5864 <os_mutex_recursive_create>
   b80b6:	bf00      	nop
   b80b8:	2003e6d8 	.word	0x2003e6d8

000b80bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b80bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80be:	4606      	mov	r6, r0
   b80c0:	460d      	mov	r5, r1
  size_t n = 0;
   b80c2:	188f      	adds	r7, r1, r2
   b80c4:	2400      	movs	r4, #0
  while (size--) {
   b80c6:	42bd      	cmp	r5, r7
   b80c8:	d00c      	beq.n	b80e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b80ca:	6833      	ldr	r3, [r6, #0]
   b80cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b80d0:	689b      	ldr	r3, [r3, #8]
   b80d2:	4630      	mov	r0, r6
   b80d4:	4798      	blx	r3
     if (chunk>=0)
   b80d6:	1e03      	subs	r3, r0, #0
   b80d8:	db01      	blt.n	b80de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b80da:	441c      	add	r4, r3
  while (size--) {
   b80dc:	e7f3      	b.n	b80c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b80de:	2c00      	cmp	r4, #0
   b80e0:	bf08      	it	eq
   b80e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b80e4:	4620      	mov	r0, r4
   b80e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b80e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b80e8:	b513      	push	{r0, r1, r4, lr}
   b80ea:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b80ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b80ee:	b159      	cbz	r1, b8108 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b80f0:	9101      	str	r1, [sp, #4]
   b80f2:	f000 fe6d 	bl	b8dd0 <strlen>
   b80f6:	6823      	ldr	r3, [r4, #0]
   b80f8:	9901      	ldr	r1, [sp, #4]
   b80fa:	68db      	ldr	r3, [r3, #12]
   b80fc:	4602      	mov	r2, r0
   b80fe:	4620      	mov	r0, r4
    }
   b8100:	b002      	add	sp, #8
   b8102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8106:	4718      	bx	r3
    }
   b8108:	b002      	add	sp, #8
   b810a:	bd10      	pop	{r4, pc}

000b810c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b810c:	6803      	ldr	r3, [r0, #0]
   b810e:	689b      	ldr	r3, [r3, #8]
   b8110:	4718      	bx	r3

000b8112 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8112:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8114:	210d      	movs	r1, #13
{
   b8116:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8118:	f7ff fff8 	bl	b810c <_ZN5Print5printEc>
  n += print('\n');
   b811c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b811e:	4604      	mov	r4, r0
  n += print('\n');
   b8120:	4628      	mov	r0, r5
   b8122:	f7ff fff3 	bl	b810c <_ZN5Print5printEc>
  return n;
}
   b8126:	4420      	add	r0, r4
   b8128:	bd38      	pop	{r3, r4, r5, pc}

000b812a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b812a:	b530      	push	{r4, r5, lr}
   b812c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b812e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8130:	2a01      	cmp	r2, #1
  *str = '\0';
   b8132:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8136:	bf98      	it	ls
   b8138:	220a      	movls	r2, #10
   b813a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b813c:	460d      	mov	r5, r1
   b813e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8142:	fb01 5312 	mls	r3, r1, r2, r5
   b8146:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b814a:	2b09      	cmp	r3, #9
   b814c:	bf94      	ite	ls
   b814e:	3330      	addls	r3, #48	; 0x30
   b8150:	3337      	addhi	r3, #55	; 0x37
   b8152:	b2db      	uxtb	r3, r3
  } while(n);
   b8154:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8156:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b815a:	d9ef      	bls.n	b813c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b815c:	4621      	mov	r1, r4
   b815e:	f7ff ffc3 	bl	b80e8 <_ZN5Print5writeEPKc>
}
   b8162:	b00b      	add	sp, #44	; 0x2c
   b8164:	bd30      	pop	{r4, r5, pc}

000b8166 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b816a:	b086      	sub	sp, #24
   b816c:	af00      	add	r7, sp, #0
   b816e:	4605      	mov	r5, r0
   b8170:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8172:	1d38      	adds	r0, r7, #4
   b8174:	2114      	movs	r1, #20
{
   b8176:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8178:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b817a:	f7fd fd6f 	bl	b5c5c <vsnprintf>

    if (n<bufsize)
   b817e:	2813      	cmp	r0, #19
   b8180:	d80e      	bhi.n	b81a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8182:	1d39      	adds	r1, r7, #4
   b8184:	4628      	mov	r0, r5
   b8186:	f7ff ffaf 	bl	b80e8 <_ZN5Print5writeEPKc>
   b818a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b818c:	b11e      	cbz	r6, b8196 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b818e:	4628      	mov	r0, r5
   b8190:	f7ff ffbf 	bl	b8112 <_ZN5Print7printlnEv>
   b8194:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8196:	4620      	mov	r0, r4
   b8198:	3718      	adds	r7, #24
   b819a:	46bd      	mov	sp, r7
   b819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b81a0:	f100 0308 	add.w	r3, r0, #8
   b81a4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b81a8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b81aa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b81ae:	4622      	mov	r2, r4
   b81b0:	1c41      	adds	r1, r0, #1
   b81b2:	683b      	ldr	r3, [r7, #0]
   b81b4:	4668      	mov	r0, sp
   b81b6:	f7fd fd51 	bl	b5c5c <vsnprintf>
  return write(str);
   b81ba:	4669      	mov	r1, sp
   b81bc:	4628      	mov	r0, r5
   b81be:	f7ff ff93 	bl	b80e8 <_ZN5Print5writeEPKc>
   b81c2:	4604      	mov	r4, r0
   b81c4:	46c5      	mov	sp, r8
   b81c6:	e7e1      	b.n	b818c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b81c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b81c8:	4b01      	ldr	r3, [pc, #4]	; (b81d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b81ca:	4a02      	ldr	r2, [pc, #8]	; (b81d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b81cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b81ce:	4770      	bx	lr
   b81d0:	2003e6e0 	.word	0x2003e6e0
   b81d4:	000b9d36 	.word	0x000b9d36

000b81d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b81d8:	4b02      	ldr	r3, [pc, #8]	; (b81e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b81da:	681a      	ldr	r2, [r3, #0]
   b81dc:	4b02      	ldr	r3, [pc, #8]	; (b81e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b81de:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b81e0:	4770      	bx	lr
   b81e2:	bf00      	nop
   b81e4:	2003deb8 	.word	0x2003deb8
   b81e8:	2003e6e4 	.word	0x2003e6e4

000b81ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b81ec:	2100      	movs	r1, #0
   b81ee:	f7fd bc91 	b.w	b5b14 <system_delay_ms>
	...

000b81f4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b81f4:	4b01      	ldr	r3, [pc, #4]	; (b81fc <_GLOBAL__sub_I_RGB+0x8>)
   b81f6:	2200      	movs	r2, #0
   b81f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b81fa:	4770      	bx	lr
   b81fc:	2003e6e8 	.word	0x2003e6e8

000b8200 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8200:	4b01      	ldr	r3, [pc, #4]	; (b8208 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8202:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8204:	4770      	bx	lr
   b8206:	bf00      	nop
   b8208:	2003debc 	.word	0x2003debc

000b820c <serialEventRun>:
{
   b820c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b820e:	4b0b      	ldr	r3, [pc, #44]	; (b823c <serialEventRun+0x30>)
   b8210:	b143      	cbz	r3, b8224 <serialEventRun+0x18>
   b8212:	f000 f96b 	bl	b84ec <_Z16_fetch_usbserialv>
   b8216:	6803      	ldr	r3, [r0, #0]
   b8218:	691b      	ldr	r3, [r3, #16]
   b821a:	4798      	blx	r3
   b821c:	2800      	cmp	r0, #0
   b821e:	dd01      	ble.n	b8224 <serialEventRun+0x18>
        serialEvent();
   b8220:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8224:	4b06      	ldr	r3, [pc, #24]	; (b8240 <serialEventRun+0x34>)
   b8226:	b143      	cbz	r3, b823a <serialEventRun+0x2e>
   b8228:	f000 fbcc 	bl	b89c4 <_Z22__fetch_global_Serial1v>
   b822c:	6803      	ldr	r3, [r0, #0]
   b822e:	691b      	ldr	r3, [r3, #16]
   b8230:	4798      	blx	r3
   b8232:	2800      	cmp	r0, #0
   b8234:	dd01      	ble.n	b823a <serialEventRun+0x2e>
        serialEvent1();
   b8236:	f3af 8000 	nop.w
}
   b823a:	bd08      	pop	{r3, pc}
	...

000b8244 <_post_loop>:
{
   b8244:	b508      	push	{r3, lr}
	serialEventRun();
   b8246:	f7ff ffe1 	bl	b820c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b824a:	f7fd fa89 	bl	b5760 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b824e:	4b01      	ldr	r3, [pc, #4]	; (b8254 <_post_loop+0x10>)
   b8250:	6018      	str	r0, [r3, #0]
}
   b8252:	bd08      	pop	{r3, pc}
   b8254:	2003e740 	.word	0x2003e740

000b8258 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8258:	4805      	ldr	r0, [pc, #20]	; (b8270 <_Z33system_initialize_user_backup_ramv+0x18>)
   b825a:	4a06      	ldr	r2, [pc, #24]	; (b8274 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b825c:	4906      	ldr	r1, [pc, #24]	; (b8278 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b825e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8260:	1a12      	subs	r2, r2, r0
   b8262:	f000 fd45 	bl	b8cf0 <memcpy>
    __backup_sram_signature = signature;
   b8266:	4b05      	ldr	r3, [pc, #20]	; (b827c <_Z33system_initialize_user_backup_ramv+0x24>)
   b8268:	4a05      	ldr	r2, [pc, #20]	; (b8280 <_Z33system_initialize_user_backup_ramv+0x28>)
   b826a:	601a      	str	r2, [r3, #0]
}
   b826c:	bd08      	pop	{r3, pc}
   b826e:	bf00      	nop
   b8270:	2003f400 	.word	0x2003f400
   b8274:	2003f404 	.word	0x2003f404
   b8278:	000ba144 	.word	0x000ba144
   b827c:	2003f400 	.word	0x2003f400
   b8280:	9a271c1e 	.word	0x9a271c1e

000b8284 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8284:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8286:	2300      	movs	r3, #0
   b8288:	9300      	str	r3, [sp, #0]
   b828a:	461a      	mov	r2, r3
   b828c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8290:	f7fd fc52 	bl	b5b38 <system_ctrl_set_result>
}
   b8294:	b003      	add	sp, #12
   b8296:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b829c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b829c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b829e:	8843      	ldrh	r3, [r0, #2]
   b82a0:	2b0a      	cmp	r3, #10
   b82a2:	d008      	beq.n	b82b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b82a4:	2b50      	cmp	r3, #80	; 0x50
   b82a6:	d10b      	bne.n	b82c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b82a8:	4b09      	ldr	r3, [pc, #36]	; (b82d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b82aa:	681b      	ldr	r3, [r3, #0]
   b82ac:	b14b      	cbz	r3, b82c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b82ae:	b003      	add	sp, #12
   b82b0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b82b4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b82b6:	f7ff ffe5 	bl	b8284 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b82ba:	b003      	add	sp, #12
   b82bc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b82c0:	2300      	movs	r3, #0
   b82c2:	9300      	str	r3, [sp, #0]
   b82c4:	461a      	mov	r2, r3
   b82c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b82ca:	f7fd fc35 	bl	b5b38 <system_ctrl_set_result>
}
   b82ce:	e7f4      	b.n	b82ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b82d0:	2003e6fc 	.word	0x2003e6fc

000b82d4 <module_user_init_hook>:
{
   b82d4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b82d6:	4812      	ldr	r0, [pc, #72]	; (b8320 <module_user_init_hook+0x4c>)
   b82d8:	2100      	movs	r1, #0
   b82da:	f7fd fcdf 	bl	b5c9c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b82de:	4b11      	ldr	r3, [pc, #68]	; (b8324 <module_user_init_hook+0x50>)
   b82e0:	681a      	ldr	r2, [r3, #0]
   b82e2:	4b11      	ldr	r3, [pc, #68]	; (b8328 <module_user_init_hook+0x54>)
   b82e4:	429a      	cmp	r2, r3
   b82e6:	4b11      	ldr	r3, [pc, #68]	; (b832c <module_user_init_hook+0x58>)
   b82e8:	bf0c      	ite	eq
   b82ea:	2201      	moveq	r2, #1
   b82ec:	2200      	movne	r2, #0
   b82ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b82f0:	d001      	beq.n	b82f6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b82f2:	f7ff ffb1 	bl	b8258 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b82f6:	f7fd fa1b 	bl	b5730 <HAL_RNG_GetRandomNumber>
   b82fa:	4604      	mov	r4, r0
    srand(seed);
   b82fc:	f000 fd28 	bl	b8d50 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8300:	4b0b      	ldr	r3, [pc, #44]	; (b8330 <module_user_init_hook+0x5c>)
   b8302:	b113      	cbz	r3, b830a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8304:	4620      	mov	r0, r4
   b8306:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b830a:	2100      	movs	r1, #0
   b830c:	4808      	ldr	r0, [pc, #32]	; (b8330 <module_user_init_hook+0x5c>)
   b830e:	f7fd fc85 	bl	b5c1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8316:	4807      	ldr	r0, [pc, #28]	; (b8334 <module_user_init_hook+0x60>)
   b8318:	2100      	movs	r1, #0
   b831a:	f7fd bc03 	b.w	b5b24 <system_ctrl_set_app_request_handler>
   b831e:	bf00      	nop
   b8320:	000b8201 	.word	0x000b8201
   b8324:	2003f400 	.word	0x2003f400
   b8328:	9a271c1e 	.word	0x9a271c1e
   b832c:	2003e6f8 	.word	0x2003e6f8
   b8330:	00000000 	.word	0x00000000
   b8334:	000b829d 	.word	0x000b829d

000b8338 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8338:	4770      	bx	lr

000b833a <_ZN9IPAddressD0Ev>:
   b833a:	b510      	push	{r4, lr}
   b833c:	2118      	movs	r1, #24
   b833e:	4604      	mov	r4, r0
   b8340:	f7fb feab 	bl	b409a <_ZdlPvj>
   b8344:	4620      	mov	r0, r4
   b8346:	bd10      	pop	{r4, pc}

000b8348 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8348:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b834a:	7d03      	ldrb	r3, [r0, #20]
   b834c:	2b06      	cmp	r3, #6
{
   b834e:	b08d      	sub	sp, #52	; 0x34
   b8350:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8352:	f100 0704 	add.w	r7, r0, #4
   b8356:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b835a:	d012      	beq.n	b8382 <_ZNK9IPAddress7printToER5Print+0x3a>
   b835c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8360:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8364:	220a      	movs	r2, #10
   b8366:	4630      	mov	r0, r6
   b8368:	f7ff fedf 	bl	b812a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b836c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b836e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8370:	d019      	beq.n	b83a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8372:	2c00      	cmp	r4, #0
   b8374:	d0f4      	beq.n	b8360 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8376:	212e      	movs	r1, #46	; 0x2e
   b8378:	4630      	mov	r0, r6
   b837a:	f7ff fec7 	bl	b810c <_ZN5Print5printEc>
   b837e:	4404      	add	r4, r0
   b8380:	e7ee      	b.n	b8360 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8382:	232f      	movs	r3, #47	; 0x2f
   b8384:	466a      	mov	r2, sp
   b8386:	4639      	mov	r1, r7
   b8388:	200a      	movs	r0, #10
		buf[0] = 0;
   b838a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b838e:	f7fd fa81 	bl	b5894 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8392:	4668      	mov	r0, sp
   b8394:	f000 fd1c 	bl	b8dd0 <strlen>
   b8398:	6833      	ldr	r3, [r6, #0]
   b839a:	4602      	mov	r2, r0
   b839c:	68db      	ldr	r3, [r3, #12]
   b839e:	4669      	mov	r1, sp
   b83a0:	4630      	mov	r0, r6
   b83a2:	4798      	blx	r3
   b83a4:	4604      	mov	r4, r0
    }
    return n;
}
   b83a6:	4620      	mov	r0, r4
   b83a8:	b00d      	add	sp, #52	; 0x34
   b83aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b83ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b83ac:	b510      	push	{r4, lr}
   b83ae:	4b05      	ldr	r3, [pc, #20]	; (b83c4 <_ZN9IPAddressC1Ev+0x18>)
   b83b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b83b2:	2211      	movs	r2, #17
   b83b4:	f840 3b04 	str.w	r3, [r0], #4
   b83b8:	2100      	movs	r1, #0
   b83ba:	f000 fcc1 	bl	b8d40 <memset>
}
   b83be:	4620      	mov	r0, r4
   b83c0:	bd10      	pop	{r4, pc}
   b83c2:	bf00      	nop
   b83c4:	000b9d60 	.word	0x000b9d60

000b83c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b83c8:	4603      	mov	r3, r0
   b83ca:	4a07      	ldr	r2, [pc, #28]	; (b83e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b83cc:	b510      	push	{r4, lr}
   b83ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b83d2:	f101 0210 	add.w	r2, r1, #16
   b83d6:	f851 4b04 	ldr.w	r4, [r1], #4
   b83da:	f843 4b04 	str.w	r4, [r3], #4
   b83de:	4291      	cmp	r1, r2
   b83e0:	d1f9      	bne.n	b83d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b83e2:	780a      	ldrb	r2, [r1, #0]
   b83e4:	701a      	strb	r2, [r3, #0]
}
   b83e6:	bd10      	pop	{r4, pc}
   b83e8:	000b9d60 	.word	0x000b9d60

000b83ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b83ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b83ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b83f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b83f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b83fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b83fe:	2304      	movs	r3, #4
   b8400:	6041      	str	r1, [r0, #4]
   b8402:	7503      	strb	r3, [r0, #20]
}
   b8404:	bd10      	pop	{r4, pc}
	...

000b8408 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8408:	b507      	push	{r0, r1, r2, lr}
   b840a:	4b06      	ldr	r3, [pc, #24]	; (b8424 <_ZN9IPAddressC1EPKh+0x1c>)
   b840c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b840e:	78cb      	ldrb	r3, [r1, #3]
   b8410:	9300      	str	r3, [sp, #0]
   b8412:	788b      	ldrb	r3, [r1, #2]
   b8414:	784a      	ldrb	r2, [r1, #1]
   b8416:	7809      	ldrb	r1, [r1, #0]
   b8418:	f7ff ffe8 	bl	b83ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b841c:	b003      	add	sp, #12
   b841e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8422:	bf00      	nop
   b8424:	000b9d60 	.word	0x000b9d60

000b8428 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8428:	7441      	strb	r1, [r0, #17]
}
   b842a:	4770      	bx	lr

000b842c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b842c:	4770      	bx	lr

000b842e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b842e:	4770      	bx	lr

000b8430 <_ZN9USBSerial4readEv>:
{
   b8430:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8432:	2100      	movs	r1, #0
   b8434:	7c00      	ldrb	r0, [r0, #16]
   b8436:	f7fd fb35 	bl	b5aa4 <HAL_USB_USART_Receive_Data>
}
   b843a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b843e:	bd08      	pop	{r3, pc}

000b8440 <_ZN9USBSerial4peekEv>:
{
   b8440:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8442:	2101      	movs	r1, #1
   b8444:	7c00      	ldrb	r0, [r0, #16]
   b8446:	f7fd fb2d 	bl	b5aa4 <HAL_USB_USART_Receive_Data>
}
   b844a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b844e:	bd08      	pop	{r3, pc}

000b8450 <_ZN9USBSerial17availableForWriteEv>:
{
   b8450:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8452:	7c00      	ldrb	r0, [r0, #16]
   b8454:	f7fd fb1e 	bl	b5a94 <HAL_USB_USART_Available_Data_For_Write>
}
   b8458:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b845c:	bd08      	pop	{r3, pc}

000b845e <_ZN9USBSerial9availableEv>:
{
   b845e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8460:	7c00      	ldrb	r0, [r0, #16]
   b8462:	f7fd fb0f 	bl	b5a84 <HAL_USB_USART_Available_Data>
}
   b8466:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b846a:	bd08      	pop	{r3, pc}

000b846c <_ZN9USBSerial5writeEh>:
{
   b846c:	b513      	push	{r0, r1, r4, lr}
   b846e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8470:	7c00      	ldrb	r0, [r0, #16]
{
   b8472:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8474:	f7fd fb0e 	bl	b5a94 <HAL_USB_USART_Available_Data_For_Write>
   b8478:	2800      	cmp	r0, #0
   b847a:	9901      	ldr	r1, [sp, #4]
   b847c:	dc01      	bgt.n	b8482 <_ZN9USBSerial5writeEh+0x16>
   b847e:	7c60      	ldrb	r0, [r4, #17]
   b8480:	b120      	cbz	r0, b848c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8482:	7c20      	ldrb	r0, [r4, #16]
   b8484:	f7fd fb16 	bl	b5ab4 <HAL_USB_USART_Send_Data>
   b8488:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b848c:	b002      	add	sp, #8
   b848e:	bd10      	pop	{r4, pc}

000b8490 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8490:	7c00      	ldrb	r0, [r0, #16]
   b8492:	f7fd bb17 	b.w	b5ac4 <HAL_USB_USART_Flush_Data>

000b8496 <_ZN9USBSerialD0Ev>:
   b8496:	b510      	push	{r4, lr}
   b8498:	2114      	movs	r1, #20
   b849a:	4604      	mov	r4, r0
   b849c:	f7fb fdfd 	bl	b409a <_ZdlPvj>
   b84a0:	4620      	mov	r0, r4
   b84a2:	bd10      	pop	{r4, pc}

000b84a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b84a4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b84a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b84aa:	4604      	mov	r4, r0
   b84ac:	4608      	mov	r0, r1
   b84ae:	2100      	movs	r1, #0
   b84b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b84b4:	4b04      	ldr	r3, [pc, #16]	; (b84c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b84b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b84b8:	2301      	movs	r3, #1
  _serial = serial;
   b84ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b84bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b84be:	4611      	mov	r1, r2
   b84c0:	f7fd fad0 	bl	b5a64 <HAL_USB_USART_Init>
}
   b84c4:	4620      	mov	r0, r4
   b84c6:	bd10      	pop	{r4, pc}
   b84c8:	000b9d74 	.word	0x000b9d74

000b84cc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b84cc:	7c00      	ldrb	r0, [r0, #16]
   b84ce:	2200      	movs	r2, #0
   b84d0:	f7fd bad0 	b.w	b5a74 <HAL_USB_USART_Begin>

000b84d4 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b84d4:	7c00      	ldrb	r0, [r0, #16]
   b84d6:	f7fd bafd 	b.w	b5ad4 <HAL_USB_USART_Is_Connected>

000b84da <_Z19acquireSerialBufferv>:
{
   b84da:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b84dc:	2214      	movs	r2, #20
{
   b84de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b84e0:	2100      	movs	r1, #0
   b84e2:	f000 fc2d 	bl	b8d40 <memset>
}
   b84e6:	4620      	mov	r0, r4
   b84e8:	bd10      	pop	{r4, pc}
	...

000b84ec <_Z16_fetch_usbserialv>:
{
   b84ec:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84ee:	4c0f      	ldr	r4, [pc, #60]	; (b852c <_Z16_fetch_usbserialv+0x40>)
{
   b84f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b84f2:	a803      	add	r0, sp, #12
   b84f4:	f7ff fff1 	bl	b84da <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84f8:	7821      	ldrb	r1, [r4, #0]
   b84fa:	f3bf 8f5b 	dmb	ish
   b84fe:	f011 0101 	ands.w	r1, r1, #1
   b8502:	d10f      	bne.n	b8524 <_Z16_fetch_usbserialv+0x38>
   b8504:	4620      	mov	r0, r4
   b8506:	9101      	str	r1, [sp, #4]
   b8508:	f7fb fdd6 	bl	b40b8 <__cxa_guard_acquire>
   b850c:	9901      	ldr	r1, [sp, #4]
   b850e:	b148      	cbz	r0, b8524 <_Z16_fetch_usbserialv+0x38>
   b8510:	aa03      	add	r2, sp, #12
   b8512:	4807      	ldr	r0, [pc, #28]	; (b8530 <_Z16_fetch_usbserialv+0x44>)
   b8514:	f7ff ffc6 	bl	b84a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8518:	4620      	mov	r0, r4
   b851a:	f7fb fdd2 	bl	b40c2 <__cxa_guard_release>
   b851e:	4805      	ldr	r0, [pc, #20]	; (b8534 <_Z16_fetch_usbserialv+0x48>)
   b8520:	f000 fbcc 	bl	b8cbc <atexit>
	return _usbserial;
}
   b8524:	4802      	ldr	r0, [pc, #8]	; (b8530 <_Z16_fetch_usbserialv+0x44>)
   b8526:	b008      	add	sp, #32
   b8528:	bd10      	pop	{r4, pc}
   b852a:	bf00      	nop
   b852c:	2003e700 	.word	0x2003e700
   b8530:	2003e704 	.word	0x2003e704
   b8534:	000b842d 	.word	0x000b842d

000b8538 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8538:	4770      	bx	lr

000b853a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b853a:	7441      	strb	r1, [r0, #17]
}
   b853c:	4770      	bx	lr

000b853e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b853e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8540:	7c00      	ldrb	r0, [r0, #16]
   b8542:	f7fd f9df 	bl	b5904 <hal_usart_available_data_for_write>
}
   b8546:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b854a:	bd08      	pop	{r3, pc}

000b854c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b854c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b854e:	7c00      	ldrb	r0, [r0, #16]
   b8550:	f7fd f9b0 	bl	b58b4 <hal_usart_available>
}
   b8554:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8558:	bd08      	pop	{r3, pc}

000b855a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b855a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b855c:	7c00      	ldrb	r0, [r0, #16]
   b855e:	f7fd f9b9 	bl	b58d4 <hal_usart_peek>
}
   b8562:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8566:	bd08      	pop	{r3, pc}

000b8568 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8568:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b856a:	7c00      	ldrb	r0, [r0, #16]
   b856c:	f7fd f9aa 	bl	b58c4 <hal_usart_read>
}
   b8570:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8574:	bd08      	pop	{r3, pc}

000b8576 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8576:	7c00      	ldrb	r0, [r0, #16]
   b8578:	f7fd b9b4 	b.w	b58e4 <hal_usart_flush>

000b857c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b857c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b857e:	7c45      	ldrb	r5, [r0, #17]
{
   b8580:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8582:	b12d      	cbz	r5, b8590 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8584:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8586:	b003      	add	sp, #12
   b8588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b858c:	f7fd b98a 	b.w	b58a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8590:	7c00      	ldrb	r0, [r0, #16]
   b8592:	9101      	str	r1, [sp, #4]
   b8594:	f7fd f9b6 	bl	b5904 <hal_usart_available_data_for_write>
   b8598:	2800      	cmp	r0, #0
   b859a:	9901      	ldr	r1, [sp, #4]
   b859c:	dcf2      	bgt.n	b8584 <_ZN11USARTSerial5writeEh+0x8>
}
   b859e:	4628      	mov	r0, r5
   b85a0:	b003      	add	sp, #12
   b85a2:	bd30      	pop	{r4, r5, pc}

000b85a4 <_ZN11USARTSerialD0Ev>:
   b85a4:	b510      	push	{r4, lr}
   b85a6:	2114      	movs	r1, #20
   b85a8:	4604      	mov	r4, r0
   b85aa:	f7fb fd76 	bl	b409a <_ZdlPvj>
   b85ae:	4620      	mov	r0, r4
   b85b0:	bd10      	pop	{r4, pc}
	...

000b85b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b85b4:	b510      	push	{r4, lr}
   b85b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b85ba:	4604      	mov	r4, r0
   b85bc:	4608      	mov	r0, r1
   b85be:	4611      	mov	r1, r2
   b85c0:	2200      	movs	r2, #0
   b85c2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b85c6:	4b04      	ldr	r3, [pc, #16]	; (b85d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b85c8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b85ca:	2301      	movs	r3, #1
  _serial = serial;
   b85cc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b85ce:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b85d0:	f7fd f9a0 	bl	b5914 <hal_usart_init_ex>
}
   b85d4:	4620      	mov	r0, r4
   b85d6:	bd10      	pop	{r4, pc}
   b85d8:	000b9da4 	.word	0x000b9da4

000b85dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b85dc:	4770      	bx	lr

000b85de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b85de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b85e0:	4606      	mov	r6, r0
   b85e2:	4615      	mov	r5, r2
   b85e4:	460c      	mov	r4, r1
   b85e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b85e8:	42bc      	cmp	r4, r7
   b85ea:	d006      	beq.n	b85fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b85ec:	6833      	ldr	r3, [r6, #0]
   b85ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   b85f2:	689b      	ldr	r3, [r3, #8]
   b85f4:	4630      	mov	r0, r6
   b85f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b85f8:	e7f6      	b.n	b85e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b85fa:	4628      	mov	r0, r5
   b85fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b85fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b85fe:	7c00      	ldrb	r0, [r0, #16]
   b8600:	2200      	movs	r2, #0
   b8602:	f7fd b9a7 	b.w	b5954 <hal_i2c_write>

000b8606 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8606:	7c00      	ldrb	r0, [r0, #16]
   b8608:	2100      	movs	r1, #0
   b860a:	f7fd b9ab 	b.w	b5964 <hal_i2c_available>

000b860e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b860e:	7c00      	ldrb	r0, [r0, #16]
   b8610:	2100      	movs	r1, #0
   b8612:	f7fd b9af 	b.w	b5974 <hal_i2c_read>

000b8616 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8616:	7c00      	ldrb	r0, [r0, #16]
   b8618:	2100      	movs	r1, #0
   b861a:	f7fd b9b3 	b.w	b5984 <hal_i2c_peek>

000b861e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b861e:	7c00      	ldrb	r0, [r0, #16]
   b8620:	2100      	movs	r1, #0
   b8622:	f7fd b9b7 	b.w	b5994 <hal_i2c_flush>

000b8626 <_ZN7TwoWireD0Ev>:
   b8626:	b510      	push	{r4, lr}
   b8628:	2114      	movs	r1, #20
   b862a:	4604      	mov	r4, r0
   b862c:	f7fb fd35 	bl	b409a <_ZdlPvj>
   b8630:	4620      	mov	r0, r4
   b8632:	bd10      	pop	{r4, pc}

000b8634 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8634:	b538      	push	{r3, r4, r5, lr}
   b8636:	4604      	mov	r4, r0
   b8638:	4615      	mov	r5, r2
   b863a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b863e:	2200      	movs	r2, #0
   b8640:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8644:	4b09      	ldr	r3, [pc, #36]	; (b866c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8646:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8648:	4608      	mov	r0, r1
   b864a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b864c:	4629      	mov	r1, r5
   b864e:	f7fd f9b1 	bl	b59b4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8652:	30bf      	adds	r0, #191	; 0xbf
   b8654:	d108      	bne.n	b8668 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8656:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8658:	07db      	lsls	r3, r3, #31
   b865a:	d505      	bpl.n	b8668 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b865c:	6868      	ldr	r0, [r5, #4]
   b865e:	f7fd faed 	bl	b5c3c <free>
    free(conf.tx_buffer);
   b8662:	68e8      	ldr	r0, [r5, #12]
   b8664:	f7fd faea 	bl	b5c3c <free>
}
   b8668:	4620      	mov	r0, r4
   b866a:	bd38      	pop	{r3, r4, r5, pc}
   b866c:	000b9dd4 	.word	0x000b9dd4

000b8670 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8670:	2300      	movs	r3, #0
   b8672:	7c00      	ldrb	r0, [r0, #16]
   b8674:	461a      	mov	r2, r3
   b8676:	4619      	mov	r1, r3
   b8678:	f7fd b954 	b.w	b5924 <hal_i2c_begin>

000b867c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b867c:	7c00      	ldrb	r0, [r0, #16]
   b867e:	2200      	movs	r2, #0
   b8680:	f7fd b958 	b.w	b5934 <hal_i2c_begin_transmission>

000b8684 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8684:	b2c9      	uxtb	r1, r1
   b8686:	f7ff bff9 	b.w	b867c <_ZN7TwoWire17beginTransmissionEh>

000b868a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b868a:	7c00      	ldrb	r0, [r0, #16]
   b868c:	2200      	movs	r2, #0
   b868e:	f7fd b959 	b.w	b5944 <hal_i2c_end_transmission>

000b8692 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8692:	2101      	movs	r1, #1
   b8694:	f7ff bff9 	b.w	b868a <_ZN7TwoWire15endTransmissionEh>

000b8698 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8698:	2200      	movs	r2, #0
   b869a:	6840      	ldr	r0, [r0, #4]
   b869c:	4611      	mov	r1, r2
   b869e:	f7fd ba6d 	b.w	b5b7c <network_ready>

000b86a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b86a2:	2200      	movs	r2, #0
   b86a4:	6840      	ldr	r0, [r0, #4]
   b86a6:	4611      	mov	r1, r2
   b86a8:	f7fd ba88 	b.w	b5bbc <network_listening>

000b86ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b86ac:	2200      	movs	r2, #0
   b86ae:	6840      	ldr	r0, [r0, #4]
   b86b0:	4611      	mov	r1, r2
   b86b2:	f7fd ba93 	b.w	b5bdc <network_get_listen_timeout>

000b86b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b86b6:	6840      	ldr	r0, [r0, #4]
   b86b8:	2200      	movs	r2, #0
   b86ba:	f7fd ba87 	b.w	b5bcc <network_set_listen_timeout>

000b86be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b86be:	6840      	ldr	r0, [r0, #4]
   b86c0:	2200      	movs	r2, #0
   b86c2:	f081 0101 	eor.w	r1, r1, #1
   b86c6:	f7fd ba71 	b.w	b5bac <network_listen>

000b86ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b86ca:	2300      	movs	r3, #0
   b86cc:	6840      	ldr	r0, [r0, #4]
   b86ce:	461a      	mov	r2, r3
   b86d0:	4619      	mov	r1, r3
   b86d2:	f7fd ba63 	b.w	b5b9c <network_off>

000b86d6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b86d6:	2300      	movs	r3, #0
   b86d8:	6840      	ldr	r0, [r0, #4]
   b86da:	461a      	mov	r2, r3
   b86dc:	4619      	mov	r1, r3
   b86de:	f7fd ba55 	b.w	b5b8c <network_on>

000b86e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b86e2:	2200      	movs	r2, #0
   b86e4:	6840      	ldr	r0, [r0, #4]
   b86e6:	4611      	mov	r1, r2
   b86e8:	f7fd ba38 	b.w	b5b5c <network_connecting>

000b86ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b86ec:	6840      	ldr	r0, [r0, #4]
   b86ee:	2200      	movs	r2, #0
   b86f0:	2102      	movs	r1, #2
   b86f2:	f7fd ba3b 	b.w	b5b6c <network_disconnect>

000b86f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b86f6:	2300      	movs	r3, #0
   b86f8:	6840      	ldr	r0, [r0, #4]
   b86fa:	461a      	mov	r2, r3
   b86fc:	f7fd ba26 	b.w	b5b4c <network_connect>

000b8700 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8700:	4b02      	ldr	r3, [pc, #8]	; (b870c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8702:	2204      	movs	r2, #4
   b8704:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8706:	4a02      	ldr	r2, [pc, #8]	; (b8710 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8708:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b870a:	4770      	bx	lr
   b870c:	2003e718 	.word	0x2003e718
   b8710:	000b9dfc 	.word	0x000b9dfc

000b8714 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8714:	2300      	movs	r3, #0
   b8716:	6840      	ldr	r0, [r0, #4]
   b8718:	461a      	mov	r2, r3
   b871a:	f7fd ba17 	b.w	b5b4c <network_connect>

000b871e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b871e:	6840      	ldr	r0, [r0, #4]
   b8720:	2200      	movs	r2, #0
   b8722:	2102      	movs	r1, #2
   b8724:	f7fd ba22 	b.w	b5b6c <network_disconnect>

000b8728 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8728:	2200      	movs	r2, #0
   b872a:	6840      	ldr	r0, [r0, #4]
   b872c:	4611      	mov	r1, r2
   b872e:	f7fd ba15 	b.w	b5b5c <network_connecting>

000b8732 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8732:	2200      	movs	r2, #0
   b8734:	6840      	ldr	r0, [r0, #4]
   b8736:	4611      	mov	r1, r2
   b8738:	f7fd ba20 	b.w	b5b7c <network_ready>

000b873c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b873c:	2300      	movs	r3, #0
   b873e:	6840      	ldr	r0, [r0, #4]
   b8740:	461a      	mov	r2, r3
   b8742:	4619      	mov	r1, r3
   b8744:	f7fd ba22 	b.w	b5b8c <network_on>

000b8748 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8748:	2300      	movs	r3, #0
   b874a:	6840      	ldr	r0, [r0, #4]
   b874c:	461a      	mov	r2, r3
   b874e:	4619      	mov	r1, r3
   b8750:	f7fd ba24 	b.w	b5b9c <network_off>

000b8754 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8754:	6840      	ldr	r0, [r0, #4]
   b8756:	2100      	movs	r1, #0
   b8758:	f7fd ba48 	b.w	b5bec <network_is_on>

000b875c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b875c:	6840      	ldr	r0, [r0, #4]
   b875e:	2100      	movs	r1, #0
   b8760:	f7fd ba4c 	b.w	b5bfc <network_is_off>

000b8764 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8764:	6840      	ldr	r0, [r0, #4]
   b8766:	2200      	movs	r2, #0
   b8768:	f081 0101 	eor.w	r1, r1, #1
   b876c:	f7fd ba1e 	b.w	b5bac <network_listen>

000b8770 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8770:	6840      	ldr	r0, [r0, #4]
   b8772:	2200      	movs	r2, #0
   b8774:	f7fd ba2a 	b.w	b5bcc <network_set_listen_timeout>

000b8778 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8778:	2200      	movs	r2, #0
   b877a:	6840      	ldr	r0, [r0, #4]
   b877c:	4611      	mov	r1, r2
   b877e:	f7fd ba2d 	b.w	b5bdc <network_get_listen_timeout>

000b8782 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8782:	2200      	movs	r2, #0
   b8784:	6840      	ldr	r0, [r0, #4]
   b8786:	4611      	mov	r1, r2
   b8788:	f7fd ba18 	b.w	b5bbc <network_listening>

000b878c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b878c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8790:	b095      	sub	sp, #84	; 0x54
   b8792:	4614      	mov	r4, r2
   b8794:	460d      	mov	r5, r1
   b8796:	4607      	mov	r7, r0
    IPAddress addr;
   b8798:	f7ff fe08 	bl	b83ac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b879c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b879e:	221c      	movs	r2, #28
   b87a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b87a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b87a4:	f000 facc 	bl	b8d40 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b87a8:	2340      	movs	r3, #64	; 0x40
   b87aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b87ac:	4620      	mov	r0, r4
   b87ae:	466b      	mov	r3, sp
   b87b0:	aa0c      	add	r2, sp, #48	; 0x30
   b87b2:	2100      	movs	r1, #0
   b87b4:	f7fc ff94 	bl	b56e0 <netdb_getaddrinfo>
    if (!r) {
   b87b8:	4604      	mov	r4, r0
   b87ba:	2800      	cmp	r0, #0
   b87bc:	d14b      	bne.n	b8856 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b87be:	4602      	mov	r2, r0
   b87c0:	2101      	movs	r1, #1
   b87c2:	6868      	ldr	r0, [r5, #4]
   b87c4:	f7fd f9da 	bl	b5b7c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b87ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87cc:	4622      	mov	r2, r4
   b87ce:	6868      	ldr	r0, [r5, #4]
   b87d0:	f7fd f9d4 	bl	b5b7c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87d6:	4681      	mov	r9, r0
        bool ok = false;
   b87d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87da:	2e00      	cmp	r6, #0
   b87dc:	d03b      	beq.n	b8856 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b87de:	2900      	cmp	r1, #0
   b87e0:	d139      	bne.n	b8856 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b87e2:	6873      	ldr	r3, [r6, #4]
   b87e4:	2b02      	cmp	r3, #2
   b87e6:	d003      	beq.n	b87f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b87e8:	2b0a      	cmp	r3, #10
   b87ea:	d011      	beq.n	b8810 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87ec:	69f6      	ldr	r6, [r6, #28]
   b87ee:	e7f4      	b.n	b87da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b87f0:	f1b8 0f00 	cmp.w	r8, #0
   b87f4:	d0fa      	beq.n	b87ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b87f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b87f8:	a806      	add	r0, sp, #24
   b87fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b87fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b87fe:	f7ff fe03 	bl	b8408 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8804:	1d3c      	adds	r4, r7, #4
   b8806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8808:	682b      	ldr	r3, [r5, #0]
   b880a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b880c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b880e:	e7ed      	b.n	b87ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8810:	f1b9 0f00 	cmp.w	r9, #0
   b8814:	d0ea      	beq.n	b87ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8816:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8818:	2210      	movs	r2, #16
   b881a:	a801      	add	r0, sp, #4
   b881c:	f000 fa90 	bl	b8d40 <memset>
                    a.v = 6;
   b8820:	2306      	movs	r3, #6
   b8822:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8826:	ad01      	add	r5, sp, #4
   b8828:	f104 0308 	add.w	r3, r4, #8
   b882c:	3418      	adds	r4, #24
   b882e:	6818      	ldr	r0, [r3, #0]
   b8830:	6859      	ldr	r1, [r3, #4]
   b8832:	462a      	mov	r2, r5
   b8834:	c203      	stmia	r2!, {r0, r1}
   b8836:	3308      	adds	r3, #8
   b8838:	42a3      	cmp	r3, r4
   b883a:	4615      	mov	r5, r2
   b883c:	d1f7      	bne.n	b882e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b883e:	a901      	add	r1, sp, #4
   b8840:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8842:	ad07      	add	r5, sp, #28
   b8844:	f7ff fdc0 	bl	b83c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b884a:	1d3c      	adds	r4, r7, #4
   b884c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b884e:	682b      	ldr	r3, [r5, #0]
   b8850:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8852:	4649      	mov	r1, r9
   b8854:	e7ca      	b.n	b87ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8856:	9800      	ldr	r0, [sp, #0]
   b8858:	f7fc ff3a 	bl	b56d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b885c:	4638      	mov	r0, r7
   b885e:	b015      	add	sp, #84	; 0x54
   b8860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8864 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8864:	4b02      	ldr	r3, [pc, #8]	; (b8870 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8866:	4a03      	ldr	r2, [pc, #12]	; (b8874 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8868:	601a      	str	r2, [r3, #0]
   b886a:	2200      	movs	r2, #0
   b886c:	605a      	str	r2, [r3, #4]

} // spark
   b886e:	4770      	bx	lr
   b8870:	2003e720 	.word	0x2003e720
   b8874:	000b9e38 	.word	0x000b9e38

000b8878 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8878:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b887a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b887c:	d902      	bls.n	b8884 <pinAvailable+0xc>
    return false;
   b887e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8880:	b002      	add	sp, #8
   b8882:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8884:	f1a0 030b 	sub.w	r3, r0, #11
   b8888:	2b02      	cmp	r3, #2
   b888a:	d81a      	bhi.n	b88c2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b888c:	4c17      	ldr	r4, [pc, #92]	; (b88ec <pinAvailable+0x74>)
   b888e:	7821      	ldrb	r1, [r4, #0]
   b8890:	f3bf 8f5b 	dmb	ish
   b8894:	f011 0101 	ands.w	r1, r1, #1
   b8898:	d10b      	bne.n	b88b2 <pinAvailable+0x3a>
   b889a:	4620      	mov	r0, r4
   b889c:	9101      	str	r1, [sp, #4]
   b889e:	f7fb fc0b 	bl	b40b8 <__cxa_guard_acquire>
   b88a2:	9901      	ldr	r1, [sp, #4]
   b88a4:	b128      	cbz	r0, b88b2 <pinAvailable+0x3a>
   b88a6:	4812      	ldr	r0, [pc, #72]	; (b88f0 <pinAvailable+0x78>)
   b88a8:	f7fd fa44 	bl	b5d34 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b88ac:	4620      	mov	r0, r4
   b88ae:	f7fb fc08 	bl	b40c2 <__cxa_guard_release>
   b88b2:	4b0f      	ldr	r3, [pc, #60]	; (b88f0 <pinAvailable+0x78>)
   b88b4:	7818      	ldrb	r0, [r3, #0]
   b88b6:	f7fd f8b5 	bl	b5a24 <hal_spi_is_enabled>
   b88ba:	2800      	cmp	r0, #0
   b88bc:	d1df      	bne.n	b887e <pinAvailable+0x6>
  return true; // 'pin' is available
   b88be:	2001      	movs	r0, #1
   b88c0:	e7de      	b.n	b8880 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b88c2:	2801      	cmp	r0, #1
   b88c4:	d809      	bhi.n	b88da <pinAvailable+0x62>
   b88c6:	f000 f8bd 	bl	b8a44 <_Z19__fetch_global_Wirev>
   b88ca:	2100      	movs	r1, #0
   b88cc:	7c00      	ldrb	r0, [r0, #16]
   b88ce:	f7fd f869 	bl	b59a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b88d2:	f080 0001 	eor.w	r0, r0, #1
   b88d6:	b2c0      	uxtb	r0, r0
   b88d8:	e7d2      	b.n	b8880 <pinAvailable+0x8>
   b88da:	3809      	subs	r0, #9
   b88dc:	2801      	cmp	r0, #1
   b88de:	d8ee      	bhi.n	b88be <pinAvailable+0x46>
   b88e0:	f000 f870 	bl	b89c4 <_Z22__fetch_global_Serial1v>
   b88e4:	7c00      	ldrb	r0, [r0, #16]
   b88e6:	f7fd f805 	bl	b58f4 <hal_usart_is_enabled>
   b88ea:	e7f2      	b.n	b88d2 <pinAvailable+0x5a>
   b88ec:	2003e6ac 	.word	0x2003e6ac
   b88f0:	2003e6b0 	.word	0x2003e6b0

000b88f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88f4:	2823      	cmp	r0, #35	; 0x23
{
   b88f6:	b538      	push	{r3, r4, r5, lr}
   b88f8:	4604      	mov	r4, r0
   b88fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88fc:	d80a      	bhi.n	b8914 <pinMode+0x20>
   b88fe:	29ff      	cmp	r1, #255	; 0xff
   b8900:	d008      	beq.n	b8914 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8902:	f7ff ffb9 	bl	b8878 <pinAvailable>
   b8906:	b128      	cbz	r0, b8914 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8908:	4629      	mov	r1, r5
   b890a:	4620      	mov	r0, r4
}
   b890c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8910:	f7fc bef6 	b.w	b5700 <HAL_Pin_Mode>
}
   b8914:	bd38      	pop	{r3, r4, r5, pc}

000b8916 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b8916:	b538      	push	{r3, r4, r5, lr}
   b8918:	4604      	mov	r4, r0
   b891a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b891c:	f7fc fef8 	bl	b5710 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8920:	28ff      	cmp	r0, #255	; 0xff
   b8922:	d010      	beq.n	b8946 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8924:	2806      	cmp	r0, #6
   b8926:	d804      	bhi.n	b8932 <digitalWrite+0x1c>
   b8928:	234d      	movs	r3, #77	; 0x4d
   b892a:	fa23 f000 	lsr.w	r0, r3, r0
   b892e:	07c3      	lsls	r3, r0, #31
   b8930:	d409      	bmi.n	b8946 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8932:	4620      	mov	r0, r4
   b8934:	f7ff ffa0 	bl	b8878 <pinAvailable>
   b8938:	b128      	cbz	r0, b8946 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b893a:	4629      	mov	r1, r5
   b893c:	4620      	mov	r0, r4
}
   b893e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8942:	f7fc beed 	b.w	b5720 <HAL_GPIO_Write>
}
   b8946:	bd38      	pop	{r3, r4, r5, pc}

000b8948 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b8948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b894c:	4690      	mov	r8, r2
   b894e:	461f      	mov	r7, r3
   b8950:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b8952:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b8954:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b8956:	f1c4 0107 	rsb	r1, r4, #7
   b895a:	f1b8 0f00 	cmp.w	r8, #0
   b895e:	d112      	bne.n	b8986 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b8960:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b8964:	f001 0101 	and.w	r1, r1, #1
   b8968:	4630      	mov	r0, r6
   b896a:	f7ff ffd4 	bl	b8916 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b896e:	2101      	movs	r1, #1
   b8970:	4628      	mov	r0, r5
   b8972:	f7ff ffd0 	bl	b8916 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b8976:	2100      	movs	r1, #0
   b8978:	4628      	mov	r0, r5
   b897a:	f7ff ffcc 	bl	b8916 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b897e:	3c01      	subs	r4, #1
   b8980:	d2e9      	bcs.n	b8956 <shiftOut+0xe>
  }
}
   b8982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b8986:	fa47 f104 	asr.w	r1, r7, r4
   b898a:	e7eb      	b.n	b8964 <shiftOut+0x1c>

000b898c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b898c:	4770      	bx	lr
	...

000b8990 <_Z20acquireSerial1Bufferv>:
{
   b8990:	b538      	push	{r3, r4, r5, lr}
   b8992:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8994:	2514      	movs	r5, #20
   b8996:	462a      	mov	r2, r5
   b8998:	2100      	movs	r1, #0
   b899a:	f000 f9d1 	bl	b8d40 <memset>
   b899e:	8025      	strh	r5, [r4, #0]
   b89a0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89a2:	4907      	ldr	r1, [pc, #28]	; (b89c0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b89a4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89a6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b89a8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89aa:	f000 f86f 	bl	b8a8c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89ae:	4904      	ldr	r1, [pc, #16]	; (b89c0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b89b0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89b2:	4628      	mov	r0, r5
   b89b4:	f000 f86a 	bl	b8a8c <_ZnajRKSt9nothrow_t>
    };
   b89b8:	60e0      	str	r0, [r4, #12]
}
   b89ba:	4620      	mov	r0, r4
   b89bc:	bd38      	pop	{r3, r4, r5, pc}
   b89be:	bf00      	nop
   b89c0:	000b9e6c 	.word	0x000b9e6c

000b89c4 <_Z22__fetch_global_Serial1v>:
{
   b89c4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89c6:	4d0e      	ldr	r5, [pc, #56]	; (b8a00 <_Z22__fetch_global_Serial1v+0x3c>)
   b89c8:	7829      	ldrb	r1, [r5, #0]
   b89ca:	f3bf 8f5b 	dmb	ish
   b89ce:	f011 0401 	ands.w	r4, r1, #1
{
   b89d2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89d4:	d111      	bne.n	b89fa <_Z22__fetch_global_Serial1v+0x36>
   b89d6:	4628      	mov	r0, r5
   b89d8:	f7fb fb6e 	bl	b40b8 <__cxa_guard_acquire>
   b89dc:	b168      	cbz	r0, b89fa <_Z22__fetch_global_Serial1v+0x36>
   b89de:	a801      	add	r0, sp, #4
   b89e0:	f7ff ffd6 	bl	b8990 <_Z20acquireSerial1Bufferv>
   b89e4:	aa01      	add	r2, sp, #4
   b89e6:	4621      	mov	r1, r4
   b89e8:	4806      	ldr	r0, [pc, #24]	; (b8a04 <_Z22__fetch_global_Serial1v+0x40>)
   b89ea:	f7ff fde3 	bl	b85b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b89ee:	4628      	mov	r0, r5
   b89f0:	f7fb fb67 	bl	b40c2 <__cxa_guard_release>
   b89f4:	4804      	ldr	r0, [pc, #16]	; (b8a08 <_Z22__fetch_global_Serial1v+0x44>)
   b89f6:	f000 f961 	bl	b8cbc <atexit>
    return serial1;
}
   b89fa:	4802      	ldr	r0, [pc, #8]	; (b8a04 <_Z22__fetch_global_Serial1v+0x40>)
   b89fc:	b007      	add	sp, #28
   b89fe:	bd30      	pop	{r4, r5, pc}
   b8a00:	2003e728 	.word	0x2003e728
   b8a04:	2003e72c 	.word	0x2003e72c
   b8a08:	000b898d 	.word	0x000b898d

000b8a0c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8a0c:	4770      	bx	lr
	...

000b8a10 <_Z17acquireWireBufferv>:
{
   b8a10:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8a12:	4b0a      	ldr	r3, [pc, #40]	; (b8a3c <_Z17acquireWireBufferv+0x2c>)
   b8a14:	6003      	str	r3, [r0, #0]
   b8a16:	2301      	movs	r3, #1
{
   b8a18:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8a1a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8a1c:	4908      	ldr	r1, [pc, #32]	; (b8a40 <_Z17acquireWireBufferv+0x30>)
   b8a1e:	2020      	movs	r0, #32
   b8a20:	f000 f834 	bl	b8a8c <_ZnajRKSt9nothrow_t>
	};
   b8a24:	2520      	movs	r5, #32
   b8a26:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8a28:	4905      	ldr	r1, [pc, #20]	; (b8a40 <_Z17acquireWireBufferv+0x30>)
	};
   b8a2a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8a2c:	4628      	mov	r0, r5
   b8a2e:	f000 f82d 	bl	b8a8c <_ZnajRKSt9nothrow_t>
	};
   b8a32:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8a36:	4620      	mov	r0, r4
   b8a38:	bd38      	pop	{r3, r4, r5, pc}
   b8a3a:	bf00      	nop
   b8a3c:	00010018 	.word	0x00010018
   b8a40:	000b9e6c 	.word	0x000b9e6c

000b8a44 <_Z19__fetch_global_Wirev>:
{
   b8a44:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8a46:	4d0e      	ldr	r5, [pc, #56]	; (b8a80 <_Z19__fetch_global_Wirev+0x3c>)
   b8a48:	7829      	ldrb	r1, [r5, #0]
   b8a4a:	f3bf 8f5b 	dmb	ish
   b8a4e:	f011 0401 	ands.w	r4, r1, #1
{
   b8a52:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8a54:	d111      	bne.n	b8a7a <_Z19__fetch_global_Wirev+0x36>
   b8a56:	4628      	mov	r0, r5
   b8a58:	f7fb fb2e 	bl	b40b8 <__cxa_guard_acquire>
   b8a5c:	b168      	cbz	r0, b8a7a <_Z19__fetch_global_Wirev+0x36>
   b8a5e:	4668      	mov	r0, sp
   b8a60:	f7ff ffd6 	bl	b8a10 <_Z17acquireWireBufferv>
   b8a64:	466a      	mov	r2, sp
   b8a66:	4621      	mov	r1, r4
   b8a68:	4806      	ldr	r0, [pc, #24]	; (b8a84 <_Z19__fetch_global_Wirev+0x40>)
   b8a6a:	f7ff fde3 	bl	b8634 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8a6e:	4628      	mov	r0, r5
   b8a70:	f7fb fb27 	bl	b40c2 <__cxa_guard_release>
   b8a74:	4804      	ldr	r0, [pc, #16]	; (b8a88 <_Z19__fetch_global_Wirev+0x44>)
   b8a76:	f000 f921 	bl	b8cbc <atexit>
	return wire;
}
   b8a7a:	4802      	ldr	r0, [pc, #8]	; (b8a84 <_Z19__fetch_global_Wirev+0x40>)
   b8a7c:	b007      	add	sp, #28
   b8a7e:	bd30      	pop	{r4, r5, pc}
   b8a80:	2003e744 	.word	0x2003e744
   b8a84:	2003e748 	.word	0x2003e748
   b8a88:	000b8a0d 	.word	0x000b8a0d

000b8a8c <_ZnajRKSt9nothrow_t>:
   b8a8c:	f7fb bb03 	b.w	b4096 <_Znaj>

000b8a90 <_ZSt25__throw_bad_function_callv>:
   b8a90:	b508      	push	{r3, lr}
   b8a92:	f7fd f8eb 	bl	b5c6c <abort>
	...

000b8a98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8a98:	4901      	ldr	r1, [pc, #4]	; (b8aa0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8a9a:	f000 b8f9 	b.w	b8c90 <_ZNKSt9type_infoeqERKS_>
   b8a9e:	bf00      	nop
   b8aa0:	000b9e88 	.word	0x000b9e88

000b8aa4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8aa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8aa6:	2400      	movs	r4, #0
   b8aa8:	2310      	movs	r3, #16
   b8aaa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8aae:	6803      	ldr	r3, [r0, #0]
   b8ab0:	4615      	mov	r5, r2
   b8ab2:	699e      	ldr	r6, [r3, #24]
   b8ab4:	6812      	ldr	r2, [r2, #0]
   b8ab6:	466b      	mov	r3, sp
   b8ab8:	e9cd 4400 	strd	r4, r4, [sp]
   b8abc:	47b0      	blx	r6
   b8abe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8ac2:	f003 0306 	and.w	r3, r3, #6
   b8ac6:	2b06      	cmp	r3, #6
   b8ac8:	bf03      	ittte	eq
   b8aca:	9b00      	ldreq	r3, [sp, #0]
   b8acc:	602b      	streq	r3, [r5, #0]
   b8ace:	2001      	moveq	r0, #1
   b8ad0:	4620      	movne	r0, r4
   b8ad2:	b004      	add	sp, #16
   b8ad4:	bd70      	pop	{r4, r5, r6, pc}

000b8ad6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8ad6:	9800      	ldr	r0, [sp, #0]
   b8ad8:	4290      	cmp	r0, r2
   b8ada:	bf14      	ite	ne
   b8adc:	2001      	movne	r0, #1
   b8ade:	2006      	moveq	r0, #6
   b8ae0:	4770      	bx	lr
	...

000b8ae4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8ae4:	b510      	push	{r4, lr}
   b8ae6:	4b03      	ldr	r3, [pc, #12]	; (b8af4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8ae8:	6003      	str	r3, [r0, #0]
   b8aea:	4604      	mov	r4, r0
   b8aec:	f000 f8cd 	bl	b8c8a <_ZNSt9type_infoD1Ev>
   b8af0:	4620      	mov	r0, r4
   b8af2:	bd10      	pop	{r4, pc}
   b8af4:	000b9ec8 	.word	0x000b9ec8

000b8af8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8af8:	b510      	push	{r4, lr}
   b8afa:	4604      	mov	r4, r0
   b8afc:	f7ff fff2 	bl	b8ae4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8b00:	4620      	mov	r0, r4
   b8b02:	2108      	movs	r1, #8
   b8b04:	f7fb fac9 	bl	b409a <_ZdlPvj>
   b8b08:	4620      	mov	r0, r4
   b8b0a:	bd10      	pop	{r4, pc}

000b8b0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8b10:	461f      	mov	r7, r3
   b8b12:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8b16:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8b1a:	4598      	cmp	r8, r3
   b8b1c:	4606      	mov	r6, r0
   b8b1e:	4615      	mov	r5, r2
   b8b20:	d107      	bne.n	b8b32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8b22:	9907      	ldr	r1, [sp, #28]
   b8b24:	f000 f8b4 	bl	b8c90 <_ZNKSt9type_infoeqERKS_>
   b8b28:	b118      	cbz	r0, b8b32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8b2a:	7165      	strb	r5, [r4, #5]
   b8b2c:	2000      	movs	r0, #0
   b8b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8b32:	4639      	mov	r1, r7
   b8b34:	4630      	mov	r0, r6
   b8b36:	f000 f8ab 	bl	b8c90 <_ZNKSt9type_infoeqERKS_>
   b8b3a:	2800      	cmp	r0, #0
   b8b3c:	d0f6      	beq.n	b8b2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8b3e:	2301      	movs	r3, #1
   b8b40:	f8c4 8000 	str.w	r8, [r4]
   b8b44:	7125      	strb	r5, [r4, #4]
   b8b46:	71a3      	strb	r3, [r4, #6]
   b8b48:	e7f0      	b.n	b8b2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8b4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8b4a:	b538      	push	{r3, r4, r5, lr}
   b8b4c:	4615      	mov	r5, r2
   b8b4e:	461c      	mov	r4, r3
   b8b50:	f000 f89e 	bl	b8c90 <_ZNKSt9type_infoeqERKS_>
   b8b54:	b120      	cbz	r0, b8b60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8b56:	2308      	movs	r3, #8
   b8b58:	60e3      	str	r3, [r4, #12]
   b8b5a:	2306      	movs	r3, #6
   b8b5c:	6025      	str	r5, [r4, #0]
   b8b5e:	7123      	strb	r3, [r4, #4]
   b8b60:	bd38      	pop	{r3, r4, r5, pc}

000b8b62 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8b64:	4605      	mov	r5, r0
   b8b66:	460c      	mov	r4, r1
   b8b68:	9201      	str	r2, [sp, #4]
   b8b6a:	461e      	mov	r6, r3
   b8b6c:	f000 f890 	bl	b8c90 <_ZNKSt9type_infoeqERKS_>
   b8b70:	b950      	cbnz	r0, b8b88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8b72:	2e03      	cmp	r6, #3
   b8b74:	d808      	bhi.n	b8b88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8b76:	6823      	ldr	r3, [r4, #0]
   b8b78:	9a01      	ldr	r2, [sp, #4]
   b8b7a:	695b      	ldr	r3, [r3, #20]
   b8b7c:	4629      	mov	r1, r5
   b8b7e:	4620      	mov	r0, r4
   b8b80:	b002      	add	sp, #8
   b8b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8b86:	4718      	bx	r3
   b8b88:	b002      	add	sp, #8
   b8b8a:	bd70      	pop	{r4, r5, r6, pc}

000b8b8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8b8c:	b510      	push	{r4, lr}
   b8b8e:	4b03      	ldr	r3, [pc, #12]	; (b8b9c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8b90:	6003      	str	r3, [r0, #0]
   b8b92:	4604      	mov	r4, r0
   b8b94:	f7ff ffa6 	bl	b8ae4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8b98:	4620      	mov	r0, r4
   b8b9a:	bd10      	pop	{r4, pc}
   b8b9c:	000b9f28 	.word	0x000b9f28

000b8ba0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8ba0:	b510      	push	{r4, lr}
   b8ba2:	4604      	mov	r4, r0
   b8ba4:	f7ff fff2 	bl	b8b8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8ba8:	4620      	mov	r0, r4
   b8baa:	210c      	movs	r1, #12
   b8bac:	f7fb fa75 	bl	b409a <_ZdlPvj>
   b8bb0:	4620      	mov	r0, r4
   b8bb2:	bd10      	pop	{r4, pc}

000b8bb4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8bb6:	9f08      	ldr	r7, [sp, #32]
   b8bb8:	4297      	cmp	r7, r2
   b8bba:	4605      	mov	r5, r0
   b8bbc:	460e      	mov	r6, r1
   b8bbe:	4614      	mov	r4, r2
   b8bc0:	d00a      	beq.n	b8bd8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8bc2:	68a8      	ldr	r0, [r5, #8]
   b8bc4:	6802      	ldr	r2, [r0, #0]
   b8bc6:	9708      	str	r7, [sp, #32]
   b8bc8:	6a15      	ldr	r5, [r2, #32]
   b8bca:	4631      	mov	r1, r6
   b8bcc:	4622      	mov	r2, r4
   b8bce:	46ac      	mov	ip, r5
   b8bd0:	b003      	add	sp, #12
   b8bd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8bd6:	4760      	bx	ip
   b8bd8:	4619      	mov	r1, r3
   b8bda:	9301      	str	r3, [sp, #4]
   b8bdc:	f000 f858 	bl	b8c90 <_ZNKSt9type_infoeqERKS_>
   b8be0:	9b01      	ldr	r3, [sp, #4]
   b8be2:	2800      	cmp	r0, #0
   b8be4:	d0ed      	beq.n	b8bc2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8be6:	2006      	movs	r0, #6
   b8be8:	b003      	add	sp, #12
   b8bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8bec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8bec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8bf0:	460d      	mov	r5, r1
   b8bf2:	4619      	mov	r1, r3
   b8bf4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8bf8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8bfc:	4681      	mov	r9, r0
   b8bfe:	4617      	mov	r7, r2
   b8c00:	4698      	mov	r8, r3
   b8c02:	f000 f845 	bl	b8c90 <_ZNKSt9type_infoeqERKS_>
   b8c06:	b190      	cbz	r0, b8c2e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8c08:	2d00      	cmp	r5, #0
   b8c0a:	6034      	str	r4, [r6, #0]
   b8c0c:	7137      	strb	r7, [r6, #4]
   b8c0e:	db09      	blt.n	b8c24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8c10:	1961      	adds	r1, r4, r5
   b8c12:	458a      	cmp	sl, r1
   b8c14:	bf0c      	ite	eq
   b8c16:	2106      	moveq	r1, #6
   b8c18:	2101      	movne	r1, #1
   b8c1a:	71b1      	strb	r1, [r6, #6]
   b8c1c:	2000      	movs	r0, #0
   b8c1e:	b001      	add	sp, #4
   b8c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8c24:	3502      	adds	r5, #2
   b8c26:	d1f9      	bne.n	b8c1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8c28:	2301      	movs	r3, #1
   b8c2a:	71b3      	strb	r3, [r6, #6]
   b8c2c:	e7f6      	b.n	b8c1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8c2e:	4554      	cmp	r4, sl
   b8c30:	d106      	bne.n	b8c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8c32:	4659      	mov	r1, fp
   b8c34:	4648      	mov	r0, r9
   b8c36:	f000 f82b 	bl	b8c90 <_ZNKSt9type_infoeqERKS_>
   b8c3a:	b108      	cbz	r0, b8c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8c3c:	7177      	strb	r7, [r6, #5]
   b8c3e:	e7ed      	b.n	b8c1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8c40:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8c44:	6803      	ldr	r3, [r0, #0]
   b8c46:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8c4a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8c4e:	69dc      	ldr	r4, [r3, #28]
   b8c50:	463a      	mov	r2, r7
   b8c52:	4643      	mov	r3, r8
   b8c54:	4629      	mov	r1, r5
   b8c56:	46a4      	mov	ip, r4
   b8c58:	b001      	add	sp, #4
   b8c5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c5e:	4760      	bx	ip

000b8c60 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c64:	4607      	mov	r7, r0
   b8c66:	460c      	mov	r4, r1
   b8c68:	4615      	mov	r5, r2
   b8c6a:	461e      	mov	r6, r3
   b8c6c:	f7ff ff6d 	bl	b8b4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8c70:	b948      	cbnz	r0, b8c86 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8c72:	68b8      	ldr	r0, [r7, #8]
   b8c74:	6803      	ldr	r3, [r0, #0]
   b8c76:	699f      	ldr	r7, [r3, #24]
   b8c78:	462a      	mov	r2, r5
   b8c7a:	4633      	mov	r3, r6
   b8c7c:	4621      	mov	r1, r4
   b8c7e:	46bc      	mov	ip, r7
   b8c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8c84:	4760      	bx	ip
   b8c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8c8a <_ZNSt9type_infoD1Ev>:
   b8c8a:	4770      	bx	lr

000b8c8c <_ZNKSt9type_info14__is_pointer_pEv>:
   b8c8c:	2000      	movs	r0, #0
   b8c8e:	4770      	bx	lr

000b8c90 <_ZNKSt9type_infoeqERKS_>:
   b8c90:	4281      	cmp	r1, r0
   b8c92:	b508      	push	{r3, lr}
   b8c94:	d00e      	beq.n	b8cb4 <_ZNKSt9type_infoeqERKS_+0x24>
   b8c96:	6840      	ldr	r0, [r0, #4]
   b8c98:	7803      	ldrb	r3, [r0, #0]
   b8c9a:	2b2a      	cmp	r3, #42	; 0x2a
   b8c9c:	d00c      	beq.n	b8cb8 <_ZNKSt9type_infoeqERKS_+0x28>
   b8c9e:	6849      	ldr	r1, [r1, #4]
   b8ca0:	780b      	ldrb	r3, [r1, #0]
   b8ca2:	2b2a      	cmp	r3, #42	; 0x2a
   b8ca4:	bf08      	it	eq
   b8ca6:	3101      	addeq	r1, #1
   b8ca8:	f000 f880 	bl	b8dac <strcmp>
   b8cac:	fab0 f080 	clz	r0, r0
   b8cb0:	0940      	lsrs	r0, r0, #5
   b8cb2:	bd08      	pop	{r3, pc}
   b8cb4:	2001      	movs	r0, #1
   b8cb6:	e7fc      	b.n	b8cb2 <_ZNKSt9type_infoeqERKS_+0x22>
   b8cb8:	2000      	movs	r0, #0
   b8cba:	e7fa      	b.n	b8cb2 <_ZNKSt9type_infoeqERKS_+0x22>

000b8cbc <atexit>:
   b8cbc:	2300      	movs	r3, #0
   b8cbe:	4601      	mov	r1, r0
   b8cc0:	461a      	mov	r2, r3
   b8cc2:	4618      	mov	r0, r3
   b8cc4:	f000 b924 	b.w	b8f10 <__register_exitproc>

000b8cc8 <atoi>:
   b8cc8:	220a      	movs	r2, #10
   b8cca:	2100      	movs	r1, #0
   b8ccc:	f000 b916 	b.w	b8efc <strtol>

000b8cd0 <memcmp>:
   b8cd0:	b510      	push	{r4, lr}
   b8cd2:	3901      	subs	r1, #1
   b8cd4:	4402      	add	r2, r0
   b8cd6:	4290      	cmp	r0, r2
   b8cd8:	d101      	bne.n	b8cde <memcmp+0xe>
   b8cda:	2000      	movs	r0, #0
   b8cdc:	e005      	b.n	b8cea <memcmp+0x1a>
   b8cde:	7803      	ldrb	r3, [r0, #0]
   b8ce0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8ce4:	42a3      	cmp	r3, r4
   b8ce6:	d001      	beq.n	b8cec <memcmp+0x1c>
   b8ce8:	1b18      	subs	r0, r3, r4
   b8cea:	bd10      	pop	{r4, pc}
   b8cec:	3001      	adds	r0, #1
   b8cee:	e7f2      	b.n	b8cd6 <memcmp+0x6>

000b8cf0 <memcpy>:
   b8cf0:	440a      	add	r2, r1
   b8cf2:	4291      	cmp	r1, r2
   b8cf4:	f100 33ff 	add.w	r3, r0, #4294967295
   b8cf8:	d100      	bne.n	b8cfc <memcpy+0xc>
   b8cfa:	4770      	bx	lr
   b8cfc:	b510      	push	{r4, lr}
   b8cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8d02:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8d06:	4291      	cmp	r1, r2
   b8d08:	d1f9      	bne.n	b8cfe <memcpy+0xe>
   b8d0a:	bd10      	pop	{r4, pc}

000b8d0c <memmove>:
   b8d0c:	4288      	cmp	r0, r1
   b8d0e:	b510      	push	{r4, lr}
   b8d10:	eb01 0402 	add.w	r4, r1, r2
   b8d14:	d902      	bls.n	b8d1c <memmove+0x10>
   b8d16:	4284      	cmp	r4, r0
   b8d18:	4623      	mov	r3, r4
   b8d1a:	d807      	bhi.n	b8d2c <memmove+0x20>
   b8d1c:	1e43      	subs	r3, r0, #1
   b8d1e:	42a1      	cmp	r1, r4
   b8d20:	d008      	beq.n	b8d34 <memmove+0x28>
   b8d22:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8d26:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8d2a:	e7f8      	b.n	b8d1e <memmove+0x12>
   b8d2c:	4402      	add	r2, r0
   b8d2e:	4601      	mov	r1, r0
   b8d30:	428a      	cmp	r2, r1
   b8d32:	d100      	bne.n	b8d36 <memmove+0x2a>
   b8d34:	bd10      	pop	{r4, pc}
   b8d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8d3e:	e7f7      	b.n	b8d30 <memmove+0x24>

000b8d40 <memset>:
   b8d40:	4402      	add	r2, r0
   b8d42:	4603      	mov	r3, r0
   b8d44:	4293      	cmp	r3, r2
   b8d46:	d100      	bne.n	b8d4a <memset+0xa>
   b8d48:	4770      	bx	lr
   b8d4a:	f803 1b01 	strb.w	r1, [r3], #1
   b8d4e:	e7f9      	b.n	b8d44 <memset+0x4>

000b8d50 <srand>:
   b8d50:	b538      	push	{r3, r4, r5, lr}
   b8d52:	4b10      	ldr	r3, [pc, #64]	; (b8d94 <srand+0x44>)
   b8d54:	681d      	ldr	r5, [r3, #0]
   b8d56:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8d58:	4604      	mov	r4, r0
   b8d5a:	b9b3      	cbnz	r3, b8d8a <srand+0x3a>
   b8d5c:	2018      	movs	r0, #24
   b8d5e:	f7fc ff65 	bl	b5c2c <malloc>
   b8d62:	4602      	mov	r2, r0
   b8d64:	63a8      	str	r0, [r5, #56]	; 0x38
   b8d66:	b920      	cbnz	r0, b8d72 <srand+0x22>
   b8d68:	4b0b      	ldr	r3, [pc, #44]	; (b8d98 <srand+0x48>)
   b8d6a:	480c      	ldr	r0, [pc, #48]	; (b8d9c <srand+0x4c>)
   b8d6c:	2142      	movs	r1, #66	; 0x42
   b8d6e:	f7fc ff8d 	bl	b5c8c <__assert_func>
   b8d72:	490b      	ldr	r1, [pc, #44]	; (b8da0 <srand+0x50>)
   b8d74:	4b0b      	ldr	r3, [pc, #44]	; (b8da4 <srand+0x54>)
   b8d76:	e9c0 1300 	strd	r1, r3, [r0]
   b8d7a:	4b0b      	ldr	r3, [pc, #44]	; (b8da8 <srand+0x58>)
   b8d7c:	6083      	str	r3, [r0, #8]
   b8d7e:	230b      	movs	r3, #11
   b8d80:	8183      	strh	r3, [r0, #12]
   b8d82:	2100      	movs	r1, #0
   b8d84:	2001      	movs	r0, #1
   b8d86:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8d8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8d8c:	2200      	movs	r2, #0
   b8d8e:	611c      	str	r4, [r3, #16]
   b8d90:	615a      	str	r2, [r3, #20]
   b8d92:	bd38      	pop	{r3, r4, r5, pc}
   b8d94:	2003debc 	.word	0x2003debc
   b8d98:	000b9f61 	.word	0x000b9f61
   b8d9c:	000b9f78 	.word	0x000b9f78
   b8da0:	abcd330e 	.word	0xabcd330e
   b8da4:	e66d1234 	.word	0xe66d1234
   b8da8:	0005deec 	.word	0x0005deec

000b8dac <strcmp>:
   b8dac:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8db0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8db4:	2a01      	cmp	r2, #1
   b8db6:	bf28      	it	cs
   b8db8:	429a      	cmpcs	r2, r3
   b8dba:	d0f7      	beq.n	b8dac <strcmp>
   b8dbc:	1ad0      	subs	r0, r2, r3
   b8dbe:	4770      	bx	lr

000b8dc0 <strcpy>:
   b8dc0:	4603      	mov	r3, r0
   b8dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8dc6:	f803 2b01 	strb.w	r2, [r3], #1
   b8dca:	2a00      	cmp	r2, #0
   b8dcc:	d1f9      	bne.n	b8dc2 <strcpy+0x2>
   b8dce:	4770      	bx	lr

000b8dd0 <strlen>:
   b8dd0:	4603      	mov	r3, r0
   b8dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8dd6:	2a00      	cmp	r2, #0
   b8dd8:	d1fb      	bne.n	b8dd2 <strlen+0x2>
   b8dda:	1a18      	subs	r0, r3, r0
   b8ddc:	3801      	subs	r0, #1
   b8dde:	4770      	bx	lr

000b8de0 <strnlen>:
   b8de0:	b510      	push	{r4, lr}
   b8de2:	4602      	mov	r2, r0
   b8de4:	4401      	add	r1, r0
   b8de6:	428a      	cmp	r2, r1
   b8de8:	4613      	mov	r3, r2
   b8dea:	d003      	beq.n	b8df4 <strnlen+0x14>
   b8dec:	781c      	ldrb	r4, [r3, #0]
   b8dee:	3201      	adds	r2, #1
   b8df0:	2c00      	cmp	r4, #0
   b8df2:	d1f8      	bne.n	b8de6 <strnlen+0x6>
   b8df4:	1a18      	subs	r0, r3, r0
   b8df6:	bd10      	pop	{r4, pc}

000b8df8 <_strtol_l.constprop.0>:
   b8df8:	2b01      	cmp	r3, #1
   b8dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8dfe:	d001      	beq.n	b8e04 <_strtol_l.constprop.0+0xc>
   b8e00:	2b24      	cmp	r3, #36	; 0x24
   b8e02:	d906      	bls.n	b8e12 <_strtol_l.constprop.0+0x1a>
   b8e04:	f7fc ff3a 	bl	b5c7c <__errno>
   b8e08:	2316      	movs	r3, #22
   b8e0a:	6003      	str	r3, [r0, #0]
   b8e0c:	2000      	movs	r0, #0
   b8e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8e12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8ef8 <_strtol_l.constprop.0+0x100>
   b8e16:	460d      	mov	r5, r1
   b8e18:	462e      	mov	r6, r5
   b8e1a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8e1e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8e22:	f017 0708 	ands.w	r7, r7, #8
   b8e26:	d1f7      	bne.n	b8e18 <_strtol_l.constprop.0+0x20>
   b8e28:	2c2d      	cmp	r4, #45	; 0x2d
   b8e2a:	d132      	bne.n	b8e92 <_strtol_l.constprop.0+0x9a>
   b8e2c:	782c      	ldrb	r4, [r5, #0]
   b8e2e:	2701      	movs	r7, #1
   b8e30:	1cb5      	adds	r5, r6, #2
   b8e32:	2b00      	cmp	r3, #0
   b8e34:	d05b      	beq.n	b8eee <_strtol_l.constprop.0+0xf6>
   b8e36:	2b10      	cmp	r3, #16
   b8e38:	d109      	bne.n	b8e4e <_strtol_l.constprop.0+0x56>
   b8e3a:	2c30      	cmp	r4, #48	; 0x30
   b8e3c:	d107      	bne.n	b8e4e <_strtol_l.constprop.0+0x56>
   b8e3e:	782c      	ldrb	r4, [r5, #0]
   b8e40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8e44:	2c58      	cmp	r4, #88	; 0x58
   b8e46:	d14d      	bne.n	b8ee4 <_strtol_l.constprop.0+0xec>
   b8e48:	786c      	ldrb	r4, [r5, #1]
   b8e4a:	2310      	movs	r3, #16
   b8e4c:	3502      	adds	r5, #2
   b8e4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8e52:	f108 38ff 	add.w	r8, r8, #4294967295
   b8e56:	f04f 0c00 	mov.w	ip, #0
   b8e5a:	fbb8 f9f3 	udiv	r9, r8, r3
   b8e5e:	4666      	mov	r6, ip
   b8e60:	fb03 8a19 	mls	sl, r3, r9, r8
   b8e64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8e68:	f1be 0f09 	cmp.w	lr, #9
   b8e6c:	d816      	bhi.n	b8e9c <_strtol_l.constprop.0+0xa4>
   b8e6e:	4674      	mov	r4, lr
   b8e70:	42a3      	cmp	r3, r4
   b8e72:	dd24      	ble.n	b8ebe <_strtol_l.constprop.0+0xc6>
   b8e74:	f1bc 0f00 	cmp.w	ip, #0
   b8e78:	db1e      	blt.n	b8eb8 <_strtol_l.constprop.0+0xc0>
   b8e7a:	45b1      	cmp	r9, r6
   b8e7c:	d31c      	bcc.n	b8eb8 <_strtol_l.constprop.0+0xc0>
   b8e7e:	d101      	bne.n	b8e84 <_strtol_l.constprop.0+0x8c>
   b8e80:	45a2      	cmp	sl, r4
   b8e82:	db19      	blt.n	b8eb8 <_strtol_l.constprop.0+0xc0>
   b8e84:	fb06 4603 	mla	r6, r6, r3, r4
   b8e88:	f04f 0c01 	mov.w	ip, #1
   b8e8c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8e90:	e7e8      	b.n	b8e64 <_strtol_l.constprop.0+0x6c>
   b8e92:	2c2b      	cmp	r4, #43	; 0x2b
   b8e94:	bf04      	itt	eq
   b8e96:	782c      	ldrbeq	r4, [r5, #0]
   b8e98:	1cb5      	addeq	r5, r6, #2
   b8e9a:	e7ca      	b.n	b8e32 <_strtol_l.constprop.0+0x3a>
   b8e9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8ea0:	f1be 0f19 	cmp.w	lr, #25
   b8ea4:	d801      	bhi.n	b8eaa <_strtol_l.constprop.0+0xb2>
   b8ea6:	3c37      	subs	r4, #55	; 0x37
   b8ea8:	e7e2      	b.n	b8e70 <_strtol_l.constprop.0+0x78>
   b8eaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8eae:	f1be 0f19 	cmp.w	lr, #25
   b8eb2:	d804      	bhi.n	b8ebe <_strtol_l.constprop.0+0xc6>
   b8eb4:	3c57      	subs	r4, #87	; 0x57
   b8eb6:	e7db      	b.n	b8e70 <_strtol_l.constprop.0+0x78>
   b8eb8:	f04f 3cff 	mov.w	ip, #4294967295
   b8ebc:	e7e6      	b.n	b8e8c <_strtol_l.constprop.0+0x94>
   b8ebe:	f1bc 0f00 	cmp.w	ip, #0
   b8ec2:	da05      	bge.n	b8ed0 <_strtol_l.constprop.0+0xd8>
   b8ec4:	2322      	movs	r3, #34	; 0x22
   b8ec6:	6003      	str	r3, [r0, #0]
   b8ec8:	4646      	mov	r6, r8
   b8eca:	b942      	cbnz	r2, b8ede <_strtol_l.constprop.0+0xe6>
   b8ecc:	4630      	mov	r0, r6
   b8ece:	e79e      	b.n	b8e0e <_strtol_l.constprop.0+0x16>
   b8ed0:	b107      	cbz	r7, b8ed4 <_strtol_l.constprop.0+0xdc>
   b8ed2:	4276      	negs	r6, r6
   b8ed4:	2a00      	cmp	r2, #0
   b8ed6:	d0f9      	beq.n	b8ecc <_strtol_l.constprop.0+0xd4>
   b8ed8:	f1bc 0f00 	cmp.w	ip, #0
   b8edc:	d000      	beq.n	b8ee0 <_strtol_l.constprop.0+0xe8>
   b8ede:	1e69      	subs	r1, r5, #1
   b8ee0:	6011      	str	r1, [r2, #0]
   b8ee2:	e7f3      	b.n	b8ecc <_strtol_l.constprop.0+0xd4>
   b8ee4:	2430      	movs	r4, #48	; 0x30
   b8ee6:	2b00      	cmp	r3, #0
   b8ee8:	d1b1      	bne.n	b8e4e <_strtol_l.constprop.0+0x56>
   b8eea:	2308      	movs	r3, #8
   b8eec:	e7af      	b.n	b8e4e <_strtol_l.constprop.0+0x56>
   b8eee:	2c30      	cmp	r4, #48	; 0x30
   b8ef0:	d0a5      	beq.n	b8e3e <_strtol_l.constprop.0+0x46>
   b8ef2:	230a      	movs	r3, #10
   b8ef4:	e7ab      	b.n	b8e4e <_strtol_l.constprop.0+0x56>
   b8ef6:	bf00      	nop
   b8ef8:	000b9ff6 	.word	0x000b9ff6

000b8efc <strtol>:
   b8efc:	4613      	mov	r3, r2
   b8efe:	460a      	mov	r2, r1
   b8f00:	4601      	mov	r1, r0
   b8f02:	4802      	ldr	r0, [pc, #8]	; (b8f0c <strtol+0x10>)
   b8f04:	6800      	ldr	r0, [r0, #0]
   b8f06:	f7ff bf77 	b.w	b8df8 <_strtol_l.constprop.0>
   b8f0a:	bf00      	nop
   b8f0c:	2003debc 	.word	0x2003debc

000b8f10 <__register_exitproc>:
   b8f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f14:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8fd0 <__register_exitproc+0xc0>
   b8f18:	4606      	mov	r6, r0
   b8f1a:	f8d8 0000 	ldr.w	r0, [r8]
   b8f1e:	461f      	mov	r7, r3
   b8f20:	460d      	mov	r5, r1
   b8f22:	4691      	mov	r9, r2
   b8f24:	f000 f856 	bl	b8fd4 <__retarget_lock_acquire_recursive>
   b8f28:	4b25      	ldr	r3, [pc, #148]	; (b8fc0 <__register_exitproc+0xb0>)
   b8f2a:	681c      	ldr	r4, [r3, #0]
   b8f2c:	b934      	cbnz	r4, b8f3c <__register_exitproc+0x2c>
   b8f2e:	4c25      	ldr	r4, [pc, #148]	; (b8fc4 <__register_exitproc+0xb4>)
   b8f30:	601c      	str	r4, [r3, #0]
   b8f32:	4b25      	ldr	r3, [pc, #148]	; (b8fc8 <__register_exitproc+0xb8>)
   b8f34:	b113      	cbz	r3, b8f3c <__register_exitproc+0x2c>
   b8f36:	681b      	ldr	r3, [r3, #0]
   b8f38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8f3c:	6863      	ldr	r3, [r4, #4]
   b8f3e:	2b1f      	cmp	r3, #31
   b8f40:	dd07      	ble.n	b8f52 <__register_exitproc+0x42>
   b8f42:	f8d8 0000 	ldr.w	r0, [r8]
   b8f46:	f000 f847 	bl	b8fd8 <__retarget_lock_release_recursive>
   b8f4a:	f04f 30ff 	mov.w	r0, #4294967295
   b8f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8f52:	b34e      	cbz	r6, b8fa8 <__register_exitproc+0x98>
   b8f54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8f58:	b988      	cbnz	r0, b8f7e <__register_exitproc+0x6e>
   b8f5a:	4b1c      	ldr	r3, [pc, #112]	; (b8fcc <__register_exitproc+0xbc>)
   b8f5c:	b923      	cbnz	r3, b8f68 <__register_exitproc+0x58>
   b8f5e:	f8d8 0000 	ldr.w	r0, [r8]
   b8f62:	f000 f838 	bl	b8fd6 <__retarget_lock_release>
   b8f66:	e7f0      	b.n	b8f4a <__register_exitproc+0x3a>
   b8f68:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8f6c:	f7fc fe5e 	bl	b5c2c <malloc>
   b8f70:	2800      	cmp	r0, #0
   b8f72:	d0f4      	beq.n	b8f5e <__register_exitproc+0x4e>
   b8f74:	2300      	movs	r3, #0
   b8f76:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8f7a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8f7e:	6863      	ldr	r3, [r4, #4]
   b8f80:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8f84:	2201      	movs	r2, #1
   b8f86:	409a      	lsls	r2, r3
   b8f88:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8f8c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8f90:	4313      	orrs	r3, r2
   b8f92:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8f96:	2e02      	cmp	r6, #2
   b8f98:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8f9c:	bf02      	ittt	eq
   b8f9e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8fa2:	4313      	orreq	r3, r2
   b8fa4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8fa8:	6863      	ldr	r3, [r4, #4]
   b8faa:	f8d8 0000 	ldr.w	r0, [r8]
   b8fae:	1c5a      	adds	r2, r3, #1
   b8fb0:	3302      	adds	r3, #2
   b8fb2:	6062      	str	r2, [r4, #4]
   b8fb4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8fb8:	f000 f80e 	bl	b8fd8 <__retarget_lock_release_recursive>
   b8fbc:	2000      	movs	r0, #0
   b8fbe:	e7c6      	b.n	b8f4e <__register_exitproc+0x3e>
   b8fc0:	2003e7e8 	.word	0x2003e7e8
   b8fc4:	2003e75c 	.word	0x2003e75c
   b8fc8:	00000000 	.word	0x00000000
   b8fcc:	000b5c2d 	.word	0x000b5c2d
   b8fd0:	2003df20 	.word	0x2003df20

000b8fd4 <__retarget_lock_acquire_recursive>:
   b8fd4:	4770      	bx	lr

000b8fd6 <__retarget_lock_release>:
   b8fd6:	4770      	bx	lr

000b8fd8 <__retarget_lock_release_recursive>:
   b8fd8:	4770      	bx	lr

000b8fda <link_code_end>:
	...

000b8fdc <dynalib_user>:
   b8fdc:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8fec:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8ffc:	7620 7269 7574 6c61 4100 6772 6e6f 4220      virtual.Argon B
   b900c:	454c 4120 6464 6572 7373 253a 0a73 5000     LE Address:%s..P
   b901c:	616c 5479 6d69 2165 6325 2500 2069 6564     layTime!%c.%i de
   b902c:	6976 6563 2073 6f66 6e75 0a64 4600 554f     vices found..FOU
   b903c:	444e 253d 3230 3a58 3025 5832 253a 3230     ND=%02X:%02X:%02
   b904c:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   b905c:	522c 5353 3d49 6925 000a 6572 6563 7669     ,RSSI=%i..receiv
   b906c:	6465 6420 7461 2061 7266 6d6f 253a 3230     ed data from:%02
   b907c:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   b908c:	253a 3230 3a58 3025 5832 000a 3025 5832     :%02X:%02X..%02X
   b909c:	4d00 7365 6173 6567 203a 7325 000a 7554     .Message: %s..Tu
   b90ac:	6e72 6f20 206e 7562 7474 6e6f 6925 000a     rn on button%i..
   b90bc:	4536 3034 3030 3130 422d 4135 2d33 3346     6E400001-B5A3-F3
   b90cc:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   b90dc:	4143 4539 3600 3445 3030 3030 2d32 3542     CA9E.6E400002-B5
   b90ec:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   b90fc:	3245 4434 4343 3941 0045 4536 3034 3030     E24DCCA9E.6E4000
   b910c:	3330 422d 4135 2d33 3346 3339 452d 4130     03-B5A3-F393-E0A
   b911c:	2d39 3545 4530 3432 4344 4143 4539 7400     9-E50E24DCCA9E.t
   b912c:	0078 7872                                    x.rx.

000b9131 <_ZL8myBitmap>:
   b9131:	feff ff7f ffff ffff ffff 3fff ffff fcff     ...........?....
   b9141:	ff0f ffff ffff ffff 1ff0 ffff f8ff ff01     ................
   b9151:	ffff ffff ffff 1fc0 ffff f8ff 7f00 ffff     ................
   b9161:	ffff ffff 0f00 ffff f0ff 1f00 ffff ffff     ................
   b9171:	fcff 0f00 ffff f0ff 0700 ffff ffff f0ff     ................
   b9181:	0700 ffff f0ff 0100 ffff ffff c0ff 0700     ................
   b9191:	ffff e0ff 0000 ff7f ffff 00ff 0300 ffff     ................
   b91a1:	e0ff 0000 ff3f ffff 00fe 0300 ffff c0ff     ....?...........
   b91b1:	001c ff1f ffff 00f8 030e ffff c0ff 801f     ................
   b91c1:	ff07 ffff 00f0 017e ffff c0ff e03f ff03     ......~.....?...
   b91d1:	ffff 00e0 01ff ffff c0ff f03f ff01 ffff     ..........?.....
   b91e1:	03c0 01ff ffff c0ff fc7f f000 0700 0f00     ................
   b91f1:	81ff ffff 80ff fe7f 0000 0000 1f00 81ff     ................
   b9201:	ffff 80ff ff7f 0080 0000 7f00 80ff ffff     ................
   b9211:	80ff ff7f 00c0 0000 ff00 80ff ffff 80ff     ................
   b9221:	ffff 0080 0000 ff00 80ff ffff 80ff feff     ................
   b9231:	0000 0000 7f00 80ff ffff 80ff fcff 0000     ................
   b9241:	0000 1f00 c0ff ffff 80ff f0ff 0000 0000     ................
   b9251:	0f00 80ff ffff 80ff e07f 0000 0000 0300     ................
   b9261:	80ff ffff 80ff c07f 0000 0000 0100 80ff     ................
   b9271:	ffff c0ff 807f 0000 0000 0000 81ff ffff     ................
   b9281:	c0ff 007f 0000 0000 0000 817f ffff c0ff     ................
   b9291:	003e 0000 0000 0000 013f ffff c0ff 003c     >.......?.....<.
   b92a1:	0000 0000 0000 011f ffff c0ff 0038 0000     ............8...
   b92b1:	0000 0000 010f ffff e0ff 0018 0000 0000     ................
   b92c1:	0000 030e ffff e0ff 0010 0000 0000 0000     ................
   b92d1:	0306 ffff e0ff 0000 0000 0000 0000 0700     ................
   b92e1:	ffff f0ff 0000 0000 0000 0000 0700 ffff     ................
   b92f1:	f0ff 0000 0000 0000 0000 0700 ffff f8ff     ................
	...
   b9309:	0f00 ffff f8ff 0000 0000 0000 0000 0f00     ................
   b9319:	ffff fcff 0000 0000 0000 0000 1f00 ffff     ................
   b9329:	fcff 0000 0000 0000 0000 3f00 ffff feff     ...........?....
	...
   b9341:	3f00 ffff ffff 0000 0000 0000 0000 7f00     .?..............
   b9351:	ffff ffff 0000 0000 0000 0000 7f00 ffff     ................
   b9361:	ffff 0000 0000 0000 0000 7f00 ffff ffff     ................
	...
   b9379:	7f00 ffff ffff 0000 0000 0000 0000 7f00     ................
   b9389:	ffff feff 0000 0000 0000 0000 7f00 ffff     ................
   b9399:	feff 0000 0000 0000 0000 3f00 fffe fe0f     ...........?....
	...
   b93b1:	3f00 7ff0 fe80 0000 0000 0000 0000 3f00     .?.............?
   b93c1:	ff01 0ef8 0000 0000 0000 0000 7000 ff3f     .............p?.
   b93d1:	03ff 0000 0000 0000 0000 6000 ffff f3ff     ...........`....
	...
   b93e9:	7f00 ffff ffff 0000 0000 0000 0000 7f00     ................
   b93f9:	ffff ffff 0000 0000 0000 0000 7f00 ffff     ................
   b9409:	0300 0000 0000 0000 0000 4000 7f00 0300     ...........@....
	...
   b9421:	ff00 ffff ffff 0080 0000 0008 0000 ff00     ................
   b9431:	ffff ffff 0080 0000 021e 0000 df00 ffff     ................
   b9441:	e1ff 00c0 2900 9eff 0000 c101 ffff 03ff     .....)..........
   b9451:	00c0 2b00 d4ff 0000 e001 ff3f 3fe0 00e0     ...+......?..?..
   b9461:	3700 e4ff 0000 fe03 ff03 ff83 00e0 1f00     .7..............
   b9471:	fcff 0000 ff03 ffe0 ff9f 00e0 1f00 f8ff     ................
   b9481:	0000 ff07 fffe ffff 00f0 0f00 f8ff 0000     ................
   b9491:	ff07 ffff ffff 00f8 0f00 f0ff 0000 ff0f     ................
   b94a1:	ffff ffff 00fc 0700 e0ff 0000 ff1f ffff     ................
   b94b1:	ffff 00fc 0300 e0ff 0000 ff3f ffff ffff     ..........?.....
   b94c1:	00fe 0100 c0ff 0000 ff3f ffff ffff 00ff     ........?.......
   b94d1:	0000 00ff 0000 ff7f ffff ffff 80ff 0000     ................
   b94e1:	001c 0000 ffff ffff ffff c0ff 0000 0000     ................
   b94f1:	0300 ffff ffff ffff e0ff 0000 0000 0700     ................
   b9501:	ffff ffff ffff f8ff 0000 0000 0f00 ffff     ................
   b9511:	ffff ffff fcff 0000 0000 1f00 ffff ffff     ................
   b9521:	ffff ffff 0000 0000 7f00 ffff ffff ffff     ................
   b9531:	ffff 00c0 0000 ff01 ffff ffff ffff ffff     ................
   b9541:	00f0 0000 ff07 ffff ffff ffff ffff 00fc     ................
   b9551:	0000 ff1f ffff ffff ffff ffff 80ff 0100     ................
   b9561:	ffff ffff ffff ffff ffff feff 3f00 ffff     .............?..
   b9571:	ffff ffff 0000                               .......

000b9578 <CSWTCH.88>:
   b9578:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b9588:	0050 0000                                   P...

000b958c <_ZTV16Adafruit_SSD1306>:
	...
   b9594:	4e85 000b 4f15 000b 564d 000b 80bd 000b     .N...O..MV......
   b95a4:	4e89 000b 52d1 000b 4d11 000b 4ba1 000b     .N...R...M...K..
   b95b4:	538f 000b 542d 000b 5463 000b 547f 000b     .S..-T..cT...T..

000b95c4 <_ZL4font>:
   b95c4:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b95d4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b95e4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b95f4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b9604:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b9614:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b9624:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b9634:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b9644:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b9654:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b9664:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b9674:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b9684:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b9694:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b96a4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b96b4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b96c4:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b96d4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b96e4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b96f4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b9704:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b9714:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b9724:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b9734:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b9744:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b9754:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b9764:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b9774:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b9784:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b9794:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b97a4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b97b4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b97c4:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b97d4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b97e4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b97f4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b9804:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b9814:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b9824:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b9834:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b9844:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b9854:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b9864:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b9874:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b9884:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b9894:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b98a4:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b98b4:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b98c4:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b98d4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b98e4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b98f4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b9904:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b9914:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b9924:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b9934:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b9944:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b9954:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b9964:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b9974:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b9984:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b9994:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b99a4:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b99b4:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b99c4:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b99d4:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b99e4:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b99f4:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b9a04:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b9a14:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b9a24:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b9a34:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b9a44:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b9a54:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b9a64:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b9a74:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b9a84:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b9a94:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b9aa4:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b9ab4:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b9ac0 <_ZTV12Adafruit_GFX>:
	...
   b9ad0:	564d 000b 80bd 000b 40a1 000b 52d1 000b     MV.......@...R..
   b9ae0:	53f7 000b 5413 000b 538f 000b 542d 000b     .S...T...S..-T..
   b9af0:	5463 000b 547f 000b                         cT...T..

000b9af8 <_ZTVN5spark13EthernetClassE>:
	...
   b9b00:	5d0b 000b 5d01 000b 5cf7 000b 5ced 000b     .]...]...\...\..
   b9b10:	5ce1 000b 5cd5 000b 8755 000b 875d 000b     .\...\..U...]...
   b9b20:	5cc9 000b 5cc1 000b 5cb7 000b 5cad 000b     .\...\...\...\..
   b9b30:	878d 000b                                   ....

000b9b34 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9b34:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   b9b44:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   b9b54:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   b9b64:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   b9b74:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   b9b84:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   b9b94:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   b9ba4:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   b9bb4:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   b9bc4:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   b9bd4:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   b9be4:	6574 6d20 6d65 726f 2179 4600 6961 656c     te memory!.Faile
   b9bf4:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   b9c04:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   b9c14:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   b9c24:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   b9c34:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   b9c44:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   b9c54:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   b9c64:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   b9c74:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   b9c84:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   b9c94:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000b9ca4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9cac:	60c5 000b 6129 000b 6275 000b 6153 000b     .`..)a..ub..Sa..
   b9cbc:	60c9 000b                                   .`..

000b9cc0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9cc8:	60c1 000b 6137 000b 60c3 000b 6159 000b     .`..7a...`..Ya..
   b9cd8:	60e9 000b                                   .`..

000b9cdc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9ce4:	60bf 000b 6145 000b 6c81 000b 615f 000b     .`..Ea...l.._a..
   b9cf4:	6109 000b                                   .a..

000b9cf8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9d04:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b9d16 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b9d16:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b9d26 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b9d26:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   b9d36:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b9d46:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000b9d58 <_ZTV9IPAddress>:
	...
   b9d60:	8349 000b 8339 000b 833b 000b               I...9...;...

000b9d6c <_ZTV9USBSerial>:
	...
   b9d74:	842f 000b 8497 000b 846d 000b 80bd 000b     /.......m.......
   b9d84:	845f 000b 8431 000b 8441 000b 8491 000b     _...1...A.......
   b9d94:	8451 000b 8429 000b                         Q...)...

000b9d9c <_ZTV11USARTSerial>:
	...
   b9da4:	8539 000b 85a5 000b 857d 000b 80bd 000b     9.......}.......
   b9db4:	854d 000b 8569 000b 855b 000b 8577 000b     M...i...[...w...
   b9dc4:	853b 000b 853f 000b                         ;...?...

000b9dcc <_ZTV7TwoWire>:
	...
   b9dd4:	85dd 000b 8627 000b 85ff 000b 85df 000b     ....'...........
   b9de4:	8607 000b 860f 000b 8617 000b 861f 000b     ................

000b9df4 <_ZTVN5spark9WiFiClassE>:
	...
   b9dfc:	86f7 000b 86ed 000b 86e3 000b 8699 000b     ................
   b9e0c:	86d7 000b 86cb 000b 8755 000b 875d 000b     ........U...]...
   b9e1c:	86bf 000b 86b7 000b 86ad 000b 86a3 000b     ................
   b9e2c:	878d 000b                                   ....

000b9e30 <_ZTVN5spark12NetworkClassE>:
	...
   b9e38:	8715 000b 871f 000b 8729 000b 8733 000b     ........)...3...
   b9e48:	873d 000b 8749 000b 8755 000b 875d 000b     =...I...U...]...
   b9e58:	8765 000b 8771 000b 8779 000b 8783 000b     e...q...y.......
   b9e68:	878d 000b                                   ....

000b9e6c <_ZSt7nothrow>:
	...

000b9e6d <_ZTSSt19_Sp_make_shared_tag>:
   b9e6d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9e7d:	6572 5f64 6174 0067 0000                     red_tag....

000b9e88 <_ZTISt19_Sp_make_shared_tag>:
   b9e88:	9ec8 000b 9e6d 000b                         ....m...

000b9e90 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9e90:	9f28 000b 9e9c 000b 9f4c 000b               (.......L...

000b9e9c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9e9c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9eac:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9ebc:	0045 0000                                   E...

000b9ec0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9ec0:	0000 0000 9e90 000b 8ae5 000b 8af9 000b     ................
   b9ed0:	8c8d 000b 8c8d 000b 8b63 000b 8aa5 000b     ........c.......
   b9ee0:	8b4b 000b 8b0d 000b 8ad7 000b               K...........

000b9eec <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9eec:	9f28 000b 9ef8 000b 9e90 000b               (...........

000b9ef8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9ef8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9f08:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9f18:	666e 456f 0000 0000                         nfoE....

000b9f20 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9f20:	0000 0000 9eec 000b 8b8d 000b 8ba1 000b     ................
   b9f30:	8c8d 000b 8c8d 000b 8b63 000b 8aa5 000b     ........c.......
   b9f40:	8c61 000b 8bed 000b 8bb5 000b               a...........

000b9f4c <_ZTISt9type_info>:
   b9f4c:	9ec8 000b 9f54 000b                         ....T...

000b9f54 <_ZTSSt9type_info>:
   b9f54:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9f64:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9f74:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b9f84:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b9f94:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b9fa4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9fb4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9fc4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b9fd4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9fe4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b9ff5 <_ctype_>:
   b9ff5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba005:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba015:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba025:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba035:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba045:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba055:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba065:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba075:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba0f6 <link_const_variable_data_end>:
	...

000ba0f8 <link_constructors_location>:
   ba0f8:	000b4575 	.word	0x000b4575
   ba0fc:	000b4b91 	.word	0x000b4b91
   ba100:	000b5d15 	.word	0x000b5d15
   ba104:	000b5ea9 	.word	0x000b5ea9
   ba108:	000b80ad 	.word	0x000b80ad
   ba10c:	000b81c9 	.word	0x000b81c9
   ba110:	000b81d9 	.word	0x000b81d9
   ba114:	000b81f5 	.word	0x000b81f5
   ba118:	000b8701 	.word	0x000b8701
   ba11c:	000b8865 	.word	0x000b8865
