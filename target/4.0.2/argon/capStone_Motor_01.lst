
c:/Users/gabea/Documents/IoT/capStone_Motor_01/target/4.0.2/argon/capStone_Motor_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006fd4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000baff0  000baff0  0000aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bb014  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000488  2003d9a4  000bb018  0001d9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009c4  2003de2c  2003de2c  0002de2c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bb4a0  000bb4a0  0002b4a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bb4c8  000bb4c8  0002b4c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00141948  00000000  00000000  0002b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00016a85  00000000  00000000  0016ce14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003fde1  00000000  00000000  00183899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000034e0  00000000  00000000  001c367a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b1b8  00000000  00000000  001c6b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f587  00000000  00000000  001d1d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004c781  00000000  00000000  00211299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136d71  00000000  00000000  0025da1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000095ec  00000000  00000000  0039478c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 fd0f 	bl	b9a50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fd31 	bl	b9aa0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003d9a4 	.word	0x2003d9a4
   b4048:	000bb018 	.word	0x000bb018
   b404c:	2003de2c 	.word	0x2003de2c
   b4050:	2003de2c 	.word	0x2003de2c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 fcf3 	bl	b8a48 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bafc4 	.word	0x000bafc4
   b407c:	000bafec 	.word	0x000bafec

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b830 	b.w	b40e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f90d 	bl	b42a4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f004 bc93 	b.w	b89b8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 b921 	b.w	b62d8 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 b91f 	b.w	b62d8 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 b925 	b.w	b62e8 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 f872 	bl	b6190 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5d6d 	.word	0x000b5d6d
   b40b4:	000b9d78 	.word	0x000b9d78

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f004 fbea 	bl	b88ae <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
Adafruit_MQTT_Publish rssiFeed=Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/rssi");
void MQTT_connect();
bool MQTT_ping();

void setup() {
   b40e4:	b570      	push	{r4, r5, r6, lr}
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b40e6:	4c65      	ldr	r4, [pc, #404]	; (b427c <setup+0x198>)
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b40e8:	2300      	movs	r3, #0
   b40ea:	b090      	sub	sp, #64	; 0x40
   b40ec:	6860      	ldr	r0, [r4, #4]
   b40ee:	461a      	mov	r2, r3
   b40f0:	4619      	mov	r1, r3
   b40f2:	f002 f8a1 	bl	b6238 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b40f6:	2300      	movs	r3, #0
   b40f8:	4619      	mov	r1, r3
   b40fa:	461a      	mov	r2, r3
   b40fc:	6860      	ldr	r0, [r4, #4]
   b40fe:	f002 f87b 	bl	b61f8 <network_connect>
   WiFi.on();
   WiFi.connect();
   Serial.begin(9600);
   b4102:	f004 fdc3 	bl	b8c8c <_Z16_fetch_usbserialv>
   b4106:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b410a:	f004 fdaf 	bl	b8c6c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b410e:	2000      	movs	r0, #0
   b4110:	f001 fe44 	bl	b5d9c <hal_timer_millis>
        while (_while() && !_condition()) {
   b4114:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b4118:	4604      	mov	r4, r0
   b411a:	2000      	movs	r0, #0
   b411c:	f001 fe3e 	bl	b5d9c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4120:	1b00      	subs	r0, r0, r4
   b4122:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4126:	42a8      	cmp	r0, r5
   b4128:	f171 0300 	sbcs.w	r3, r1, #0
   b412c:	d207      	bcs.n	b413e <setup+0x5a>
   waitFor(Serial.isConnected, 15000);
   b412e:	f004 fdad 	bl	b8c8c <_Z16_fetch_usbserialv>
   b4132:	f004 fd9f 	bl	b8c74 <_ZN9USBSerial11isConnectedEv>
   b4136:	b910      	cbnz	r0, b413e <setup+0x5a>
            spark_process();
   b4138:	f002 f8be 	bl	b62b8 <spark_process>
        while (_while() && !_condition()) {
   b413c:	e7ed      	b.n	b411a <setup+0x36>
   b413e:	f004 fda5 	bl	b8c8c <_Z16_fetch_usbserialv>
   b4142:	f004 fd97 	bl	b8c74 <_ZN9USBSerial11isConnectedEv>
   BLE.on();
   b4146:	f002 ff55 	bl	b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b414a:	f002 ff9d 	bl	b7088 <_ZNK8particle14BleLocalDevice2onEv>
   BLE.addCharacteristic(txCharacteristic);
   b414e:	f002 ff51 	bl	b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4152:	4a4b      	ldr	r2, [pc, #300]	; (b4280 <setup+0x19c>)
   b4154:	4d4b      	ldr	r5, [pc, #300]	; (b4284 <setup+0x1a0>)
   b4156:	4601      	mov	r1, r0
   b4158:	a80b      	add	r0, sp, #44	; 0x2c
   b415a:	f004 f8e9 	bl	b8330 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b415e:	a80b      	add	r0, sp, #44	; 0x2c
   b4160:	f003 f8fd 	bl	b735e <_ZN8particle17BleCharacteristicD1Ev>
   BLE.addCharacteristic(rxCharacteristic);
   b4164:	f002 ff46 	bl	b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4168:	4a47      	ldr	r2, [pc, #284]	; (b4288 <setup+0x1a4>)
   b416a:	4601      	mov	r1, r0
   b416c:	a80b      	add	r0, sp, #44	; 0x2c
   b416e:	f004 f8df 	bl	b8330 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4172:	a80b      	add	r0, sp, #44	; 0x2c
   b4174:	f003 f8f3 	bl	b735e <_ZN8particle17BleCharacteristicD1Ev>
   data.appendServiceUUID(serviceUuid);
   b4178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b417a:	ac06      	add	r4, sp, #24
   b417c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b417e:	682e      	ldr	r6, [r5, #0]
   b4180:	6026      	str	r6, [r4, #0]
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4182:	ad06      	add	r5, sp, #24
   b4184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4186:	ac0b      	add	r4, sp, #44	; 0x2c
   b4188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b418a:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b418c:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b418e:	f002 fd49 	bl	b6c24 <_ZNK8particle7BleUuid4typeEv>
   b4192:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4194:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4196:	2c00      	cmp	r4, #0
   b4198:	d167      	bne.n	b426a <setup+0x186>
            uint16_t uuid16 = tempUUID.shorted();
   b419a:	f002 fd5f 	bl	b6c5c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b419e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b41a0:	f8ad 0016 	strh.w	r0, [sp, #22]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41a4:	2302      	movs	r3, #2
   b41a6:	f10d 0216 	add.w	r2, sp, #22
   b41aa:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b41ac:	4837      	ldr	r0, [pc, #220]	; (b428c <setup+0x1a8>)
   b41ae:	f003 fbf7 	bl	b79a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
   BLE.advertise(&data);
   b41b2:	f002 ff1f 	bl	b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41b6:	2200      	movs	r2, #0
   b41b8:	4934      	ldr	r1, [pc, #208]	; (b428c <setup+0x1a8>)
   b41ba:	f003 f873 	bl	b72a4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
   Serial.printf("Argon BLE Address:%s\n",BLE.address().toString().c_str());
   b41be:	f004 fd65 	bl	b8c8c <_Z16_fetch_usbserialv>
   b41c2:	4604      	mov	r4, r0
   b41c4:	f002 ff16 	bl	b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41c8:	4601      	mov	r1, r0
   b41ca:	a806      	add	r0, sp, #24
   b41cc:	f002 ff63 	bl	b7096 <_ZNK8particle14BleLocalDevice7addressEv>
   b41d0:	a906      	add	r1, sp, #24
   b41d2:	a80b      	add	r0, sp, #44	; 0x2c
   b41d4:	2200      	movs	r2, #0
   b41d6:	f002 fcc2 	bl	b6b5e <_ZNK8particle10BleAddress8toStringEb>
   b41da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b41dc:	492c      	ldr	r1, [pc, #176]	; (b4290 <setup+0x1ac>)
   b41de:	4620      	mov	r0, r4
   b41e0:	f7ff ff72 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b41e4:	a80b      	add	r0, sp, #44	; 0x2c
   b41e6:	f002 fa0b 	bl	b6600 <_ZN6StringD1Ev>
  display.begin (SSD1306_SWITCHCAPVCC, 0x3c);
   b41ea:	223c      	movs	r2, #60	; 0x3c
   b41ec:	2102      	movs	r1, #2
   b41ee:	4829      	ldr	r0, [pc, #164]	; (b4294 <setup+0x1b0>)
   b41f0:	f000 ffe0 	bl	b51b4 <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   b41f4:	4827      	ldr	r0, [pc, #156]	; (b4294 <setup+0x1b0>)
   b41f6:	f000 ff6d 	bl	b50d4 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   b41fa:	4826      	ldr	r0, [pc, #152]	; (b4294 <setup+0x1b0>)
   b41fc:	f000 fef2 	bl	b4fe4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.drawBitmap(16,20, myBitmap,112, 44, 1);
   b4200:	2401      	movs	r4, #1
   b4202:	232c      	movs	r3, #44	; 0x2c
   b4204:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b4208:	2370      	movs	r3, #112	; 0x70
   b420a:	9300      	str	r3, [sp, #0]
   b420c:	2214      	movs	r2, #20
   b420e:	4b22      	ldr	r3, [pc, #136]	; (b4298 <setup+0x1b4>)
   b4210:	4820      	ldr	r0, [pc, #128]	; (b4294 <setup+0x1b0>)
   b4212:	2110      	movs	r1, #16
   b4214:	f001 f992 	bl	b553c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b4218:	481e      	ldr	r0, [pc, #120]	; (b4294 <setup+0x1b0>)
   b421a:	f000 ff5b 	bl	b50d4 <_ZN16Adafruit_SSD13067displayEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
   b421e:	223c      	movs	r2, #60	; 0x3c
   b4220:	481c      	ldr	r0, [pc, #112]	; (b4294 <setup+0x1b0>)
   b4222:	2102      	movs	r1, #2
   b4224:	f000 ffc6 	bl	b51b4 <_ZN16Adafruit_SSD13065beginEhh>
  display.setTextSize(2);
   b4228:	481a      	ldr	r0, [pc, #104]	; (b4294 <setup+0x1b0>)
   b422a:	2102      	movs	r1, #2
   b422c:	f001 fa8a 	bl	b5744 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(BLACK,WHITE);
   b4230:	4622      	mov	r2, r4
   b4232:	4818      	ldr	r0, [pc, #96]	; (b4294 <setup+0x1b0>)
   b4234:	2100      	movs	r1, #0
   b4236:	f001 fa8a 	bl	b574e <_ZN12Adafruit_GFX12setTextColorEtt>
  display.printf("PlayTime!%c",33);
   b423a:	2221      	movs	r2, #33	; 0x21
   b423c:	4917      	ldr	r1, [pc, #92]	; (b429c <setup+0x1b8>)
   b423e:	4815      	ldr	r0, [pc, #84]	; (b4294 <setup+0x1b0>)
   b4240:	f7ff ff42 	bl	b40c8 <_ZN5Print6printfEPKcz>
  display.display();
   b4244:	4813      	ldr	r0, [pc, #76]	; (b4294 <setup+0x1b0>)
   b4246:	f000 ff45 	bl	b50d4 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();  
   b424a:	4812      	ldr	r0, [pc, #72]	; (b4294 <setup+0x1b0>)
   b424c:	f000 feca 	bl	b4fe4 <_ZN16Adafruit_SSD130612clearDisplayEv>
pinMode(D10,OUTPUT);
   b4250:	4621      	mov	r1, r4
   b4252:	200a      	movs	r0, #10
   b4254:	f005 f9ea 	bl	b962c <pinMode>
pixel.begin();
   b4258:	4811      	ldr	r0, [pc, #68]	; (b42a0 <setup+0x1bc>)
   b425a:	f000 fab6 	bl	b47ca <_ZN17Adafruit_NeoPixel5beginEv>
pixel.show();
   b425e:	4810      	ldr	r0, [pc, #64]	; (b42a0 <setup+0x1bc>)
}
   b4260:	b010      	add	sp, #64	; 0x40
   b4262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
pixel.show();
   b4266:	f000 bae9 	b.w	b483c <_ZN17Adafruit_NeoPixel4showEv>
   b426a:	f002 fcf9 	bl	b6c60 <_ZNK8particle7BleUuid8rawBytesEv>
   b426e:	2300      	movs	r3, #0
   b4270:	9300      	str	r3, [sp, #0]
   b4272:	4602      	mov	r2, r0
   b4274:	2310      	movs	r3, #16
   b4276:	2107      	movs	r1, #7
   b4278:	e798      	b.n	b41ac <setup+0xc8>
   b427a:	bf00      	nop
   b427c:	2003e718 	.word	0x2003e718
   b4280:	2003e6a0 	.word	0x2003e6a0
   b4284:	2003de4c 	.word	0x2003de4c
   b4288:	2003e0f4 	.word	0x2003e0f4
   b428c:	2003dea8 	.word	0x2003dea8
   b4290:	000b9d8d 	.word	0x000b9d8d
   b4294:	2003deb4 	.word	0x2003deb4
   b4298:	000b9f1f 	.word	0x000b9f1f
   b429c:	000b9da3 	.word	0x000b9da3
   b42a0:	2003e0a8 	.word	0x2003e0a8

000b42a4 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b42a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42a8:	b089      	sub	sp, #36	; 0x24
    BLE.setScanTimeout(500);
   b42aa:	f002 fea3 	bl	b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b42b2:	f002 ff47 	bl	b7144 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    count=BLE.scan(scanResults,SCAN_RESULT_MAX);
   b42b6:	f002 fe9d 	bl	b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42ba:	4947      	ldr	r1, [pc, #284]	; (b43d8 <loop+0x134>)
   b42bc:	f8df 913c 	ldr.w	r9, [pc, #316]	; b43fc <loop+0x158>
   b42c0:	4d46      	ldr	r5, [pc, #280]	; (b43dc <loop+0x138>)
   b42c2:	4c47      	ldr	r4, [pc, #284]	; (b43e0 <loop+0x13c>)
   b42c4:	4e44      	ldr	r6, [pc, #272]	; (b43d8 <loop+0x134>)
    Serial.printf("%i devices found\n",count);
    for (int i=0; i < count; i++) {
        scanResults[i].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b42c6:	f8df b138 	ldr.w	fp, [pc, #312]	; b4400 <loop+0x15c>
        for(j=0;j<6;j++){
   b42ca:	f8df 8138 	ldr.w	r8, [pc, #312]	; b4404 <loop+0x160>
    count=BLE.scan(scanResults,SCAN_RESULT_MAX);
   b42ce:	2228      	movs	r2, #40	; 0x28
   b42d0:	f002 ff94 	bl	b71fc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   b42d4:	f889 0000 	strb.w	r0, [r9]
    Serial.printf("%i devices found\n",count);
   b42d8:	f004 fcd8 	bl	b8c8c <_Z16_fetch_usbserialv>
   b42dc:	f899 2000 	ldrb.w	r2, [r9]
   b42e0:	4940      	ldr	r1, [pc, #256]	; (b43e4 <loop+0x140>)
   b42e2:	f7ff fef1 	bl	b40c8 <_ZN5Print6printfEPKcz>
    for (int i=0; i < count; i++) {
   b42e6:	2700      	movs	r7, #0
   b42e8:	f899 3000 	ldrb.w	r3, [r9]
   b42ec:	42bb      	cmp	r3, r7
   b42ee:	dd6f      	ble.n	b43d0 <loop+0x12c>
        scanResults[i].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b42f0:	231f      	movs	r3, #31
   b42f2:	465a      	mov	r2, fp
   b42f4:	21ff      	movs	r1, #255	; 0xff
   b42f6:	f106 0008 	add.w	r0, r6, #8
   b42fa:	f002 fd3d 	bl	b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        for(j=0;j<6;j++){
   b42fe:	2300      	movs	r3, #0
   b4300:	f888 3000 	strb.w	r3, [r8]
            mac[i][j]=scanResults[i].address()[j];
   b4304:	4b36      	ldr	r3, [pc, #216]	; (b43e0 <loop+0x13c>)
   b4306:	2206      	movs	r2, #6
   b4308:	fb02 3207 	mla	r2, r2, r7, r3
        for(j=0;j<6;j++){
   b430c:	f898 a000 	ldrb.w	sl, [r8]
   b4310:	9207      	str	r2, [sp, #28]
   b4312:	f1ba 0f05 	cmp.w	sl, #5
   b4316:	d80f      	bhi.n	b4338 <loop+0x94>
            mac[i][j]=scanResults[i].address()[j];
   b4318:	4651      	mov	r1, sl
   b431a:	4630      	mov	r0, r6
   b431c:	f002 fb92 	bl	b6a44 <_ZNK8particle10BleAddressixEh>
            rssi[i]=scanResults[i].rssi();
   b4320:	f896 3020 	ldrb.w	r3, [r6, #32]
   b4324:	702b      	strb	r3, [r5, #0]
        for(j=0;j<6;j++){
   b4326:	f898 3000 	ldrb.w	r3, [r8]
            mac[i][j]=scanResults[i].address()[j];
   b432a:	9a07      	ldr	r2, [sp, #28]
        for(j=0;j<6;j++){
   b432c:	3301      	adds	r3, #1
            mac[i][j]=scanResults[i].address()[j];
   b432e:	f802 000a 	strb.w	r0, [r2, sl]
        for(j=0;j<6;j++){
   b4332:	f888 3000 	strb.w	r3, [r8]
   b4336:	e7e9      	b.n	b430c <loop+0x68>
        }
        if (mac[i][0]==0xFA &&mac[i][1]==0xDA){
   b4338:	7823      	ldrb	r3, [r4, #0]
   b433a:	2bfa      	cmp	r3, #250	; 0xfa
   b433c:	d143      	bne.n	b43c6 <loop+0x122>
   b433e:	7863      	ldrb	r3, [r4, #1]
   b4340:	2bda      	cmp	r3, #218	; 0xda
   b4342:	d140      	bne.n	b43c6 <loop+0x122>
            Serial.printf("FOUND=%02X:%02X:%02X:%02X:%02X:%02X,RSSI=%i\n",mac[i][0],mac[i][1],mac[i][2],mac[i][3],mac[i][4],mac[i][5],rssi[i]);
   b4344:	f004 fca2 	bl	b8c8c <_Z16_fetch_usbserialv>
   b4348:	f995 3000 	ldrsb.w	r3, [r5]
   b434c:	9304      	str	r3, [sp, #16]
   b434e:	7963      	ldrb	r3, [r4, #5]
   b4350:	9303      	str	r3, [sp, #12]
   b4352:	7923      	ldrb	r3, [r4, #4]
   b4354:	9302      	str	r3, [sp, #8]
   b4356:	78e3      	ldrb	r3, [r4, #3]
   b4358:	9301      	str	r3, [sp, #4]
   b435a:	78a3      	ldrb	r3, [r4, #2]
   b435c:	7822      	ldrb	r2, [r4, #0]
   b435e:	9300      	str	r3, [sp, #0]
   b4360:	4921      	ldr	r1, [pc, #132]	; (b43e8 <loop+0x144>)
   b4362:	7863      	ldrb	r3, [r4, #1]
   b4364:	f7ff feb0 	bl	b40c8 <_ZN5Print6printfEPKcz>
            distanceVal=rssi[i];
   b4368:	f995 3000 	ldrsb.w	r3, [r5]
   b436c:	4a1f      	ldr	r2, [pc, #124]	; (b43ec <loop+0x148>)
   b436e:	6013      	str	r3, [r2, #0]
            if(rssi[i]>=-55){
   b4370:	3337      	adds	r3, #55	; 0x37
   b4372:	db03      	blt.n	b437c <loop+0xd8>
            digitalWrite(D10,HIGH);
   b4374:	2101      	movs	r1, #1
   b4376:	200a      	movs	r0, #10
   b4378:	f005 f969 	bl	b964e <digitalWrite>
          
            }
            if(rssi[i]<=-60){
   b437c:	f995 3000 	ldrsb.w	r3, [r5]
   b4380:	333b      	adds	r3, #59	; 0x3b
   b4382:	da03      	bge.n	b438c <loop+0xe8>
              digitalWrite(D10,LOW);
   b4384:	2100      	movs	r1, #0
   b4386:	200a      	movs	r0, #10
   b4388:	f005 f961 	bl	b964e <digitalWrite>
            }
             if((millis()-lastTime>2000)){
   b438c:	f8df a078 	ldr.w	sl, [pc, #120]	; b4408 <loop+0x164>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4390:	f001 fcfc 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
   b4394:	f8da 2000 	ldr.w	r2, [sl]
   b4398:	1a80      	subs	r0, r0, r2
   b439a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b439e:	d912      	bls.n	b43c6 <loop+0x122>
    if(mqtt.Update()){
   b43a0:	4813      	ldr	r0, [pc, #76]	; (b43f0 <loop+0x14c>)
   b43a2:	f001 fa65 	bl	b5870 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   b43a6:	b170      	cbz	r0, b43c6 <loop+0x122>
         rssiFeed.publish(rssi[i]);
   b43a8:	f995 1000 	ldrsb.w	r1, [r5]
   b43ac:	4811      	ldr	r0, [pc, #68]	; (b43f4 <loop+0x150>)
   b43ae:	f001 fc8e 	bl	b5cce <_ZN21Adafruit_MQTT_Publish7publishEi>
        Serial.printf("Publishing %i \n",rssi);
   b43b2:	f004 fc6b 	bl	b8c8c <_Z16_fetch_usbserialv>
   b43b6:	4a09      	ldr	r2, [pc, #36]	; (b43dc <loop+0x138>)
   b43b8:	490f      	ldr	r1, [pc, #60]	; (b43f8 <loop+0x154>)
   b43ba:	f7ff fe85 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b43be:	f001 fce5 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
         lastTime=millis(); 
   b43c2:	f8ca 0000 	str.w	r0, [sl]
    for (int i=0; i < count; i++) {
   b43c6:	3701      	adds	r7, #1
   b43c8:	3501      	adds	r5, #1
   b43ca:	3406      	adds	r4, #6
   b43cc:	3624      	adds	r6, #36	; 0x24
   b43ce:	e78b      	b.n	b42e8 <loop+0x44>
    }
   }

        }
    }
  }
   b43d0:	b009      	add	sp, #36	; 0x24
   b43d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b43d6:	bf00      	nop
   b43d8:	2003e0fc 	.word	0x2003e0fc
   b43dc:	2003e0c0 	.word	0x2003e0c0
   b43e0:	2003dee4 	.word	0x2003dee4
   b43e4:	000b9daf 	.word	0x000b9daf
   b43e8:	000b9dc1 	.word	0x000b9dc1
   b43ec:	2003ded8 	.word	0x2003ded8
   b43f0:	2003dfd4 	.word	0x2003dfd4
   b43f4:	2003e0e8 	.word	0x2003e0e8
   b43f8:	000b9dee 	.word	0x000b9dee
   b43fc:	2003dea7 	.word	0x2003dea7
   b4400:	2003de88 	.word	0x2003de88
   b4404:	2003dedd 	.word	0x2003dedd
   b4408:	2003dee0 	.word	0x2003dee0

000b440c <_Z9pixelFilliii>:
  ("turn off button%i\n",OnorOff);
  pixel.clear();     
  pixelFill(startPixel,endPixel,color2);
}
}
void pixelFill(int startPix,int endPix,int color){
   b440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (pixelCount=startPix; pixelCount<=endPix; pixelCount=pixelCount+2){
   b4410:	4c0e      	ldr	r4, [pc, #56]	; (b444c <_Z9pixelFilliii+0x40>)
      pixel.setPixelColor(pixelCount,color1);
   b4412:	f8df 8044 	ldr.w	r8, [pc, #68]	; b4458 <_Z9pixelFilliii+0x4c>
   b4416:	4e0e      	ldr	r6, [pc, #56]	; (b4450 <_Z9pixelFilliii+0x44>)
      pixel.setPixelColor(pixelCount+1,color2); 
   b4418:	4f0e      	ldr	r7, [pc, #56]	; (b4454 <_Z9pixelFilliii+0x48>)
    for (pixelCount=startPix; pixelCount<=endPix; pixelCount=pixelCount+2){
   b441a:	6020      	str	r0, [r4, #0]
void pixelFill(int startPix,int endPix,int color){
   b441c:	460d      	mov	r5, r1
    for (pixelCount=startPix; pixelCount<=endPix; pixelCount=pixelCount+2){
   b441e:	6821      	ldr	r1, [r4, #0]
   b4420:	42a9      	cmp	r1, r5
   b4422:	dc10      	bgt.n	b4446 <_Z9pixelFilliii+0x3a>
      pixel.setPixelColor(pixelCount,color1);
   b4424:	f8d8 2000 	ldr.w	r2, [r8]
   b4428:	b289      	uxth	r1, r1
   b442a:	4630      	mov	r0, r6
   b442c:	f000 fbb2 	bl	b4b94 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      pixel.setPixelColor(pixelCount+1,color2); 
   b4430:	6823      	ldr	r3, [r4, #0]
   b4432:	683a      	ldr	r2, [r7, #0]
   b4434:	3301      	adds	r3, #1
   b4436:	b299      	uxth	r1, r3
   b4438:	4630      	mov	r0, r6
   b443a:	f000 fbab 	bl	b4b94 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for (pixelCount=startPix; pixelCount<=endPix; pixelCount=pixelCount+2){
   b443e:	6823      	ldr	r3, [r4, #0]
   b4440:	3302      	adds	r3, #2
   b4442:	6023      	str	r3, [r4, #0]
   b4444:	e7eb      	b.n	b441e <_Z9pixelFilliii+0x12>
    }
}
   b4446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b444a:	bf00      	nop
   b444c:	2003e0bc 	.word	0x2003e0bc
   b4450:	2003e0a8 	.word	0x2003e0a8
   b4454:	2003d9a8 	.word	0x2003d9a8
   b4458:	2003d9a4 	.word	0x2003d9a4

000b445c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len,const BlePeerDevice& peer, void* context) {
   b445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4460:	b092      	sub	sp, #72	; 0x48
   b4462:	4614      	mov	r4, r2
   b4464:	460e      	mov	r6, r1
   b4466:	4605      	mov	r5, r0
    Serial.printf("received data from:%02X:%02X:%02X:%02X:%02X:%02X\n", peer.address()
   b4468:	f004 fc10 	bl	b8c8c <_Z16_fetch_usbserialv>
   b446c:	4621      	mov	r1, r4
   b446e:	4607      	mov	r7, r0
   b4470:	a806      	add	r0, sp, #24
   b4472:	f002 fd55 	bl	b6f20 <_ZNK8particle13BlePeerDevice7addressEv>
    [0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   b4476:	2100      	movs	r1, #0
   b4478:	a806      	add	r0, sp, #24
   b447a:	f002 fae3 	bl	b6a44 <_ZNK8particle10BleAddressixEh>
   b447e:	4621      	mov	r1, r4
   b4480:	9005      	str	r0, [sp, #20]
   b4482:	a808      	add	r0, sp, #32
   b4484:	f002 fd4c 	bl	b6f20 <_ZNK8particle13BlePeerDevice7addressEv>
   b4488:	2101      	movs	r1, #1
   b448a:	a808      	add	r0, sp, #32
   b448c:	f002 fada 	bl	b6a44 <_ZNK8particle10BleAddressixEh>
   b4490:	4621      	mov	r1, r4
   b4492:	9004      	str	r0, [sp, #16]
   b4494:	a80a      	add	r0, sp, #40	; 0x28
   b4496:	f002 fd43 	bl	b6f20 <_ZNK8particle13BlePeerDevice7addressEv>
   b449a:	2102      	movs	r1, #2
   b449c:	a80a      	add	r0, sp, #40	; 0x28
   b449e:	f002 fad1 	bl	b6a44 <_ZNK8particle10BleAddressixEh>
   b44a2:	4621      	mov	r1, r4
   b44a4:	4680      	mov	r8, r0
   b44a6:	a80c      	add	r0, sp, #48	; 0x30
   b44a8:	f002 fd3a 	bl	b6f20 <_ZNK8particle13BlePeerDevice7addressEv>
   b44ac:	2103      	movs	r1, #3
   b44ae:	a80c      	add	r0, sp, #48	; 0x30
   b44b0:	f002 fac8 	bl	b6a44 <_ZNK8particle10BleAddressixEh>
   b44b4:	4621      	mov	r1, r4
   b44b6:	4681      	mov	r9, r0
   b44b8:	a80e      	add	r0, sp, #56	; 0x38
   b44ba:	f002 fd31 	bl	b6f20 <_ZNK8particle13BlePeerDevice7addressEv>
   b44be:	2104      	movs	r1, #4
   b44c0:	a80e      	add	r0, sp, #56	; 0x38
   b44c2:	f002 fabf 	bl	b6a44 <_ZNK8particle10BleAddressixEh>
   b44c6:	4621      	mov	r1, r4
   b44c8:	4682      	mov	sl, r0
   b44ca:	a810      	add	r0, sp, #64	; 0x40
   b44cc:	f002 fd28 	bl	b6f20 <_ZNK8particle13BlePeerDevice7addressEv>
   b44d0:	2105      	movs	r1, #5
   b44d2:	a810      	add	r0, sp, #64	; 0x40
   b44d4:	f002 fab6 	bl	b6a44 <_ZNK8particle10BleAddressixEh>
    Serial.printf("received data from:%02X:%02X:%02X:%02X:%02X:%02X\n", peer.address()
   b44d8:	e9cd 8900 	strd	r8, r9, [sp]
   b44dc:	e9cd a002 	strd	sl, r0, [sp, #8]
   b44e0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b44e4:	4638      	mov	r0, r7
   b44e6:	492e      	ldr	r1, [pc, #184]	; (b45a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
        Serial.printf("%02X",data[i]);
   b44e8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b45cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x170>
   b44ec:	4f2d      	ldr	r7, [pc, #180]	; (b45a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
    Serial.printf("received data from:%02X:%02X:%02X:%02X:%02X:%02X\n", peer.address()
   b44ee:	f7ff fdeb 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b44f2:	2400      	movs	r4, #0
    for (h=0; h<len; h++) {
   b44f4:	b2e3      	uxtb	r3, r4
   b44f6:	42b3      	cmp	r3, r6
   b44f8:	f104 0401 	add.w	r4, r4, #1
   b44fc:	d208      	bcs.n	b4510 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb4>
        Serial.printf("%02X",data[i]);
   b44fe:	f004 fbc5 	bl	b8c8c <_Z16_fetch_usbserialv>
   b4502:	f898 3000 	ldrb.w	r3, [r8]
   b4506:	4639      	mov	r1, r7
   b4508:	5cea      	ldrb	r2, [r5, r3]
   b450a:	f7ff fddd 	bl	b40c8 <_ZN5Print6printfEPKcz>
    for (h=0; h<len; h++) {
   b450e:	e7f1      	b.n	b44f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>
Serial.printf("\n");
   b4510:	f004 fbbc 	bl	b8c8c <_Z16_fetch_usbserialv>
   b4514:	4924      	ldr	r1, [pc, #144]	; (b45a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
OnorOff=atoi((char*)data);
   b4516:	4c25      	ldr	r4, [pc, #148]	; (b45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4518:	4f25      	ldr	r7, [pc, #148]	; (b45b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
   b451a:	4e26      	ldr	r6, [pc, #152]	; (b45b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
Serial.printf("\n");
   b451c:	f7ff fdd4 	bl	b40c8 <_ZN5Print6printfEPKcz>
Serial.printf("Message: %s\n",(char*)data);
   b4520:	f004 fbb4 	bl	b8c8c <_Z16_fetch_usbserialv>
   b4524:	462a      	mov	r2, r5
   b4526:	4924      	ldr	r1, [pc, #144]	; (b45b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
   b4528:	f7ff fdce 	bl	b40c8 <_ZN5Print6printfEPKcz>
OnorOff=atoi((char*)data);
   b452c:	4628      	mov	r0, r5
   b452e:	f005 fa67 	bl	b9a00 <atoi>
   b4532:	2800      	cmp	r0, #0
   b4534:	bf14      	ite	ne
   b4536:	2301      	movne	r3, #1
   b4538:	2300      	moveq	r3, #0
   b453a:	4d20      	ldr	r5, [pc, #128]	; (b45bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
   b453c:	7023      	strb	r3, [r4, #0]
if (OnorOff==1){
   b453e:	d10e      	bne.n	b455e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x102>
  digitalWrite(D10,LOW);
   b4540:	2100      	movs	r1, #0
   b4542:	200a      	movs	r0, #10
   b4544:	f005 f883 	bl	b964e <digitalWrite>
  pixel.clear();     
   b4548:	481d      	ldr	r0, [pc, #116]	; (b45c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b454a:	f000 fb66 	bl	b4c1a <_ZN17Adafruit_NeoPixel5clearEv>
  pixelFill(startPixel,endPixel,color2);
   b454e:	683a      	ldr	r2, [r7, #0]
   b4550:	6831      	ldr	r1, [r6, #0]
   b4552:	6828      	ldr	r0, [r5, #0]
}
   b4554:	b012      	add	sp, #72	; 0x48
   b4556:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pixelFill(startPixel,endPixel,color2);
   b455a:	f7ff bf57 	b.w	b440c <_Z9pixelFilliii>
  digitalWrite(D10,HIGH);
   b455e:	2101      	movs	r1, #1
   b4560:	200a      	movs	r0, #10
   b4562:	f005 f874 	bl	b964e <digitalWrite>
  Serial.printf("Turn on button%i\n",OnorOff);
   b4566:	f004 fb91 	bl	b8c8c <_Z16_fetch_usbserialv>
   b456a:	7822      	ldrb	r2, [r4, #0]
   b456c:	4915      	ldr	r1, [pc, #84]	; (b45c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>)
   b456e:	f7ff fdab 	bl	b40c8 <_ZN5Print6printfEPKcz>
  pixel.clear();
   b4572:	4813      	ldr	r0, [pc, #76]	; (b45c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b4574:	f000 fb51 	bl	b4c1a <_ZN17Adafruit_NeoPixel5clearEv>
  pixelFill(startPixel,endPixel,color1);
   b4578:	4b13      	ldr	r3, [pc, #76]	; (b45c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x16c>)
   b457a:	6831      	ldr	r1, [r6, #0]
   b457c:	681a      	ldr	r2, [r3, #0]
   b457e:	6828      	ldr	r0, [r5, #0]
   b4580:	f7ff ff44 	bl	b440c <_Z9pixelFilliii>
  pixelFill(startPixel,endPixel,color2);
   b4584:	683a      	ldr	r2, [r7, #0]
   b4586:	6831      	ldr	r1, [r6, #0]
   b4588:	6828      	ldr	r0, [r5, #0]
   b458a:	f7ff ff3f 	bl	b440c <_Z9pixelFilliii>
  pixel.show();
   b458e:	480c      	ldr	r0, [pc, #48]	; (b45c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b4590:	f000 f954 	bl	b483c <_ZN17Adafruit_NeoPixel4showEv>
if(OnorOff==0){
   b4594:	7823      	ldrb	r3, [r4, #0]
   b4596:	2b00      	cmp	r3, #0
   b4598:	d0d2      	beq.n	b4540 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe4>
}
   b459a:	b012      	add	sp, #72	; 0x48
   b459c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b45a0:	000b9dfe 	.word	0x000b9dfe
   b45a4:	000b9e30 	.word	0x000b9e30
   b45a8:	000b9dfc 	.word	0x000b9dfc
   b45ac:	2003de2c 	.word	0x2003de2c
   b45b0:	2003d9a8 	.word	0x2003d9a8
   b45b4:	2003d9ac 	.word	0x2003d9ac
   b45b8:	000b9e35 	.word	0x000b9e35
   b45bc:	2003e69c 	.word	0x2003e69c
   b45c0:	2003e0a8 	.word	0x2003e0a8
   b45c4:	000b9e42 	.word	0x000b9e42
   b45c8:	2003d9a4 	.word	0x2003d9a4
   b45cc:	2003dedc 	.word	0x2003dedc

000b45d0 <_GLOBAL__sub_I_txBuf>:
        mqtt.disconnect();
      }
      last = millis();
  }
  return pingStatus;
   b45d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b45d4:	4d57      	ldr	r5, [pc, #348]	; (b4734 <_GLOBAL__sub_I_txBuf+0x164>)
   b45d6:	b099      	sub	sp, #100	; 0x64
   b45d8:	2428      	movs	r4, #40	; 0x28


class BleScanResult {
public:
    BleScanResult()
            : rssi_(BLE_RSSI_INVALID) {
   b45da:	267f      	movs	r6, #127	; 0x7f
   b45dc:	4628      	mov	r0, r5
   b45de:	f002 fa57 	bl	b6a90 <_ZN8particle10BleAddressC1Ev>
   b45e2:	f105 0008 	add.w	r0, r5, #8
   b45e6:	f003 f9e6 	bl	b79b6 <_ZN8particle18BleAdvertisingDataC1Ev>
   b45ea:	f105 0014 	add.w	r0, r5, #20
   b45ee:	f003 f9e2 	bl	b79b6 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_MAX];
   b45f2:	3c01      	subs	r4, #1
   b45f4:	f885 6020 	strb.w	r6, [r5, #32]
   b45f8:	f105 0524 	add.w	r5, r5, #36	; 0x24
   b45fc:	d1ee      	bne.n	b45dc <_GLOBAL__sub_I_txBuf+0xc>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b45fe:	494e      	ldr	r1, [pc, #312]	; (b4738 <_GLOBAL__sub_I_txBuf+0x168>)
   b4600:	484e      	ldr	r0, [pc, #312]	; (b473c <_GLOBAL__sub_I_txBuf+0x16c>)
   b4602:	4d4f      	ldr	r5, [pc, #316]	; (b4740 <_GLOBAL__sub_I_txBuf+0x170>)
   b4604:	f8df 9134 	ldr.w	r9, [pc, #308]	; b473c <_GLOBAL__sub_I_txBuf+0x16c>
   b4608:	f002 fbaa 	bl	b6d60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b460c:	494d      	ldr	r1, [pc, #308]	; (b4744 <_GLOBAL__sub_I_txBuf+0x174>)
   b460e:	484e      	ldr	r0, [pc, #312]	; (b4748 <_GLOBAL__sub_I_txBuf+0x178>)
   b4610:	f002 fba6 	bl	b6d60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4614:	494d      	ldr	r1, [pc, #308]	; (b474c <_GLOBAL__sub_I_txBuf+0x17c>)
   b4616:	484a      	ldr	r0, [pc, #296]	; (b4740 <_GLOBAL__sub_I_txBuf+0x170>)
   b4618:	f002 fba2 	bl	b6d60 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b461c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b461e:	f10d 0b10 	add.w	fp, sp, #16
   b4622:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
   b4626:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b462a:	682f      	ldr	r7, [r5, #0]
   b462c:	f8cb 7000 	str.w	r7, [fp]
   b4630:	f10d 0824 	add.w	r8, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b4634:	ad04      	add	r5, sp, #16
   b4636:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   b463a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b463c:	ae0e      	add	r6, sp, #56	; 0x38
   b463e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4640:	46ca      	mov	sl, r9
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4642:	f8df c144 	ldr.w	ip, [pc, #324]	; b4788 <_GLOBAL__sub_I_txBuf+0x1b8>
   b4646:	f85a e910 	ldr.w	lr, [sl], #-16
   b464a:	f8c8 e000 	str.w	lr, [r8]
   b464e:	6037      	str	r7, [r6, #0]
        BleUuid sUuid(svcUuid);
   b4650:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4652:	e9cc 4400 	strd	r4, r4, [ip]
   b4656:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4658:	ad13      	add	r5, sp, #76	; 0x4c
   b465a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b465c:	af13      	add	r7, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
   b465e:	f8c5 e000 	str.w	lr, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4662:	ab0e      	add	r3, sp, #56	; 0x38
   b4664:	4660      	mov	r0, ip
   b4666:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b466a:	4939      	ldr	r1, [pc, #228]	; (b4750 <_GLOBAL__sub_I_txBuf+0x180>)
   b466c:	9700      	str	r7, [sp, #0]
   b466e:	f04f 0210 	mov.w	r2, #16
   b4672:	f003 fd33 	bl	b80dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b4676:	f8df c0d0 	ldr.w	ip, [pc, #208]	; b4748 <_GLOBAL__sub_I_txBuf+0x178>
   b467a:	f8d9 9000 	ldr.w	r9, [r9]
   b467e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4682:	f10d 0e10 	add.w	lr, sp, #16
   b4686:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b468a:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b468e:	f8dc e000 	ldr.w	lr, [ip]
   b4692:	f8cb e000 	str.w	lr, [fp]
   b4696:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b469a:	f10d 0a10 	add.w	sl, sp, #16
   b469e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b46a2:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b46a6:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   b46aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b46ae:	f8c8 9000 	str.w	r9, [r8]
      : _M_ptr(0), _M_refcount()
   b46b2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b478c <_GLOBAL__sub_I_txBuf+0x1bc>
   b46b6:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b46ba:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b46be:	e9c8 4400 	strd	r4, r4, [r8]
   b46c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b46c6:	463e      	mov	r6, r7
   b46c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b46ca:	4b22      	ldr	r3, [pc, #136]	; (b4754 <_GLOBAL__sub_I_txBuf+0x184>)
        BleUuid sUuid(svcUuid);
   b46cc:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b46d0:	4921      	ldr	r1, [pc, #132]	; (b4758 <_GLOBAL__sub_I_txBuf+0x188>)
   b46d2:	9402      	str	r4, [sp, #8]
   b46d4:	e9cd 7300 	strd	r7, r3, [sp]
   b46d8:	f04f 0204 	mov.w	r2, #4
   b46dc:	ab0e      	add	r3, sp, #56	; 0x38
   b46de:	4640      	mov	r0, r8
   b46e0:	f003 fcfc 	bl	b80dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
BleAdvertisingData data;
   b46e4:	481d      	ldr	r0, [pc, #116]	; (b475c <_GLOBAL__sub_I_txBuf+0x18c>)
TCPClient TheClient;
   b46e6:	4e1e      	ldr	r6, [pc, #120]	; (b4760 <_GLOBAL__sub_I_txBuf+0x190>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b46e8:	4d1e      	ldr	r5, [pc, #120]	; (b4764 <_GLOBAL__sub_I_txBuf+0x194>)
BleAdvertisingData data;
   b46ea:	f003 f964 	bl	b79b6 <_ZN8particle18BleAdvertisingDataC1Ev>
Adafruit_NeoPixel pixel(PIXELNUMBER,PIXELPIN,WS2812B);
   b46ee:	2302      	movs	r3, #2
   b46f0:	2210      	movs	r2, #16
   b46f2:	210f      	movs	r1, #15
   b46f4:	481c      	ldr	r0, [pc, #112]	; (b4768 <_GLOBAL__sub_I_txBuf+0x198>)
   b46f6:	f000 f88f 	bl	b4818 <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_SSD1306 display(OLED_RESET);
   b46fa:	2104      	movs	r1, #4
   b46fc:	481b      	ldr	r0, [pc, #108]	; (b476c <_GLOBAL__sub_I_txBuf+0x19c>)
   b46fe:	f000 fc5b 	bl	b4fb8 <_ZN16Adafruit_SSD1306C1Ea>
TCPClient TheClient;
   b4702:	4630      	mov	r0, r6
   b4704:	f004 fe50 	bl	b93a8 <_ZN9TCPClientC1Ev>
   b4708:	4b19      	ldr	r3, [pc, #100]	; (b4770 <_GLOBAL__sub_I_txBuf+0x1a0>)
   b470a:	9300      	str	r3, [sp, #0]
   b470c:	4919      	ldr	r1, [pc, #100]	; (b4774 <_GLOBAL__sub_I_txBuf+0x1a4>)
   b470e:	4b1a      	ldr	r3, [pc, #104]	; (b4778 <_GLOBAL__sub_I_txBuf+0x1a8>)
   b4710:	f240 725b 	movw	r2, #1883	; 0x75b
   b4714:	4628      	mov	r0, r5
   b4716:	f001 f8e1 	bl	b58dc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b471a:	4b18      	ldr	r3, [pc, #96]	; (b477c <_GLOBAL__sub_I_txBuf+0x1ac>)
Adafruit_MQTT_Publish rssiFeed=Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/rssi");
   b471c:	4a18      	ldr	r2, [pc, #96]	; (b4780 <_GLOBAL__sub_I_txBuf+0x1b0>)
   b471e:	4819      	ldr	r0, [pc, #100]	; (b4784 <_GLOBAL__sub_I_txBuf+0x1b4>)
   b4720:	602b      	str	r3, [r5, #0]
   b4722:	4629      	mov	r1, r5
   b4724:	4623      	mov	r3, r4
   b4726:	f8c5 60d0 	str.w	r6, [r5, #208]	; 0xd0
   b472a:	b019      	add	sp, #100	; 0x64
   b472c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Adafruit_MQTT_Publish rssiFeed=Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/rssi");
   b4730:	f001 bac8 	b.w	b5cc4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   b4734:	2003e0fc 	.word	0x2003e0fc
   b4738:	000b9e54 	.word	0x000b9e54
   b473c:	2003de4c 	.word	0x2003de4c
   b4740:	2003de74 	.word	0x2003de74
   b4744:	000b9e79 	.word	0x000b9e79
   b4748:	2003de60 	.word	0x2003de60
   b474c:	000b9e9e 	.word	0x000b9e9e
   b4750:	000b9ec3 	.word	0x000b9ec3
   b4754:	000b445d 	.word	0x000b445d
   b4758:	000b9ec6 	.word	0x000b9ec6
   b475c:	2003dea8 	.word	0x2003dea8
   b4760:	2003de30 	.word	0x2003de30
   b4764:	2003dfd4 	.word	0x2003dfd4
   b4768:	2003e0a8 	.word	0x2003e0a8
   b476c:	2003deb4 	.word	0x2003deb4
   b4770:	000b9ee6 	.word	0x000b9ee6
   b4774:	000b9ed6 	.word	0x000b9ed6
   b4778:	000b9ec9 	.word	0x000b9ec9
   b477c:	000ba8ec 	.word	0x000ba8ec
   b4780:	000b9f07 	.word	0x000b9f07
   b4784:	2003e0e8 	.word	0x2003e0e8
   b4788:	2003e6a0 	.word	0x2003e6a0
   b478c:	2003e0f4 	.word	0x2003e0f4

000b4790 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4790:	b538      	push	{r3, r4, r5, lr}
   b4792:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4794:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4796:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4798:	b108      	cbz	r0, b479e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b479a:	f001 fda5 	bl	b62e8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b479e:	79a3      	ldrb	r3, [r4, #6]
   b47a0:	2b06      	cmp	r3, #6
   b47a2:	bf0c      	ite	eq
   b47a4:	2004      	moveq	r0, #4
   b47a6:	2003      	movne	r0, #3
   b47a8:	fb10 f005 	smulbb	r0, r0, r5
   b47ac:	b280      	uxth	r0, r0
   b47ae:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b47b0:	f001 fd92 	bl	b62d8 <malloc>
   b47b4:	60e0      	str	r0, [r4, #12]
   b47b6:	b128      	cbz	r0, b47c4 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b47b8:	88a2      	ldrh	r2, [r4, #4]
   b47ba:	2100      	movs	r1, #0
   b47bc:	f005 f970 	bl	b9aa0 <memset>
    numLEDs = n;
   b47c0:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b47c2:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b47c4:	80a0      	strh	r0, [r4, #4]
   b47c6:	8060      	strh	r0, [r4, #2]
}
   b47c8:	e7fb      	b.n	b47c2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b47ca <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b47ca:	b510      	push	{r4, lr}
   b47cc:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b47ce:	2101      	movs	r1, #1
   b47d0:	79c0      	ldrb	r0, [r0, #7]
   b47d2:	f004 ff2b 	bl	b962c <pinMode>
  digitalWrite(pin, LOW);
   b47d6:	79e0      	ldrb	r0, [r4, #7]
   b47d8:	2100      	movs	r1, #0
   b47da:	f004 ff38 	bl	b964e <digitalWrite>
  begun = true;
   b47de:	2301      	movs	r3, #1
   b47e0:	7023      	strb	r3, [r4, #0]
}
   b47e2:	bd10      	pop	{r4, pc}

000b47e4 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b47e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b47e6:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b47e8:	4605      	mov	r5, r0
   b47ea:	460c      	mov	r4, r1
    if (begun) {
   b47ec:	b11b      	cbz	r3, b47f6 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b47ee:	79c0      	ldrb	r0, [r0, #7]
   b47f0:	2100      	movs	r1, #0
   b47f2:	f004 ff1b 	bl	b962c <pinMode>
    }
    pin = p;
    if (begun) {
   b47f6:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b47f8:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b47fa:	b15b      	cbz	r3, b4814 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b47fc:	b2a0      	uxth	r0, r4
   b47fe:	2101      	movs	r1, #1
   b4800:	9001      	str	r0, [sp, #4]
   b4802:	f004 ff13 	bl	b962c <pinMode>
        digitalWrite(p, LOW);
   b4806:	9801      	ldr	r0, [sp, #4]
   b4808:	2100      	movs	r1, #0
    }
}
   b480a:	b003      	add	sp, #12
   b480c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4810:	f004 bf1d 	b.w	b964e <digitalWrite>
}
   b4814:	b003      	add	sp, #12
   b4816:	bd30      	pop	{r4, r5, pc}

000b4818 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4818:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b481a:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b481c:	4604      	mov	r4, r0
   b481e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4820:	7183      	strb	r3, [r0, #6]
   b4822:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4826:	7005      	strb	r5, [r0, #0]
   b4828:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b482a:	f7ff ffb1 	bl	b4790 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b482e:	4620      	mov	r0, r4
   b4830:	4631      	mov	r1, r6
   b4832:	f7ff ffd7 	bl	b47e4 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4836:	4620      	mov	r0, r4
   b4838:	bd70      	pop	{r4, r5, r6, pc}
	...

000b483c <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b483c:	68c3      	ldr	r3, [r0, #12]
   b483e:	2b00      	cmp	r3, #0
   b4840:	f000 81a4 	beq.w	b4b8c <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4848:	7983      	ldrb	r3, [r0, #6]
   b484a:	3b02      	subs	r3, #2
   b484c:	b2db      	uxtb	r3, r3
   b484e:	2b04      	cmp	r3, #4
   b4850:	bf9c      	itt	ls
   b4852:	4abf      	ldrls	r2, [pc, #764]	; (b4b50 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4854:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4858:	b085      	sub	sp, #20
   b485a:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b485c:	bf88      	it	hi
   b485e:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4860:	f001 fa8c 	bl	b5d7c <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4864:	692b      	ldr	r3, [r5, #16]
   b4866:	1ac0      	subs	r0, r0, r3
   b4868:	42a0      	cmp	r0, r4
   b486a:	d3f9      	bcc.n	b4860 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b486c:	4cb9      	ldr	r4, [pc, #740]	; (b4b54 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b486e:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4870:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4874:	b91b      	cbnz	r3, b487e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4876:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b487a:	2b00      	cmp	r3, #0
   b487c:	db7e      	blt.n	b497c <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b487e:	4cb6      	ldr	r4, [pc, #728]	; (b4b58 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4880:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4884:	b923      	cbnz	r3, b4890 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4886:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b488a:	2b00      	cmp	r3, #0
   b488c:	f2c0 816e 	blt.w	b4b6c <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4890:	4cb2      	ldr	r4, [pc, #712]	; (b4b5c <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4892:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4896:	2b00      	cmp	r3, #0
   b4898:	f000 8144 	beq.w	b4b24 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b489c:	79eb      	ldrb	r3, [r5, #7]
   b489e:	4ab0      	ldr	r2, [pc, #704]	; (b4b60 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b48a0:	4cb0      	ldr	r4, [pc, #704]	; (b4b64 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48a2:	6812      	ldr	r2, [r2, #0]
   b48a4:	0119      	lsls	r1, r3, #4
   b48a6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b48aa:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b48ac:	49ae      	ldr	r1, [pc, #696]	; (b4b68 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48ae:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b48b0:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b48b4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b48b8:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b48bc:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48be:	f003 031f 	and.w	r3, r3, #31
   b48c2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b48c6:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b48c8:	433a      	orrs	r2, r7
   b48ca:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b48cc:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b48ce:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b48d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48d6:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b48d8:	2900      	cmp	r1, #0
   b48da:	d044      	beq.n	b4966 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b48dc:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b48e0:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b48e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b48e6:	f818 cb01 	ldrb.w	ip, [r8], #1
   b48ea:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b48ec:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b48ee:	6863      	ldr	r3, [r4, #4]
   b48f0:	1a9b      	subs	r3, r3, r2
   b48f2:	2b46      	cmp	r3, #70	; 0x46
   b48f4:	d9fb      	bls.n	b48ee <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b48f6:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b48f8:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b48fc:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4900:	ea43 0307 	orr.w	r3, r3, r7
   b4904:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4908:	d02f      	beq.n	b496a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b490a:	6863      	ldr	r3, [r4, #4]
   b490c:	1a9b      	subs	r3, r3, r2
   b490e:	2b28      	cmp	r3, #40	; 0x28
   b4910:	d9fb      	bls.n	b490a <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4912:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4916:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4918:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b491c:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4920:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4924:	d1e3      	bne.n	b48ee <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4926:	88ab      	ldrh	r3, [r5, #4]
   b4928:	f10e 0e01 	add.w	lr, lr, #1
   b492c:	fa1f fe8e 	uxth.w	lr, lr
   b4930:	4573      	cmp	r3, lr
   b4932:	d8d8      	bhi.n	b48e6 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4934:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4938:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b493c:	6863      	ldr	r3, [r4, #4]
   b493e:	1a9b      	subs	r3, r3, r2
   b4940:	2b46      	cmp	r3, #70	; 0x46
   b4942:	d9fb      	bls.n	b493c <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4944:	6863      	ldr	r3, [r4, #4]
   b4946:	eba3 0909 	sub.w	r9, r3, r9
   b494a:	4589      	cmp	r9, r1
   b494c:	f0c0 80e4 	bcc.w	b4b18 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4950:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4954:	f001 fa0a 	bl	b5d6c <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4958:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b495a:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b495e:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4962:	2900      	cmp	r1, #0
   b4964:	d1ba      	bne.n	b48dc <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4966:	460a      	mov	r2, r1
   b4968:	e7e8      	b.n	b493c <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b496a:	6863      	ldr	r3, [r4, #4]
   b496c:	1a9b      	subs	r3, r3, r2
   b496e:	2b11      	cmp	r3, #17
   b4970:	d8cf      	bhi.n	b4912 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4972:	6863      	ldr	r3, [r4, #4]
   b4974:	1a9b      	subs	r3, r3, r2
   b4976:	2b11      	cmp	r3, #17
   b4978:	d9f7      	bls.n	b496a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b497a:	e7ca      	b.n	b4912 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b497c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4980:	2b00      	cmp	r3, #0
   b4982:	f6bf af7c 	bge.w	b487e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4986:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b498a:	2b00      	cmp	r3, #0
   b498c:	f6bf af77 	bge.w	b487e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4990:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4994:	2b00      	cmp	r3, #0
   b4996:	f6bf af72 	bge.w	b487e <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b499a:	0136      	lsls	r6, r6, #4
   b499c:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b499e:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b49a0:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b49a2:	f001 fc99 	bl	b62d8 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b49a6:	2800      	cmp	r0, #0
   b49a8:	f43f af78 	beq.w	b489c <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b49ac:	88ab      	ldrh	r3, [r5, #4]
   b49ae:	2b00      	cmp	r3, #0
   b49b0:	f000 80ed 	beq.w	b4b8e <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b49b4:	68ea      	ldr	r2, [r5, #12]
   b49b6:	3b01      	subs	r3, #1
   b49b8:	fa12 f783 	uxtah	r7, r2, r3
   b49bc:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b49c0:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49c2:	f248 0206 	movw	r2, #32774	; 0x8006
   b49c6:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b49ca:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49ce:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b49d2:	bf0c      	ite	eq
   b49d4:	4693      	moveq	fp, r2
   b49d6:	468b      	movne	fp, r1
   b49d8:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b49dc:	bf0c      	ite	eq
   b49de:	4616      	moveq	r6, r2
   b49e0:	460e      	movne	r6, r1
   b49e2:	f01c 0f20 	tst.w	ip, #32
   b49e6:	bf0c      	ite	eq
   b49e8:	4690      	moveq	r8, r2
   b49ea:	4688      	movne	r8, r1
        pos++;
   b49ec:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49f0:	f8cd 8008 	str.w	r8, [sp, #8]
   b49f4:	9601      	str	r6, [sp, #4]
        pos++;
   b49f6:	f103 0802 	add.w	r8, r3, #2
   b49fa:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49fe:	9e01      	ldr	r6, [sp, #4]
   b4a00:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4a04:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a08:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4a0c:	9e02      	ldr	r6, [sp, #8]
   b4a0e:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4a12:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a16:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4a1a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a1e:	bf0c      	ite	eq
   b4a20:	4693      	moveq	fp, r2
   b4a22:	468b      	movne	fp, r1
   b4a24:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4a28:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a2c:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4a30:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a34:	bf0c      	ite	eq
   b4a36:	4693      	moveq	fp, r2
   b4a38:	468b      	movne	fp, r1
   b4a3a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4a3e:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a42:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4a46:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a4a:	bf0c      	ite	eq
   b4a4c:	4693      	moveq	fp, r2
   b4a4e:	468b      	movne	fp, r1
   b4a50:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4a54:	f103 0a08 	add.w	sl, r3, #8
   b4a58:	f103 0806 	add.w	r8, r3, #6
   b4a5c:	3307      	adds	r3, #7
   b4a5e:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a60:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4a64:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a68:	bf0c      	ite	eq
   b4a6a:	4693      	moveq	fp, r2
   b4a6c:	468b      	movne	fp, r1
        pos++;
   b4a6e:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a72:	f01c 0f01 	tst.w	ip, #1
   b4a76:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4a7a:	bf15      	itete	ne
   b4a7c:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4a80:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4a84:	fa1f f38a 	uxthne.w	r3, sl
   b4a88:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4a8c:	4577      	cmp	r7, lr
   b4a8e:	d19c      	bne.n	b49ca <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a90:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a92:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a94:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a96:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a98:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a9a:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4a9c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4aa0:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4aa2:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4aa4:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4aa6:	4b2e      	ldr	r3, [pc, #184]	; (b4b60 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4aa8:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4aaa:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4aac:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4aae:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4ab0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4ab4:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4ab8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4abc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4ac0:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4ac4:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4ac8:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4acc:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4ad0:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ad4:	79eb      	ldrb	r3, [r5, #7]
   b4ad6:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4ada:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4adc:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ade:	5cfe      	ldrb	r6, [r7, r3]
   b4ae0:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4ae4:	f003 031f 	and.w	r3, r3, #31
   b4ae8:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4aec:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4af0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4af4:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4af8:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4afa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4afe:	2b00      	cmp	r3, #0
   b4b00:	d0fb      	beq.n	b4afa <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4b02:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4b04:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4b08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4b0c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4b10:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4b14:	f001 fbe8 	bl	b62e8 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4b18:	f001 f930 	bl	b5d7c <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4b1c:	6128      	str	r0, [r5, #16]
}
   b4b1e:	b005      	add	sp, #20
   b4b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b24:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4b28:	2b00      	cmp	r3, #0
   b4b2a:	f6bf aeb7 	bge.w	b489c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b2e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b32:	2b00      	cmp	r3, #0
   b4b34:	f6bf aeb2 	bge.w	b489c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b38:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b3c:	2b00      	cmp	r3, #0
   b4b3e:	f6bf aead 	bge.w	b489c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4b42:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b46:	2b00      	cmp	r3, #0
   b4b48:	f6bf aea8 	bge.w	b489c <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4b4c:	e725      	b.n	b499a <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4b4e:	bf00      	nop
   b4b50:	000ba364 	.word	0x000ba364
   b4b54:	4001c000 	.word	0x4001c000
   b4b58:	40021000 	.word	0x40021000
   b4b5c:	40022000 	.word	0x40022000
   b4b60:	2003e6a8 	.word	0x2003e6a8
   b4b64:	e0001000 	.word	0xe0001000
   b4b68:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b6c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b70:	2b00      	cmp	r3, #0
   b4b72:	f6bf ae8d 	bge.w	b4890 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b76:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b7a:	2b00      	cmp	r3, #0
   b4b7c:	f6bf ae88 	bge.w	b4890 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4b80:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b84:	2b00      	cmp	r3, #0
   b4b86:	f6bf ae83 	bge.w	b4890 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4b8a:	e706      	b.n	b499a <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4b8c:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4b8e:	2304      	movs	r3, #4
   b4b90:	2102      	movs	r1, #2
   b4b92:	e783      	b.n	b4a9c <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4b94 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4b94:	8843      	ldrh	r3, [r0, #2]
   b4b96:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4b9a:	d92d      	bls.n	b4bf8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4b9c:	7a06      	ldrb	r6, [r0, #8]
   b4b9e:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4ba2:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4ba6:	b2d5      	uxtb	r5, r2
   b4ba8:	b13e      	cbz	r6, b4bba <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4baa:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4bac:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4bae:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4bb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4bb4:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4bb8:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4bba:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4bbe:	68c7      	ldr	r7, [r0, #12]
   b4bc0:	f1bc 0f06 	cmp.w	ip, #6
   b4bc4:	bf0c      	ite	eq
   b4bc6:	2604      	moveq	r6, #4
   b4bc8:	2603      	movne	r6, #3
   b4bca:	434e      	muls	r6, r1
   b4bcc:	f1ac 0c02 	sub.w	ip, ip, #2
   b4bd0:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4bd2:	f1bc 0f06 	cmp.w	ip, #6
   b4bd6:	d81d      	bhi.n	b4c14 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4bd8:	e8df f00c 	tbb	[pc, ip]
   b4bdc:	04081c04 	.word	0x04081c04
   b4be0:	040f      	.short	0x040f
   b4be2:	04          	.byte	0x04
   b4be3:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4be4:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4be6:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4be8:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4bea:	e005      	b.n	b4bf8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4bec:	2bfe      	cmp	r3, #254	; 0xfe
   b4bee:	bf28      	it	cs
   b4bf0:	23fe      	movcs	r3, #254	; 0xfe
   b4bf2:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4bf4:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4bf6:	708c      	strb	r4, [r1, #2]
}
   b4bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4bfa:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4bfc:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4bfe:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c00:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4c02:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c04:	b913      	cbnz	r3, b4c0c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4c06:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c08:	70ca      	strb	r2, [r1, #3]
        } break;
   b4c0a:	e7f5      	b.n	b4bf8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c0c:	435a      	muls	r2, r3
   b4c0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4c12:	e7f9      	b.n	b4c08 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4c14:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4c16:	704c      	strb	r4, [r1, #1]
   b4c18:	e7e6      	b.n	b4be8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4c1a <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b4c1a:	8882      	ldrh	r2, [r0, #4]
   b4c1c:	68c0      	ldr	r0, [r0, #12]
   b4c1e:	2100      	movs	r1, #0
   b4c20:	f004 bf3e 	b.w	b9aa0 <memset>

000b4c24 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b4c24:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4c26:	f001 f871 	bl	b5d0c <HAL_Pin_Map>
   b4c2a:	4b01      	ldr	r3, [pc, #4]	; (b4c30 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4c2c:	6018      	str	r0, [r3, #0]
}
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	2003e6a8 	.word	0x2003e6a8

000b4c34 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4c34:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4c36:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4c38:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4c3c:	2d02      	cmp	r5, #2
   b4c3e:	d069      	beq.n	b4d14 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4c40:	2d03      	cmp	r5, #3
   b4c42:	f000 8099 	beq.w	b4d78 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4c46:	2d01      	cmp	r5, #1
   b4c48:	d16c      	bne.n	b4d24 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4c4a:	8905      	ldrh	r5, [r0, #8]
   b4c4c:	43d2      	mvns	r2, r2
   b4c4e:	442a      	add	r2, r5
   b4c50:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4c52:	2a00      	cmp	r2, #0
   b4c54:	db5d      	blt.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4c56:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4c5a:	4295      	cmp	r5, r2
   b4c5c:	dd59      	ble.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4c5e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4c60:	bfbe      	ittt	lt
   b4c62:	185b      	addlt	r3, r3, r1
   b4c64:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4c66:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4c68:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4c6c:	18cd      	adds	r5, r1, r3
   b4c6e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4c70:	bfc4      	itt	gt
   b4c72:	1a43      	subgt	r3, r0, r1
   b4c74:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4c76:	2b00      	cmp	r3, #0
   b4c78:	dd4b      	ble.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4c7a:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4c7e:	f8df c120 	ldr.w	ip, [pc, #288]	; b4da0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4c82:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4c86:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4c8a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4c8c:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4c90:	d01a      	beq.n	b4cc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4c92:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4c96:	4e40      	ldr	r6, [pc, #256]	; (b4d98 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4c98:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4c9a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4c9c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4c9e:	bf3f      	itttt	cc
   b4ca0:	eba5 0e03 	subcc.w	lr, r5, r3
   b4ca4:	26ff      	movcc	r6, #255	; 0xff
   b4ca6:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4caa:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4cac:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4cb0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4cb2:	bf0c      	ite	eq
   b4cb4:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4cb6:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4cb8:	42ab      	cmp	r3, r5
   b4cba:	f80c 6002 	strb.w	r6, [ip, r2]
   b4cbe:	d328      	bcc.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4cc0:	3908      	subs	r1, #8
   b4cc2:	440b      	add	r3, r1
   b4cc4:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4cc6:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4cc8:	2b07      	cmp	r3, #7
   b4cca:	d919      	bls.n	b4d00 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4ccc:	2c01      	cmp	r4, #1
   b4cce:	f04f 35ff 	mov.w	r5, #4294967295
   b4cd2:	bf18      	it	ne
   b4cd4:	2500      	movne	r5, #0
   b4cd6:	b2ed      	uxtb	r5, r5
   b4cd8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4cdc:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4cde:	3a08      	subs	r2, #8
   b4ce0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4ce2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4ce4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4ce8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4cec:	d8f7      	bhi.n	b4cde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4cee:	f1a3 0208 	sub.w	r2, r3, #8
   b4cf2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4cf6:	3201      	adds	r2, #1
   b4cf8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4cfc:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4d00:	b13b      	cbz	r3, b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4d02:	4a26      	ldr	r2, [pc, #152]	; (b4d9c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4d04:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4d06:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4d08:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4d0a:	bf0c      	ite	eq
   b4d0c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4d0e:	4393      	bicne	r3, r2
   b4d10:	7003      	strb	r3, [r0, #0]
}
   b4d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4d14:	8945      	ldrh	r5, [r0, #10]
   b4d16:	43d2      	mvns	r2, r2
   b4d18:	442a      	add	r2, r5
      x -= (w-1);
   b4d1a:	18cd      	adds	r5, r1, r3
   b4d1c:	8901      	ldrh	r1, [r0, #8]
   b4d1e:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4d20:	b212      	sxth	r2, r2
      x -= (w-1);
   b4d22:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4d24:	2a00      	cmp	r2, #0
   b4d26:	dbf4      	blt.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4d28:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4d2c:	4295      	cmp	r5, r2
   b4d2e:	ddf0      	ble.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4d30:	2900      	cmp	r1, #0
    w += x;
   b4d32:	bfbe      	ittt	lt
   b4d34:	185b      	addlt	r3, r3, r1
   b4d36:	b21b      	sxthlt	r3, r3
    x = 0;
   b4d38:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4d3a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4d3e:	18ce      	adds	r6, r1, r3
   b4d40:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4d42:	bfc4      	itt	gt
   b4d44:	1a6b      	subgt	r3, r5, r1
   b4d46:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4d48:	2b00      	cmp	r3, #0
   b4d4a:	dde2      	ble.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4d4c:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4d4e:	2580      	movs	r5, #128	; 0x80
   b4d50:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4d54:	4812      	ldr	r0, [pc, #72]	; (b4da0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4d56:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4d58:	f002 0007 	and.w	r0, r2, #7
   b4d5c:	2201      	movs	r2, #1
   b4d5e:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4d60:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4d62:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4d64:	440b      	add	r3, r1
   b4d66:	d10c      	bne.n	b4d82 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4d68:	428b      	cmp	r3, r1
   b4d6a:	d0d2      	beq.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4d6c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4d70:	4310      	orrs	r0, r2
   b4d72:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4d76:	e7f7      	b.n	b4d68 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4d78:	18cd      	adds	r5, r1, r3
   b4d7a:	8941      	ldrh	r1, [r0, #10]
   b4d7c:	1b49      	subs	r1, r1, r5
   b4d7e:	b209      	sxth	r1, r1
      break;
   b4d80:	e767      	b.n	b4c52 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4d82:	43d2      	mvns	r2, r2
   b4d84:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4d86:	428b      	cmp	r3, r1
   b4d88:	d0c3      	beq.n	b4d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4d8a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4d8e:	4010      	ands	r0, r2
   b4d90:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4d94:	e7f7      	b.n	b4d86 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4d96:	bf00      	nop
   b4d98:	2003d9b8 	.word	0x2003d9b8
   b4d9c:	2003d9b0 	.word	0x2003d9b0
   b4da0:	2003d9c0 	.word	0x2003d9c0

000b4da4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4da4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4da6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4da8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4dac:	2d02      	cmp	r5, #2
   b4dae:	d034      	beq.n	b4e1a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4db0:	2d03      	cmp	r5, #3
   b4db2:	f000 809b 	beq.w	b4eec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4db6:	2d01      	cmp	r5, #1
   b4db8:	d137      	bne.n	b4e2a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4dba:	18d5      	adds	r5, r2, r3
   b4dbc:	8902      	ldrh	r2, [r0, #8]
   b4dbe:	1b52      	subs	r2, r2, r5
   b4dc0:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4dc2:	2900      	cmp	r1, #0
   b4dc4:	f2c0 8091 	blt.w	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4dc8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4dcc:	428d      	cmp	r5, r1
   b4dce:	f340 808c 	ble.w	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4dd2:	2a00      	cmp	r2, #0
    w += x;
   b4dd4:	bfbe      	ittt	lt
   b4dd6:	189b      	addlt	r3, r3, r2
   b4dd8:	b21b      	sxthlt	r3, r3
    x = 0;
   b4dda:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4ddc:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4de0:	18d6      	adds	r6, r2, r3
   b4de2:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4de4:	bfc4      	itt	gt
   b4de6:	1aab      	subgt	r3, r5, r2
   b4de8:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4dea:	2b00      	cmp	r3, #0
   b4dec:	dd7d      	ble.n	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4dee:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4df0:	2580      	movs	r5, #128	; 0x80
   b4df2:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4df6:	4845      	ldr	r0, [pc, #276]	; (b4f0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4df8:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4dfa:	f001 0007 	and.w	r0, r1, #7
   b4dfe:	2101      	movs	r1, #1
   b4e00:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4e02:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4e04:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4e06:	4413      	add	r3, r2
   b4e08:	d175      	bne.n	b4ef6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4e0a:	429a      	cmp	r2, r3
   b4e0c:	d06d      	beq.n	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4e0e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4e12:	4308      	orrs	r0, r1
   b4e14:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4e18:	e7f7      	b.n	b4e0a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4e1a:	8905      	ldrh	r5, [r0, #8]
   b4e1c:	43c9      	mvns	r1, r1
   b4e1e:	4429      	add	r1, r5
      y -= (h-1);
   b4e20:	18d5      	adds	r5, r2, r3
   b4e22:	8942      	ldrh	r2, [r0, #10]
   b4e24:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4e26:	b209      	sxth	r1, r1
      y -= (h-1);
   b4e28:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4e2a:	2900      	cmp	r1, #0
   b4e2c:	db5d      	blt.n	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4e2e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4e32:	428d      	cmp	r5, r1
   b4e34:	dd59      	ble.n	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4e36:	2a00      	cmp	r2, #0
    __h += __y;
   b4e38:	bfbe      	ittt	lt
   b4e3a:	189b      	addlt	r3, r3, r2
   b4e3c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4e3e:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4e40:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4e44:	18d5      	adds	r5, r2, r3
   b4e46:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4e48:	bfc4      	itt	gt
   b4e4a:	1a83      	subgt	r3, r0, r2
   b4e4c:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4e4e:	2b00      	cmp	r3, #0
   b4e50:	dd4b      	ble.n	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4e52:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4e56:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4f0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4e5a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4e5e:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4e62:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4e64:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4e68:	d01a      	beq.n	b4ea0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4e6a:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4e6e:	4e28      	ldr	r6, [pc, #160]	; (b4f10 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4e70:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4e72:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4e74:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4e76:	bf3f      	itttt	cc
   b4e78:	eba5 0e03 	subcc.w	lr, r5, r3
   b4e7c:	26ff      	movcc	r6, #255	; 0xff
   b4e7e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4e82:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4e84:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4e88:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e8a:	bf0c      	ite	eq
   b4e8c:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4e8e:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4e90:	42ab      	cmp	r3, r5
   b4e92:	f80c 6001 	strb.w	r6, [ip, r1]
   b4e96:	d328      	bcc.n	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4e98:	3a08      	subs	r2, #8
   b4e9a:	4413      	add	r3, r2
   b4e9c:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4e9e:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4ea0:	2b07      	cmp	r3, #7
   b4ea2:	d919      	bls.n	b4ed8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4ea4:	2c01      	cmp	r4, #1
   b4ea6:	f04f 35ff 	mov.w	r5, #4294967295
   b4eaa:	bf18      	it	ne
   b4eac:	2500      	movne	r5, #0
   b4eae:	b2ed      	uxtb	r5, r5
   b4eb0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4eb4:	461a      	mov	r2, r3
      h -= 8;
   b4eb6:	3a08      	subs	r2, #8
   b4eb8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4eba:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4ebc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4ec0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4ec4:	d8f7      	bhi.n	b4eb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4ec6:	f1a3 0208 	sub.w	r2, r3, #8
   b4eca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4ece:	3201      	adds	r2, #1
   b4ed0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4ed4:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4ed8:	b13b      	cbz	r3, b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4eda:	4a0e      	ldr	r2, [pc, #56]	; (b4f14 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4edc:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4ede:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4ee0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4ee2:	bf0c      	ite	eq
   b4ee4:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4ee6:	4393      	bicne	r3, r2
   b4ee8:	7003      	strb	r3, [r0, #0]
}
   b4eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4eec:	8945      	ldrh	r5, [r0, #10]
   b4eee:	43c9      	mvns	r1, r1
   b4ef0:	4429      	add	r1, r5
   b4ef2:	b209      	sxth	r1, r1
      break;
   b4ef4:	e765      	b.n	b4dc2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4ef6:	43c9      	mvns	r1, r1
   b4ef8:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4efa:	429a      	cmp	r2, r3
   b4efc:	d0f5      	beq.n	b4eea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4efe:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4f02:	4008      	ands	r0, r1
   b4f04:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4f08:	e7f7      	b.n	b4efa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4f0a:	bf00      	nop
   b4f0c:	2003d9c0 	.word	0x2003d9c0
   b4f10:	2003d9b8 	.word	0x2003d9b8
   b4f14:	2003d9b0 	.word	0x2003d9b0

000b4f18 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4f18:	4770      	bx	lr
	...

000b4f1c <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4f1e:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4f20:	4606      	mov	r6, r0
   b4f22:	4614      	mov	r4, r2
   b4f24:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4f26:	db2d      	blt.n	b4f84 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4f28:	f000 fc16 	bl	b5758 <_ZN12Adafruit_GFX5widthEv>
   b4f2c:	42a8      	cmp	r0, r5
   b4f2e:	dd29      	ble.n	b4f84 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4f30:	2c00      	cmp	r4, #0
   b4f32:	db27      	blt.n	b4f84 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4f34:	4630      	mov	r0, r6
   b4f36:	f000 fc12 	bl	b575e <_ZN12Adafruit_GFX6heightEv>
   b4f3a:	42a0      	cmp	r0, r4
   b4f3c:	dd22      	ble.n	b4f84 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4f3e:	4630      	mov	r0, r6
   b4f40:	f000 fc08 	bl	b5754 <_ZN12Adafruit_GFX11getRotationEv>
   b4f44:	2802      	cmp	r0, #2
   b4f46:	d01e      	beq.n	b4f86 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4f48:	2803      	cmp	r0, #3
   b4f4a:	d025      	beq.n	b4f98 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4f4c:	2801      	cmp	r0, #1
   b4f4e:	d104      	bne.n	b4f5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4f50:	8933      	ldrh	r3, [r6, #8]
   b4f52:	43e2      	mvns	r2, r4
   b4f54:	441a      	add	r2, r3
    break;
   b4f56:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4f58:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4f5a:	2c00      	cmp	r4, #0
   b4f5c:	4622      	mov	r2, r4
   b4f5e:	bfb8      	it	lt
   b4f60:	1de2      	addlt	r2, r4, #7
   b4f62:	10d2      	asrs	r2, r2, #3
   b4f64:	2180      	movs	r1, #128	; 0x80
   b4f66:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4f6a:	490e      	ldr	r1, [pc, #56]	; (b4fa4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4f6c:	2201      	movs	r2, #1
   b4f6e:	f004 0407 	and.w	r4, r4, #7
   b4f72:	574b      	ldrsb	r3, [r1, r5]
   b4f74:	fa02 f404 	lsl.w	r4, r2, r4
   b4f78:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4f7a:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4f7c:	bf0c      	ite	eq
   b4f7e:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4f80:	43a3      	bicne	r3, r4
   b4f82:	554b      	strb	r3, [r1, r5]
}
   b4f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4f86:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4f88:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4f8a:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4f8c:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4f8e:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4f90:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4f92:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4f94:	b224      	sxth	r4, r4
    break;
   b4f96:	e7e0      	b.n	b4f5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4f98:	8973      	ldrh	r3, [r6, #10]
   b4f9a:	3b01      	subs	r3, #1
   b4f9c:	1b5b      	subs	r3, r3, r5
    break;
   b4f9e:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4fa0:	b21c      	sxth	r4, r3
    break;
   b4fa2:	e7da      	b.n	b4f5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4fa4:	2003d9c0 	.word	0x2003d9c0

000b4fa8 <_ZN16Adafruit_SSD1306D0Ev>:
   b4fa8:	b510      	push	{r4, lr}
   b4faa:	2124      	movs	r1, #36	; 0x24
   b4fac:	4604      	mov	r4, r0
   b4fae:	f7ff f874 	bl	b409a <_ZdlPvj>
   b4fb2:	4620      	mov	r0, r4
   b4fb4:	bd10      	pop	{r4, pc}
	...

000b4fb8 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4fb8:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4fba:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4fbc:	4604      	mov	r4, r0
   b4fbe:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4fc0:	2180      	movs	r1, #128	; 0x80
   b4fc2:	f000 faa7 	bl	b5514 <_ZN12Adafruit_GFXC1Ess>
   b4fc6:	4b06      	ldr	r3, [pc, #24]	; (b4fe0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4fc8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4fca:	23ff      	movs	r3, #255	; 0xff
   b4fcc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4fd0:	7763      	strb	r3, [r4, #29]
   b4fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4fd6:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4fd8:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4fdc:	4620      	mov	r0, r4
   b4fde:	bd38      	pop	{r3, r4, r5, pc}
   b4fe0:	000ba380 	.word	0x000ba380

000b4fe4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4fe4:	4802      	ldr	r0, [pc, #8]	; (b4ff0 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4fea:	2100      	movs	r1, #0
   b4fec:	f004 bd58 	b.w	b9aa0 <memset>
   b4ff0:	2003d9c0 	.word	0x2003d9c0

000b4ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4ff4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4ff6:	4c0b      	ldr	r4, [pc, #44]	; (b5024 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4ff8:	7821      	ldrb	r1, [r4, #0]
   b4ffa:	f3bf 8f5b 	dmb	ish
   b4ffe:	f011 0101 	ands.w	r1, r1, #1
   b5002:	d10b      	bne.n	b501c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5004:	4620      	mov	r0, r4
   b5006:	9101      	str	r1, [sp, #4]
   b5008:	f7ff f856 	bl	b40b8 <__cxa_guard_acquire>
   b500c:	9901      	ldr	r1, [sp, #4]
   b500e:	b128      	cbz	r0, b501c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5010:	4805      	ldr	r0, [pc, #20]	; (b5028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5012:	f001 f9e5 	bl	b63e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5016:	4620      	mov	r0, r4
   b5018:	f7ff f853 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b501c:	4802      	ldr	r0, [pc, #8]	; (b5028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b501e:	b002      	add	sp, #8
   b5020:	bd10      	pop	{r4, pc}
   b5022:	bf00      	nop
   b5024:	2003e6ac 	.word	0x2003e6ac
   b5028:	2003e6b0 	.word	0x2003e6b0

000b502c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b502c:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b502e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5032:	b143      	cbz	r3, b5046 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5034:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5036:	f7ff ffdd 	bl	b4ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b503a:	9901      	ldr	r1, [sp, #4]
}
   b503c:	b003      	add	sp, #12
   b503e:	f85d eb04 	ldr.w	lr, [sp], #4
   b5042:	f001 ba81 	b.w	b6548 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5046:	460b      	mov	r3, r1
   b5048:	7f81      	ldrb	r1, [r0, #30]
   b504a:	7f40      	ldrb	r0, [r0, #29]
   b504c:	2201      	movs	r2, #1
}
   b504e:	b003      	add	sp, #12
   b5050:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5054:	f004 bb14 	b.w	b9680 <shiftOut>

000b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5058:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b505a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b505e:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5060:	4604      	mov	r4, r0
   b5062:	460d      	mov	r5, r1
  if (sid != -1)
   b5064:	d01d      	beq.n	b50a2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b5066:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b506a:	2101      	movs	r1, #1
   b506c:	b280      	uxth	r0, r0
   b506e:	f004 faee 	bl	b964e <digitalWrite>
    digitalWrite(dc, LOW);
   b5072:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5076:	2100      	movs	r1, #0
   b5078:	b280      	uxth	r0, r0
   b507a:	f004 fae8 	bl	b964e <digitalWrite>
    digitalWrite(cs, LOW);
   b507e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5082:	2100      	movs	r1, #0
   b5084:	b280      	uxth	r0, r0
   b5086:	f004 fae2 	bl	b964e <digitalWrite>
    fastSPIwrite(c);
   b508a:	4629      	mov	r1, r5
   b508c:	4620      	mov	r0, r4
   b508e:	f7ff ffcd 	bl	b502c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5092:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5096:	2101      	movs	r1, #1
}
   b5098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b509c:	b280      	uxth	r0, r0
   b509e:	f004 bad6 	b.w	b964e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b50a2:	f004 fb6b 	bl	b977c <_Z19__fetch_global_Wirev>
   b50a6:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b50aa:	f003 febb 	bl	b8e24 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b50ae:	f004 fb65 	bl	b977c <_Z19__fetch_global_Wirev>
   b50b2:	6803      	ldr	r3, [r0, #0]
   b50b4:	2100      	movs	r1, #0
   b50b6:	689b      	ldr	r3, [r3, #8]
   b50b8:	4798      	blx	r3
    Wire.write(c);
   b50ba:	f004 fb5f 	bl	b977c <_Z19__fetch_global_Wirev>
   b50be:	6803      	ldr	r3, [r0, #0]
   b50c0:	4629      	mov	r1, r5
   b50c2:	689b      	ldr	r3, [r3, #8]
   b50c4:	4798      	blx	r3
    Wire.endTransmission();
   b50c6:	f004 fb59 	bl	b977c <_Z19__fetch_global_Wirev>
}
   b50ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b50ce:	f003 beb0 	b.w	b8e32 <_ZN7TwoWire15endTransmissionEv>
	...

000b50d4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b50d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b50d6:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b50d8:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b50da:	f7ff ffbd 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b50de:	2100      	movs	r1, #0
   b50e0:	4620      	mov	r0, r4
   b50e2:	f7ff ffb9 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b50e6:	217f      	movs	r1, #127	; 0x7f
   b50e8:	4620      	mov	r0, r4
   b50ea:	f7ff ffb5 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b50ee:	2122      	movs	r1, #34	; 0x22
   b50f0:	4620      	mov	r0, r4
   b50f2:	f7ff ffb1 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b50f6:	2100      	movs	r1, #0
   b50f8:	4620      	mov	r0, r4
   b50fa:	f7ff ffad 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b50fe:	2107      	movs	r1, #7
   b5100:	4620      	mov	r0, r4
   b5102:	f7ff ffa9 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5106:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b510a:	4f29      	ldr	r7, [pc, #164]	; (b51b0 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b510c:	3301      	adds	r3, #1
   b510e:	d02a      	beq.n	b5166 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5110:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5114:	2101      	movs	r1, #1
   b5116:	b280      	uxth	r0, r0
   b5118:	f004 fa99 	bl	b964e <digitalWrite>
    digitalWrite(dc, HIGH);
   b511c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5120:	2101      	movs	r1, #1
   b5122:	b280      	uxth	r0, r0
   b5124:	f004 fa93 	bl	b964e <digitalWrite>
    digitalWrite(cs, LOW);
   b5128:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b512c:	2100      	movs	r1, #0
   b512e:	b280      	uxth	r0, r0
   b5130:	f004 fa8d 	bl	b964e <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5134:	2001      	movs	r0, #1
   b5136:	f000 fe19 	bl	b5d6c <HAL_Delay_Microseconds>
   b513a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b513e:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5140:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5144:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5146:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5148:	f7ff ff70 	bl	b502c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b514c:	2d00      	cmp	r5, #0
   b514e:	d1f6      	bne.n	b513e <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5150:	2001      	movs	r0, #1
   b5152:	f000 fe0b 	bl	b5d6c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b5156:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b515a:	2101      	movs	r1, #1
}
   b515c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5160:	b280      	uxth	r0, r0
   b5162:	f004 ba74 	b.w	b964e <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5166:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5168:	f004 fb08 	bl	b977c <_Z19__fetch_global_Wirev>
   b516c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5170:	f003 fe58 	bl	b8e24 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5174:	f004 fb02 	bl	b977c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5178:	6803      	ldr	r3, [r0, #0]
   b517a:	2140      	movs	r1, #64	; 0x40
   b517c:	689b      	ldr	r3, [r3, #8]
   b517e:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5180:	f105 0610 	add.w	r6, r5, #16
   b5184:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b5186:	f004 faf9 	bl	b977c <_Z19__fetch_global_Wirev>
   b518a:	6803      	ldr	r3, [r0, #0]
   b518c:	5d79      	ldrb	r1, [r7, r5]
   b518e:	689b      	ldr	r3, [r3, #8]
   b5190:	4798      	blx	r3
		i++;
   b5192:	1c6b      	adds	r3, r5, #1
   b5194:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5196:	42ae      	cmp	r6, r5
   b5198:	d1f5      	bne.n	b5186 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b519a:	f004 faef 	bl	b977c <_Z19__fetch_global_Wirev>
   b519e:	f003 fe48 	bl	b8e32 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b51a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b51a6:	d100      	bne.n	b51aa <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b51a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b51aa:	4635      	mov	r5, r6
   b51ac:	e7dc      	b.n	b5168 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b51ae:	bf00      	nop
   b51b0:	2003d9c0 	.word	0x2003d9c0

000b51b4 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b51b4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b51b6:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b51ba:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b51bc:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b51be:	4604      	mov	r4, r0
   b51c0:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b51c2:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b51c4:	f000 80c9 	beq.w	b535a <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b51c8:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b51cc:	2101      	movs	r1, #1
   b51ce:	b280      	uxth	r0, r0
   b51d0:	f004 fa2c 	bl	b962c <pinMode>
    pinMode(cs, OUTPUT);
   b51d4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b51d8:	2101      	movs	r1, #1
   b51da:	b280      	uxth	r0, r0
   b51dc:	f004 fa26 	bl	b962c <pinMode>
    if (!hwSPI){
   b51e0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b51e4:	2b00      	cmp	r3, #0
   b51e6:	f000 80a6 	beq.w	b5336 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b51ea:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b51ee:	2101      	movs	r1, #1
   b51f0:	b280      	uxth	r0, r0
   b51f2:	f004 fa2c 	bl	b964e <digitalWrite>
        instance().setBitOrder(order);
   b51f6:	f7ff fefd 	bl	b4ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b51fa:	2101      	movs	r1, #1
   b51fc:	f001 f90e 	bl	b641c <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5200:	f7ff fef8 	bl	b4ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5204:	2110      	movs	r1, #16
   b5206:	f001 f979 	bl	b64fc <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b520a:	f7ff fef3 	bl	b4ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b520e:	2100      	movs	r1, #0
   b5210:	f001 f918 	bl	b6444 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5214:	f7ff feee 	bl	b4ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5218:	f001 f8ec 	bl	b63f4 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b521c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5220:	2101      	movs	r1, #1
   b5222:	b280      	uxth	r0, r0
   b5224:	f004 fa02 	bl	b962c <pinMode>
  digitalWrite(rst, HIGH);
   b5228:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b522c:	2101      	movs	r1, #1
   b522e:	b280      	uxth	r0, r0
   b5230:	f004 fa0d 	bl	b964e <digitalWrite>
  delay(1);
   b5234:	2001      	movs	r0, #1
   b5236:	f003 fb7d 	bl	b8934 <delay>
  digitalWrite(rst, LOW);
   b523a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b523e:	2100      	movs	r1, #0
   b5240:	b280      	uxth	r0, r0
   b5242:	f004 fa04 	bl	b964e <digitalWrite>
  delay(10);
   b5246:	200a      	movs	r0, #10
   b5248:	f003 fb74 	bl	b8934 <delay>
  digitalWrite(rst, HIGH);
   b524c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5250:	2101      	movs	r1, #1
   b5252:	b280      	uxth	r0, r0
   b5254:	f004 f9fb 	bl	b964e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5258:	4620      	mov	r0, r4
   b525a:	21ae      	movs	r1, #174	; 0xae
   b525c:	f7ff fefc 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5260:	4620      	mov	r0, r4
   b5262:	21d5      	movs	r1, #213	; 0xd5
   b5264:	f7ff fef8 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5268:	4620      	mov	r0, r4
   b526a:	2180      	movs	r1, #128	; 0x80
   b526c:	f7ff fef4 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5270:	4620      	mov	r0, r4
   b5272:	21a8      	movs	r1, #168	; 0xa8
   b5274:	f7ff fef0 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5278:	4620      	mov	r0, r4
   b527a:	213f      	movs	r1, #63	; 0x3f
   b527c:	f7ff feec 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5280:	4620      	mov	r0, r4
   b5282:	21d3      	movs	r1, #211	; 0xd3
   b5284:	f7ff fee8 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5288:	4620      	mov	r0, r4
   b528a:	2100      	movs	r1, #0
   b528c:	f7ff fee4 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5290:	4620      	mov	r0, r4
   b5292:	2140      	movs	r1, #64	; 0x40
   b5294:	f7ff fee0 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5298:	218d      	movs	r1, #141	; 0x8d
   b529a:	4620      	mov	r0, r4
   b529c:	f7ff fedc 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b52a0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b52a2:	bf0c      	ite	eq
   b52a4:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b52a6:	2114      	movne	r1, #20
   b52a8:	4620      	mov	r0, r4
   b52aa:	f7ff fed5 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b52ae:	4620      	mov	r0, r4
   b52b0:	2120      	movs	r1, #32
   b52b2:	f7ff fed1 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b52b6:	4620      	mov	r0, r4
   b52b8:	2100      	movs	r1, #0
   b52ba:	f7ff fecd 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b52be:	4620      	mov	r0, r4
   b52c0:	21a1      	movs	r1, #161	; 0xa1
   b52c2:	f7ff fec9 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b52c6:	4620      	mov	r0, r4
   b52c8:	21c8      	movs	r1, #200	; 0xc8
   b52ca:	f7ff fec5 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b52ce:	4620      	mov	r0, r4
   b52d0:	21da      	movs	r1, #218	; 0xda
   b52d2:	f7ff fec1 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b52d6:	4620      	mov	r0, r4
   b52d8:	2112      	movs	r1, #18
   b52da:	f7ff febd 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b52de:	2181      	movs	r1, #129	; 0x81
   b52e0:	4620      	mov	r0, r4
   b52e2:	f7ff feb9 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b52e6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b52e8:	bf0c      	ite	eq
   b52ea:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b52ec:	21cf      	movne	r1, #207	; 0xcf
   b52ee:	4620      	mov	r0, r4
   b52f0:	f7ff feb2 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b52f4:	21d9      	movs	r1, #217	; 0xd9
   b52f6:	4620      	mov	r0, r4
   b52f8:	f7ff feae 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b52fc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b52fe:	bf0c      	ite	eq
   b5300:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5302:	21f1      	movne	r1, #241	; 0xf1
   b5304:	4620      	mov	r0, r4
   b5306:	f7ff fea7 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b530a:	4620      	mov	r0, r4
   b530c:	21db      	movs	r1, #219	; 0xdb
   b530e:	f7ff fea3 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b5312:	4620      	mov	r0, r4
   b5314:	2140      	movs	r1, #64	; 0x40
   b5316:	f7ff fe9f 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b531a:	4620      	mov	r0, r4
   b531c:	21a4      	movs	r1, #164	; 0xa4
   b531e:	f7ff fe9b 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5322:	4620      	mov	r0, r4
   b5324:	21a6      	movs	r1, #166	; 0xa6
   b5326:	f7ff fe97 	bl	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b532a:	4620      	mov	r0, r4
   b532c:	21af      	movs	r1, #175	; 0xaf
}
   b532e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5332:	f7ff be91 	b.w	b5058 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5336:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b533a:	2101      	movs	r1, #1
   b533c:	b280      	uxth	r0, r0
   b533e:	f004 f975 	bl	b962c <pinMode>
    	pinMode(sclk, OUTPUT);
   b5342:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5346:	2101      	movs	r1, #1
   b5348:	b280      	uxth	r0, r0
   b534a:	f004 f96f 	bl	b962c <pinMode>
    if (hwSPI){
   b534e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5352:	2b00      	cmp	r3, #0
   b5354:	f43f af62 	beq.w	b521c <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5358:	e747      	b.n	b51ea <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b535a:	f004 fa0f 	bl	b977c <_Z19__fetch_global_Wirev>
   b535e:	f003 fd57 	bl	b8e10 <_ZN7TwoWire5beginEv>
   b5362:	e75b      	b.n	b521c <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5364 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b5364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5368:	b085      	sub	sp, #20
   b536a:	461f      	mov	r7, r3
   b536c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5370:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5374:	eba8 0902 	sub.w	r9, r8, r2
   b5378:	eba7 0a01 	sub.w	sl, r7, r1
   b537c:	f1b9 0f00 	cmp.w	r9, #0
   b5380:	bfb8      	it	lt
   b5382:	f1c9 0900 	rsblt	r9, r9, #0
   b5386:	f1ba 0f00 	cmp.w	sl, #0
   b538a:	bfb8      	it	lt
   b538c:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5390:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b5392:	4683      	mov	fp, r0
   b5394:	460c      	mov	r4, r1
   b5396:	4615      	mov	r5, r2
  if (steep) {
   b5398:	dd04      	ble.n	b53a4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b539a:	463a      	mov	r2, r7
    swap(x0, y0);
   b539c:	462c      	mov	r4, r5
    swap(x1, y1);
   b539e:	4647      	mov	r7, r8
    swap(x0, y0);
   b53a0:	460d      	mov	r5, r1
    swap(x1, y1);
   b53a2:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b53a4:	42bc      	cmp	r4, r7
   b53a6:	dd05      	ble.n	b53b4 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b53a8:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b53aa:	4645      	mov	r5, r8
   b53ac:	4690      	mov	r8, r2
  if (x0 > x1) {
   b53ae:	4622      	mov	r2, r4
   b53b0:	463c      	mov	r4, r7
   b53b2:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b53b4:	1b3e      	subs	r6, r7, r4
   b53b6:	b2b2      	uxth	r2, r6
   b53b8:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b53ba:	eba8 0205 	sub.w	r2, r8, r5
   b53be:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b53c2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b53c6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b53ca:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b53ce:	4545      	cmp	r5, r8
   b53d0:	bfb4      	ite	lt
   b53d2:	2201      	movlt	r2, #1
   b53d4:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b53d8:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b53da:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b53dc:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b53de:	42bc      	cmp	r4, r7
   b53e0:	dc1c      	bgt.n	b541c <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b53e2:	f8db 2000 	ldr.w	r2, [fp]
   b53e6:	9303      	str	r3, [sp, #12]
    if (steep) {
   b53e8:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b53ea:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b53ee:	bfc7      	ittee	gt
   b53f0:	4629      	movgt	r1, r5
   b53f2:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b53f4:	462a      	movle	r2, r5
   b53f6:	4621      	movle	r1, r4
   b53f8:	4658      	mov	r0, fp
   b53fa:	47c0      	blx	r8
    }
    err -= dy;
   b53fc:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b53fe:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5400:	1ab6      	subs	r6, r6, r2
   b5402:	b2b1      	uxth	r1, r6
   b5404:	b236      	sxth	r6, r6
    if (err < 0) {
   b5406:	2e00      	cmp	r6, #0
   b5408:	da05      	bge.n	b5416 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b540a:	9a02      	ldr	r2, [sp, #8]
   b540c:	4415      	add	r5, r2
      err += dx;
   b540e:	9a00      	ldr	r2, [sp, #0]
   b5410:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b5412:	b22d      	sxth	r5, r5
      err += dx;
   b5414:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b5416:	3401      	adds	r4, #1
   b5418:	b224      	sxth	r4, r4
   b541a:	e7e0      	b.n	b53de <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b541c:	b005      	add	sp, #20
   b541e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5422 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b5422:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5426:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b542a:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b542c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b5430:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5434:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b5436:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5438:	4616      	mov	r6, r2
   b543a:	468a      	mov	sl, r1
   b543c:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b543e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5440:	6823      	ldr	r3, [r4, #0]
   b5442:	f8cd 8000 	str.w	r8, [sp]
   b5446:	f109 32ff 	add.w	r2, r9, #4294967295
   b544a:	4432      	add	r2, r6
   b544c:	69df      	ldr	r7, [r3, #28]
   b544e:	4651      	mov	r1, sl
   b5450:	462b      	mov	r3, r5
   b5452:	4620      	mov	r0, r4
   b5454:	b212      	sxth	r2, r2
   b5456:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5458:	6823      	ldr	r3, [r4, #0]
   b545a:	f8cd 8000 	str.w	r8, [sp]
   b545e:	699f      	ldr	r7, [r3, #24]
   b5460:	4632      	mov	r2, r6
   b5462:	464b      	mov	r3, r9
   b5464:	4651      	mov	r1, sl
   b5466:	4620      	mov	r0, r4
   b5468:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b546a:	1e6b      	subs	r3, r5, #1
   b546c:	eb03 010a 	add.w	r1, r3, sl
   b5470:	6823      	ldr	r3, [r4, #0]
   b5472:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5476:	699d      	ldr	r5, [r3, #24]
   b5478:	4632      	mov	r2, r6
   b547a:	464b      	mov	r3, r9
   b547c:	b209      	sxth	r1, r1
   b547e:	4620      	mov	r0, r4
   b5480:	46ac      	mov	ip, r5
}
   b5482:	b002      	add	sp, #8
   b5484:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5488:	4760      	bx	ip

000b548a <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b548a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b548c:	3b01      	subs	r3, #1
   b548e:	4413      	add	r3, r2
   b5490:	6804      	ldr	r4, [r0, #0]
   b5492:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5496:	9501      	str	r5, [sp, #4]
   b5498:	b21b      	sxth	r3, r3
   b549a:	9300      	str	r3, [sp, #0]
   b549c:	6964      	ldr	r4, [r4, #20]
   b549e:	460b      	mov	r3, r1
   b54a0:	47a0      	blx	r4
}
   b54a2:	b003      	add	sp, #12
   b54a4:	bd30      	pop	{r4, r5, pc}

000b54a6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b54a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b54a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b54ac:	6804      	ldr	r4, [r0, #0]
   b54ae:	e9cd 2500 	strd	r2, r5, [sp]
   b54b2:	3b01      	subs	r3, #1
   b54b4:	440b      	add	r3, r1
   b54b6:	6964      	ldr	r4, [r4, #20]
   b54b8:	b21b      	sxth	r3, r3
   b54ba:	47a0      	blx	r4
}
   b54bc:	b003      	add	sp, #12
   b54be:	bd30      	pop	{r4, r5, pc}

000b54c0 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b54c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b54c4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b54c8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b54cc:	4605      	mov	r5, r0
   b54ce:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b54d0:	460c      	mov	r4, r1
   b54d2:	18ce      	adds	r6, r1, r3
   b54d4:	42b4      	cmp	r4, r6
   b54d6:	da0b      	bge.n	b54f0 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b54d8:	682b      	ldr	r3, [r5, #0]
   b54da:	f8cd 8000 	str.w	r8, [sp]
   b54de:	699f      	ldr	r7, [r3, #24]
   b54e0:	4621      	mov	r1, r4
   b54e2:	464b      	mov	r3, r9
   b54e4:	4652      	mov	r2, sl
   b54e6:	4628      	mov	r0, r5
   b54e8:	3401      	adds	r4, #1
   b54ea:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b54ec:	b224      	sxth	r4, r4
   b54ee:	e7f1      	b.n	b54d4 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b54f0:	b002      	add	sp, #8
   b54f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b54f6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b54f6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b54f8:	6802      	ldr	r2, [r0, #0]
   b54fa:	9101      	str	r1, [sp, #4]
   b54fc:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5500:	9100      	str	r1, [sp, #0]
   b5502:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5504:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5508:	2200      	movs	r2, #0
   b550a:	4611      	mov	r1, r2
   b550c:	47a0      	blx	r4
}
   b550e:	b002      	add	sp, #8
   b5510:	bd10      	pop	{r4, pc}

000b5512 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b5512:	4770      	bx	lr

000b5514 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5514:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5516:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5518:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b551a:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b551e:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5520:	4d05      	ldr	r5, [pc, #20]	; (b5538 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b5522:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5524:	2201      	movs	r2, #1
   b5526:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5528:	6005      	str	r5, [r0, #0]
   b552a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b552c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b552e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5530:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b5532:	7682      	strb	r2, [r0, #26]
}
   b5534:	bd30      	pop	{r4, r5, pc}
   b5536:	bf00      	nop
   b5538:	000ba8b4 	.word	0x000ba8b4

000b553c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
			      uint16_t color) {
   b553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5540:	b089      	sub	sp, #36	; 0x24
   b5542:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b5546:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
   b554a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
   b554e:	9305      	str	r3, [sp, #20]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b5550:	1dfa      	adds	r2, r7, #7
			      uint16_t color) {
   b5552:	e9cd 0101 	strd	r0, r1, [sp, #4]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b5556:	bf48      	it	mi
   b5558:	f107 020e 	addmi.w	r2, r7, #14
   b555c:	2400      	movs	r4, #0
			      uint16_t color) {
   b555e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  int16_t i, j, byteWidth = (w + 7) / 8;
   b5562:	ea4f 0be2 	mov.w	fp, r2, asr #3
   b5566:	4625      	mov	r5, r4
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5568:	f04f 0980 	mov.w	r9, #128	; 0x80
  for(j=0; j<h; j++) {
   b556c:	9905      	ldr	r1, [sp, #20]
   b556e:	b22a      	sxth	r2, r5
   b5570:	4291      	cmp	r1, r2
   b5572:	dd2a      	ble.n	b55ca <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5574:	9a04      	ldr	r2, [sp, #16]
   b5576:	eb02 0a04 	add.w	sl, r2, r4
	drawPixel(x+i, y+j, color);
   b557a:	9a03      	ldr	r2, [sp, #12]
   b557c:	442a      	add	r2, r5
   b557e:	f04f 0800 	mov.w	r8, #0
   b5582:	b212      	sxth	r2, r2
   b5584:	fa0f f088 	sxth.w	r0, r8
    for(i=0; i<w; i++ ) {
   b5588:	4287      	cmp	r7, r0
   b558a:	fa1f f188 	uxth.w	r1, r8
   b558e:	dd19      	ble.n	b55c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5590:	10c0      	asrs	r0, r0, #3
   b5592:	f81a c000 	ldrb.w	ip, [sl, r0]
   b5596:	f001 0007 	and.w	r0, r1, #7
   b559a:	fa49 f000 	asr.w	r0, r9, r0
   b559e:	ea1c 0f00 	tst.w	ip, r0
   b55a2:	d00c      	beq.n	b55be <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
	drawPixel(x+i, y+j, color);
   b55a4:	9802      	ldr	r0, [sp, #8]
   b55a6:	4401      	add	r1, r0
   b55a8:	9801      	ldr	r0, [sp, #4]
   b55aa:	6800      	ldr	r0, [r0, #0]
   b55ac:	6900      	ldr	r0, [r0, #16]
   b55ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b55b2:	4606      	mov	r6, r0
   b55b4:	b209      	sxth	r1, r1
   b55b6:	9801      	ldr	r0, [sp, #4]
   b55b8:	47b0      	blx	r6
   b55ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    for(i=0; i<w; i++ ) {
   b55be:	f108 0801 	add.w	r8, r8, #1
   b55c2:	e7df      	b.n	b5584 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x48>
  for(j=0; j<h; j++) {
   b55c4:	3501      	adds	r5, #1
   b55c6:	445c      	add	r4, fp
   b55c8:	e7d0      	b.n	b556c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x30>
}
   b55ca:	b009      	add	sp, #36	; 0x24
   b55cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b55d0 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b55d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55d4:	ed2d 8b02 	vpush	{d8}
   b55d8:	b08d      	sub	sp, #52	; 0x34
   b55da:	4607      	mov	r7, r0
   b55dc:	9104      	str	r1, [sp, #16]
   b55de:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b55e2:	9105      	str	r1, [sp, #20]
   b55e4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b55e8:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b55ea:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b55ee:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b55f0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b55f4:	4281      	cmp	r1, r0
   b55f6:	dd52      	ble.n	b569e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b55f8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b55fc:	4291      	cmp	r1, r2
   b55fe:	dd4e      	ble.n	b569e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5600:	2106      	movs	r1, #6
   b5602:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5606:	2c00      	cmp	r4, #0
   b5608:	dd49      	ble.n	b569e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b560a:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b560e:	2c00      	cmp	r4, #0
   b5610:	dd45      	ble.n	b569e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5612:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5616:	930b      	str	r3, [sp, #44]	; 0x2c
   b5618:	b293      	uxth	r3, r2
   b561a:	9307      	str	r3, [sp, #28]
   b561c:	3308      	adds	r3, #8
   b561e:	b29b      	uxth	r3, r3
   b5620:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5622:	2400      	movs	r4, #0
   b5624:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5626:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5628:	bf1c      	itt	ne
   b562a:	4b2c      	ldrne	r3, [pc, #176]	; (b56dc <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b562c:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b562e:	9e07      	ldr	r6, [sp, #28]
   b5630:	bf16      	itet	ne
   b5632:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5634:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5636:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5638:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b563a:	9a04      	ldr	r2, [sp, #16]
   b563c:	b2ab      	uxth	r3, r5
   b563e:	930a      	str	r3, [sp, #40]	; 0x28
   b5640:	fb04 f305 	mul.w	r3, r4, r5
   b5644:	fa13 f382 	uxtah	r3, r3, r2
   b5648:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b564a:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b564e:	ee08 3a10 	vmov	s16, r3
   b5652:	46b0      	mov	r8, r6
   b5654:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5658:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b565c:	9b03      	ldr	r3, [sp, #12]
   b565e:	07db      	lsls	r3, r3, #31
   b5660:	d52f      	bpl.n	b56c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5662:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5664:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5666:	d11f      	bne.n	b56a8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5668:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b566c:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b566e:	b232      	sxth	r2, r6
   b5670:	4651      	mov	r1, sl
   b5672:	4638      	mov	r0, r7
   b5674:	47d8      	blx	fp
      line >>= 1;
   b5676:	9b03      	ldr	r3, [sp, #12]
   b5678:	085b      	lsrs	r3, r3, #1
   b567a:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b567c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b567e:	3601      	adds	r6, #1
   b5680:	4498      	add	r8, r3
   b5682:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5684:	b2b6      	uxth	r6, r6
   b5686:	42b3      	cmp	r3, r6
   b5688:	fa1f f888 	uxth.w	r8, r8
   b568c:	d1e6      	bne.n	b565c <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b568e:	9b08      	ldr	r3, [sp, #32]
   b5690:	3b01      	subs	r3, #1
   b5692:	3401      	adds	r4, #1
   b5694:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5698:	b264      	sxtb	r4, r4
   b569a:	9308      	str	r3, [sp, #32]
   b569c:	d1c3      	bne.n	b5626 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b569e:	b00d      	add	sp, #52	; 0x34
   b56a0:	ecbd 8b02 	vpop	{d8}
   b56a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b56a8:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b56aa:	e9cd 9200 	strd	r9, r2, [sp]
   b56ae:	ee18 1a10 	vmov	r1, s16
   b56b2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b56b6:	fa0f f288 	sxth.w	r2, r8
   b56ba:	464b      	mov	r3, r9
   b56bc:	4638      	mov	r0, r7
   b56be:	47d8      	blx	fp
   b56c0:	e7d9      	b.n	b5676 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b56c2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b56c6:	4293      	cmp	r3, r2
   b56c8:	d0d5      	beq.n	b5676 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b56ca:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b56cc:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b56ce:	d103      	bne.n	b56d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b56d0:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b56d4:	9b06      	ldr	r3, [sp, #24]
   b56d6:	e7ca      	b.n	b566e <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b56d8:	9a06      	ldr	r2, [sp, #24]
   b56da:	e7e6      	b.n	b56aa <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b56dc:	000ba3b0 	.word	0x000ba3b0

000b56e0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b56e0:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b56e2:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b56e4:	b085      	sub	sp, #20
   b56e6:	4604      	mov	r4, r0
  if (c == '\n') {
   b56e8:	d107      	bne.n	b56fa <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b56ea:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b56ec:	8a63      	ldrh	r3, [r4, #18]
   b56ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b56f2:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b56f4:	2300      	movs	r3, #0
   b56f6:	8223      	strh	r3, [r4, #16]
   b56f8:	e021      	b.n	b573e <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b56fa:	290d      	cmp	r1, #13
   b56fc:	d01f      	beq.n	b573e <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b56fe:	7e03      	ldrb	r3, [r0, #24]
   b5700:	9302      	str	r3, [sp, #8]
   b5702:	8ac3      	ldrh	r3, [r0, #22]
   b5704:	9301      	str	r3, [sp, #4]
   b5706:	8a83      	ldrh	r3, [r0, #20]
   b5708:	9300      	str	r3, [sp, #0]
   b570a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b570e:	460b      	mov	r3, r1
   b5710:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5714:	f7ff ff5c 	bl	b55d0 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5718:	7e20      	ldrb	r0, [r4, #24]
   b571a:	8a23      	ldrh	r3, [r4, #16]
   b571c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5720:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5724:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5726:	b21b      	sxth	r3, r3
   b5728:	4602      	mov	r2, r0
   b572a:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b572c:	b139      	cbz	r1, b573e <_ZN12Adafruit_GFX5writeEh+0x5e>
   b572e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5732:	f06f 0505 	mvn.w	r5, #5
   b5736:	fb05 1100 	mla	r1, r5, r0, r1
   b573a:	428b      	cmp	r3, r1
   b573c:	dcd6      	bgt.n	b56ec <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b573e:	2001      	movs	r0, #1
   b5740:	b005      	add	sp, #20
   b5742:	bd30      	pop	{r4, r5, pc}

000b5744 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5744:	2901      	cmp	r1, #1
   b5746:	bf38      	it	cc
   b5748:	2101      	movcc	r1, #1
   b574a:	7601      	strb	r1, [r0, #24]
}
   b574c:	4770      	bx	lr

000b574e <_ZN12Adafruit_GFX12setTextColorEtt>:
  textcolor   = c;
   b574e:	8281      	strh	r1, [r0, #20]
  textbgcolor = b; 
   b5750:	82c2      	strh	r2, [r0, #22]
}
   b5752:	4770      	bx	lr

000b5754 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5754:	7e40      	ldrb	r0, [r0, #25]
   b5756:	4770      	bx	lr

000b5758 <_ZN12Adafruit_GFX5widthEv>:
}
   b5758:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b575c:	4770      	bx	lr

000b575e <_ZN12Adafruit_GFX6heightEv>:
}
   b575e:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5762:	4770      	bx	lr

000b5764 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b5764:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b5766:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b576a:	6803      	ldr	r3, [r0, #0]
   b576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b576e:	4798      	blx	r3
}
   b5770:	3800      	subs	r0, #0
   b5772:	bf18      	it	ne
   b5774:	2001      	movne	r0, #1
   b5776:	bd08      	pop	{r3, pc}

000b5778 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b5778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b577a:	4606      	mov	r6, r0
   b577c:	460f      	mov	r7, r1
   b577e:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b5780:	b1c4      	cbz	r4, b57b4 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b5782:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b5786:	6803      	ldr	r3, [r0, #0]
   b5788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b578a:	4798      	blx	r3
   b578c:	b908      	cbnz	r0, b5792 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b578e:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b5790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b5792:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b5796:	2cfa      	cmp	r4, #250	; 0xfa
   b5798:	6803      	ldr	r3, [r0, #0]
   b579a:	4625      	mov	r5, r4
   b579c:	bfa8      	it	ge
   b579e:	25fa      	movge	r5, #250	; 0xfa
   b57a0:	68db      	ldr	r3, [r3, #12]
   b57a2:	462a      	mov	r2, r5
   b57a4:	4639      	mov	r1, r7
   b57a6:	4798      	blx	r3
   b57a8:	b283      	uxth	r3, r0
      len -= ret;
   b57aa:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b57ac:	429d      	cmp	r5, r3
      len -= ret;
   b57ae:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b57b0:	d0e6      	beq.n	b5780 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b57b2:	e7ec      	b.n	b578e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b57b4:	2001      	movs	r0, #1
   b57b6:	e7eb      	b.n	b5790 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b57b8 <_ZN19Adafruit_MQTT_SPARKD1Ev>:
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b57b8:	4770      	bx	lr

000b57ba <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b57ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b57be:	4606      	mov	r6, r0
   b57c0:	4688      	mov	r8, r1
   b57c2:	4691      	mov	r9, r2
   b57c4:	461f      	mov	r7, r3
   b57c6:	461d      	mov	r5, r3
  uint16_t len = 0;
   b57c8:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b57ca:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b57ce:	6803      	ldr	r3, [r0, #0]
   b57d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57d2:	4798      	blx	r3
   b57d4:	b1d0      	cbz	r0, b580c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b57d6:	2d00      	cmp	r5, #0
   b57d8:	db18      	blt.n	b580c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b57da:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b57de:	6803      	ldr	r3, [r0, #0]
   b57e0:	691b      	ldr	r3, [r3, #16]
   b57e2:	4798      	blx	r3
   b57e4:	b160      	cbz	r0, b5800 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b57e6:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b57ea:	6803      	ldr	r3, [r0, #0]
   b57ec:	695b      	ldr	r3, [r3, #20]
   b57ee:	4798      	blx	r3
   b57f0:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b57f4:	3401      	adds	r4, #1
   b57f6:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b57f8:	454c      	cmp	r4, r9
   b57fa:	d007      	beq.n	b580c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b57fc:	463d      	mov	r5, r7
   b57fe:	e7ec      	b.n	b57da <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b5800:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b5802:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b5804:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b5806:	f003 f895 	bl	b8934 <delay>
  while (client->connected() && (timeout >= 0)) {
   b580a:	e7de      	b.n	b57ca <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b580c:	4620      	mov	r0, r4
   b580e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5812 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b5812:	b570      	push	{r4, r5, r6, lr}
   b5814:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b5816:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b581a:	2296      	movs	r2, #150	; 0x96
   b581c:	2100      	movs	r1, #0
   b581e:	4628      	mov	r0, r5
   b5820:	f004 f93e 	bl	b9aa0 <memset>
  strcpy((char *)buffer, servername);
   b5824:	6861      	ldr	r1, [r4, #4]
   b5826:	4628      	mov	r0, r5
   b5828:	f004 f97a 	bl	b9b20 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b582c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b5830:	8922      	ldrh	r2, [r4, #8]
   b5832:	6803      	ldr	r3, [r0, #0]
   b5834:	4629      	mov	r1, r5
   b5836:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b5838:	2300      	movs	r3, #0
   b583a:	47b0      	blx	r6
}
   b583c:	3800      	subs	r0, #0
   b583e:	bf18      	it	ne
   b5840:	2001      	movne	r0, #1
   b5842:	bd70      	pop	{r4, r5, r6, pc}

000b5844 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b5844:	b510      	push	{r4, lr}
   b5846:	21d4      	movs	r1, #212	; 0xd4
   b5848:	4604      	mov	r4, r0
   b584a:	f7fe fc26 	bl	b409a <_ZdlPvj>
   b584e:	4620      	mov	r0, r4
   b5850:	bd10      	pop	{r4, pc}

000b5852 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b5852:	b510      	push	{r4, lr}
   b5854:	4604      	mov	r4, r0
  if (client->connected()) {
   b5856:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b585a:	6803      	ldr	r3, [r0, #0]
   b585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b585e:	4798      	blx	r3
   b5860:	b120      	cbz	r0, b586c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b5862:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b5866:	6803      	ldr	r3, [r0, #0]
   b5868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b586a:	4798      	blx	r3
}
   b586c:	2001      	movs	r0, #1
   b586e:	bd10      	pop	{r4, pc}

000b5870 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   b5870:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   b5872:	6803      	ldr	r3, [r0, #0]
   b5874:	689b      	ldr	r3, [r3, #8]
{
   b5876:	4604      	mov	r4, r0
    if (!connected())
   b5878:	4798      	blx	r3
   b587a:	b9c8      	cbnz	r0, b58b0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b587c:	4620      	mov	r0, r4
   b587e:	f000 f9ca 	bl	b5c16 <_ZN13Adafruit_MQTT7connectEv>
   b5882:	2504      	movs	r5, #4
   b5884:	b170      	cbz	r0, b58a4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   b5886:	3d01      	subs	r5, #1
   b5888:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b588c:	d00a      	beq.n	b58a4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   b588e:	4620      	mov	r0, r4
   b5890:	f000 f8a8 	bl	b59e4 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   b5894:	f241 3088 	movw	r0, #5000	; 0x1388
   b5898:	f003 f84c 	bl	b8934 <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b589c:	4620      	mov	r0, r4
   b589e:	f000 f9ba 	bl	b5c16 <_ZN13Adafruit_MQTT7connectEv>
   b58a2:	e7ef      	b.n	b5884 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   b58a4:	6823      	ldr	r3, [r4, #0]
   b58a6:	4620      	mov	r0, r4
   b58a8:	689b      	ldr	r3, [r3, #8]
}
   b58aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   b58ae:	4718      	bx	r3
}
   b58b0:	bd70      	pop	{r4, r5, r6, pc}

000b58b2 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b58b2:	b513      	push	{r0, r1, r4, lr}
   b58b4:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b58b6:	4608      	mov	r0, r1
   b58b8:	9101      	str	r1, [sp, #4]
   b58ba:	f004 f939 	bl	b9b30 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b58be:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b58c2:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b58c4:	7060      	strb	r0, [r4, #1]
   b58c6:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b58c8:	b284      	uxth	r4, r0
   b58ca:	9901      	ldr	r1, [sp, #4]
   b58cc:	4622      	mov	r2, r4
   b58ce:	4618      	mov	r0, r3
   b58d0:	f004 f936 	bl	b9b40 <strncpy>
  return p+len;
}
   b58d4:	4420      	add	r0, r4
   b58d6:	b002      	add	sp, #8
   b58d8:	bd10      	pop	{r4, pc}
	...

000b58dc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b58dc:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b58de:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b58e0:	4a0a      	ldr	r2, [pc, #40]	; (b590c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b58e2:	4d0b      	ldr	r5, [pc, #44]	; (b5910 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b58e4:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b58e8:	9b03      	ldr	r3, [sp, #12]
   b58ea:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b58ec:	2300      	movs	r3, #0
  servername = server;
   b58ee:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b58f2:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b58f6:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b58fa:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b58fe:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b5902:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b5904:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b5908:	bd30      	pop	{r4, r5, pc}
   b590a:	bf00      	nop
   b590c:	000b9dfd 	.word	0x000b9dfd
   b5910:	000ba928 	.word	0x000ba928

000b5914 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b5914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5918:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b591a:	6802      	ldr	r2, [r0, #0]
   b591c:	b21b      	sxth	r3, r3
   b591e:	6997      	ldr	r7, [r2, #24]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b5924:	4605      	mov	r5, r0
   b5926:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b5928:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b592a:	b2c7      	uxtb	r7, r0
   b592c:	2f01      	cmp	r7, #1
   b592e:	9b01      	ldr	r3, [sp, #4]
   b5930:	d003      	beq.n	b593a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b5932:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b5934:	b003      	add	sp, #12
   b5936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b593a:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b593e:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b5942:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b5946:	682a      	ldr	r2, [r5, #0]
   b5948:	9301      	str	r3, [sp, #4]
   b594a:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b594e:	4641      	mov	r1, r8
   b5950:	2201      	movs	r2, #1
   b5952:	4628      	mov	r0, r5
   b5954:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b5956:	b2c0      	uxtb	r0, r0
   b5958:	2801      	cmp	r0, #1
   b595a:	d1ea      	bne.n	b5932 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b595c:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b5960:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b5964:	45c2      	cmp	sl, r8
    value += intermediate;
   b5966:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b596a:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b596e:	d0e0      	beq.n	b5932 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b5970:	f012 0f80 	tst.w	r2, #128	; 0x80
   b5974:	9b01      	ldr	r3, [sp, #4]
   b5976:	d1e6      	bne.n	b5946 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b5978:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b597c:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b597e:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b5980:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b5982:	3c01      	subs	r4, #1
   b5984:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b5986:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b598a:	bf3d      	ittte	cc
   b598c:	f106 32ff 	addcc.w	r2, r6, #4294967295
   b5990:	1bd2      	subcc	r2, r2, r7
   b5992:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b5994:	fa1f f289 	uxthcs.w	r2, r9
   b5998:	4641      	mov	r1, r8
   b599a:	4628      	mov	r0, r5
   b599c:	47d0      	blx	sl
   b599e:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b59a0:	4438      	add	r0, r7
   b59a2:	b280      	uxth	r0, r0
   b59a4:	e7c6      	b.n	b5934 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b59a8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b59a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b59ac:	f8df 8030 	ldr.w	r8, [pc, #48]	; b59e0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b59b0:	4605      	mov	r5, r0
   b59b2:	460c      	mov	r4, r1
   b59b4:	4616      	mov	r6, r2
   b59b6:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b59b8:	463b      	mov	r3, r7
   b59ba:	2296      	movs	r2, #150	; 0x96
   b59bc:	4621      	mov	r1, r4
   b59be:	4628      	mov	r0, r5
   b59c0:	f7ff ffa8 	bl	b5914 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b59c4:	b148      	cbz	r0, b59da <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b59c6:	7823      	ldrb	r3, [r4, #0]
   b59c8:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b59cc:	d005      	beq.n	b59da <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b59ce:	f003 f95d 	bl	b8c8c <_Z16_fetch_usbserialv>
   b59d2:	4641      	mov	r1, r8
   b59d4:	f002 ff43 	bl	b885e <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b59d8:	e7ee      	b.n	b59b8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b59da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b59de:	bf00      	nop
   b59e0:	000ba908 	.word	0x000ba908

000b59e4 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   b59e4:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b59e6:	23e0      	movs	r3, #224	; 0xe0
   b59e8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b59ec:	4601      	mov	r1, r0
  packet[1] = 0;
   b59ee:	2300      	movs	r3, #0
   b59f0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b59f4:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b59f8:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b59fa:	695b      	ldr	r3, [r3, #20]
   b59fc:	2202      	movs	r2, #2
   b59fe:	4798      	blx	r3
  return disconnectServer();
   b5a00:	6823      	ldr	r3, [r4, #0]
   b5a02:	4620      	mov	r0, r4
   b5a04:	691b      	ldr	r3, [r3, #16]
}
   b5a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b5a0a:	4718      	bx	r3

000b5a0c <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b5a0c:	b538      	push	{r3, r4, r5, lr}
   b5a0e:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b5a10:	4608      	mov	r0, r1
   b5a12:	2310      	movs	r3, #16
   b5a14:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b5a18:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b5a1a:	4929      	ldr	r1, [pc, #164]	; (b5ac0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b5a1c:	f7ff ff49 	bl	b58b2 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b5a20:	2304      	movs	r3, #4
   b5a22:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b5a24:	2302      	movs	r3, #2
   b5a26:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b5a28:	69ab      	ldr	r3, [r5, #24]
   b5a2a:	b18b      	cbz	r3, b5a50 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b5a2c:	781b      	ldrb	r3, [r3, #0]
   b5a2e:	b17b      	cbz	r3, b5a50 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b5a30:	2306      	movs	r3, #6
   b5a32:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b5a34:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5a38:	2b01      	cmp	r3, #1
   b5a3a:	d139      	bne.n	b5ab0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b5a3c:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b5a3e:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b5a40:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b5a44:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b5a46:	bf02      	ittt	eq
   b5a48:	7843      	ldrbeq	r3, [r0, #1]
   b5a4a:	f043 0320 	orreq.w	r3, r3, #32
   b5a4e:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b5a50:	692b      	ldr	r3, [r5, #16]
   b5a52:	781b      	ldrb	r3, [r3, #0]
   b5a54:	b11b      	cbz	r3, b5a5e <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b5a56:	7843      	ldrb	r3, [r0, #1]
   b5a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b5a5c:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b5a5e:	696b      	ldr	r3, [r5, #20]
   b5a60:	781b      	ldrb	r3, [r3, #0]
   b5a62:	b11b      	cbz	r3, b5a6c <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b5a64:	7843      	ldrb	r3, [r0, #1]
   b5a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b5a6a:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b5a6c:	2301      	movs	r3, #1
   b5a6e:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b5a70:	232c      	movs	r3, #44	; 0x2c
   b5a72:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b5a74:	68e9      	ldr	r1, [r5, #12]
   b5a76:	780b      	ldrb	r3, [r1, #0]
   b5a78:	b1f3      	cbz	r3, b5ab8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b5a7a:	3004      	adds	r0, #4
   b5a7c:	f7ff ff19 	bl	b58b2 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b5a80:	69a9      	ldr	r1, [r5, #24]
   b5a82:	b131      	cbz	r1, b5a92 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b5a84:	780b      	ldrb	r3, [r1, #0]
   b5a86:	b123      	cbz	r3, b5a92 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b5a88:	f7ff ff13 	bl	b58b2 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b5a8c:	69e9      	ldr	r1, [r5, #28]
   b5a8e:	f7ff ff10 	bl	b58b2 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b5a92:	6929      	ldr	r1, [r5, #16]
   b5a94:	780b      	ldrb	r3, [r1, #0]
   b5a96:	b10b      	cbz	r3, b5a9c <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b5a98:	f7ff ff0b 	bl	b58b2 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b5a9c:	6969      	ldr	r1, [r5, #20]
   b5a9e:	780b      	ldrb	r3, [r1, #0]
   b5aa0:	b10b      	cbz	r3, b5aa6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b5aa2:	f7ff ff06 	bl	b58b2 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b5aa6:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b5aa8:	b2c0      	uxtb	r0, r0
   b5aaa:	1e83      	subs	r3, r0, #2
   b5aac:	7063      	strb	r3, [r4, #1]
}
   b5aae:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b5ab0:	2b02      	cmp	r3, #2
   b5ab2:	d1c5      	bne.n	b5a40 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b5ab4:	231e      	movs	r3, #30
   b5ab6:	e7c2      	b.n	b5a3e <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b5ab8:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b5aba:	7143      	strb	r3, [r0, #5]
      p++;
   b5abc:	3006      	adds	r0, #6
   b5abe:	e7df      	b.n	b5a80 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b5ac0:	000ba919 	.word	0x000ba919

000b5ac4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b5ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5ac8:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b5aca:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b5acc:	460e      	mov	r6, r1
   b5ace:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b5ad0:	9201      	str	r2, [sp, #4]
   b5ad2:	f004 f82d 	bl	b9b30 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b5ad6:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b5ada:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b5ade:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b5ae0:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b5ae2:	f1b9 0f00 	cmp.w	r9, #0
   b5ae6:	d135      	bne.n	b5b54 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b5ae8:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b5aea:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b5aee:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b5af0:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b5af2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b5af6:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b5af8:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b5afc:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b5afe:	4622      	mov	r2, r4
   b5b00:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b5b04:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b5b06:	bf88      	it	hi
   b5b08:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b5b0c:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b5b0e:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b5b12:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b5b16:	d8f2      	bhi.n	b5afe <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b5b18:	f7ff fecb 	bl	b58b2 <_ZL11stringprintPhPKct.constprop.0>
   b5b1c:	4603      	mov	r3, r0
  if(qos > 0) {
   b5b1e:	f1b9 0f00 	cmp.w	r9, #0
   b5b22:	d00c      	beq.n	b5b3e <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b5b24:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b5b28:	0a12      	lsrs	r2, r2, #8
   b5b2a:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b5b2c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b5b30:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b5b32:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b5b36:	3201      	adds	r2, #1
    p+=2;
   b5b38:	3302      	adds	r3, #2
    packet_id_counter++;
   b5b3a:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b5b3e:	463a      	mov	r2, r7
   b5b40:	4641      	mov	r1, r8
   b5b42:	4618      	mov	r0, r3
   b5b44:	f003 ff92 	bl	b9a6c <memmove>
  p+= bLen;
   b5b48:	4438      	add	r0, r7
  len = p - packet;
   b5b4a:	1b80      	subs	r0, r0, r6
}
   b5b4c:	b280      	uxth	r0, r0
   b5b4e:	b003      	add	sp, #12
   b5b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b5b54:	3404      	adds	r4, #4
   b5b56:	e7c8      	b.n	b5aea <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b5b58 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b5b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5b5a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b5b5e:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b5b62:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b5b64:	e9cd 3600 	strd	r3, r6, [sp]
   b5b68:	4613      	mov	r3, r2
   b5b6a:	460a      	mov	r2, r1
   b5b6c:	4629      	mov	r1, r5
   b5b6e:	f7ff ffa9 	bl	b5ac4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b5b72:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b5b74:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b5b76:	695b      	ldr	r3, [r3, #20]
   b5b78:	4629      	mov	r1, r5
   b5b7a:	4620      	mov	r0, r4
   b5b7c:	4798      	blx	r3
   b5b7e:	b910      	cbnz	r0, b5b86 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b5b80:	2000      	movs	r0, #0
}
   b5b82:	b002      	add	sp, #8
   b5b84:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b5b86:	2e00      	cmp	r6, #0
   b5b88:	d0fb      	beq.n	b5b82 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b5b8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b5b8e:	2296      	movs	r2, #150	; 0x96
   b5b90:	4629      	mov	r1, r5
   b5b92:	4620      	mov	r0, r4
   b5b94:	f7ff febe 	bl	b5914 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b5b98:	2804      	cmp	r0, #4
   b5b9a:	d1f1      	bne.n	b5b80 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b5b9c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5ba0:	091b      	lsrs	r3, r3, #4
   b5ba2:	2b04      	cmp	r3, #4
   b5ba4:	d1ec      	bne.n	b5b80 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b5ba6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b5ba8:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b5bac:	ba5b      	rev16	r3, r3
    packnum++;
   b5bae:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b5bb0:	b29b      	uxth	r3, r3
   b5bb2:	1ac3      	subs	r3, r0, r3
   b5bb4:	4258      	negs	r0, r3
   b5bb6:	4158      	adcs	r0, r3
   b5bb8:	e7e3      	b.n	b5b82 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b5bba <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b5bba:	b530      	push	{r4, r5, lr}
   b5bbc:	b085      	sub	sp, #20
   b5bbe:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b5bc0:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b5bc2:	461d      	mov	r5, r3
   b5bc4:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b5bc6:	9202      	str	r2, [sp, #8]
   b5bc8:	f003 ffb2 	bl	b9b30 <strlen>
   b5bcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b5bd0:	b283      	uxth	r3, r0
   b5bd2:	9500      	str	r5, [sp, #0]
   b5bd4:	4620      	mov	r0, r4
   b5bd6:	f7ff ffbf 	bl	b5b58 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b5bda:	b005      	add	sp, #20
   b5bdc:	bd30      	pop	{r4, r5, pc}

000b5bde <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b5bde:	b538      	push	{r3, r4, r5, lr}
   b5be0:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b5be2:	2382      	movs	r3, #130	; 0x82
   b5be4:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b5be6:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b5bea:	0a1b      	lsrs	r3, r3, #8
   b5bec:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b5bee:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b5bf2:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b5bf4:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b5bf8:	460c      	mov	r4, r1
  packet_id_counter++;
   b5bfa:	3301      	adds	r3, #1
   b5bfc:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b5c00:	4611      	mov	r1, r2
   b5c02:	1d20      	adds	r0, r4, #4
   b5c04:	f7ff fe55 	bl	b58b2 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b5c08:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b5c0c:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b5c0e:	b2c0      	uxtb	r0, r0
   b5c10:	1e83      	subs	r3, r0, #2
   b5c12:	7063      	strb	r3, [r4, #1]
}
   b5c14:	bd38      	pop	{r3, r4, r5, pc}

000b5c16 <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b5c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b5c1a:	6803      	ldr	r3, [r0, #0]
   b5c1c:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b5c1e:	4604      	mov	r4, r0
  if (!connectServer())
   b5c20:	4798      	blx	r3
   b5c22:	2800      	cmp	r0, #0
   b5c24:	d04b      	beq.n	b5cbe <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b5c26:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b5c2a:	4629      	mov	r1, r5
   b5c2c:	4620      	mov	r0, r4
   b5c2e:	f7ff feed 	bl	b5a0c <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b5c32:	6823      	ldr	r3, [r4, #0]
   b5c34:	b282      	uxth	r2, r0
   b5c36:	695b      	ldr	r3, [r3, #20]
   b5c38:	4629      	mov	r1, r5
   b5c3a:	4620      	mov	r0, r4
   b5c3c:	4798      	blx	r3
   b5c3e:	2800      	cmp	r0, #0
   b5c40:	d03d      	beq.n	b5cbe <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b5c42:	f241 7370 	movw	r3, #6000	; 0x1770
   b5c46:	2296      	movs	r2, #150	; 0x96
   b5c48:	4629      	mov	r1, r5
   b5c4a:	4620      	mov	r0, r4
   b5c4c:	f7ff fe62 	bl	b5914 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b5c50:	b2c0      	uxtb	r0, r0
   b5c52:	2804      	cmp	r0, #4
   b5c54:	d133      	bne.n	b5cbe <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b5c56:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5c58:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b5c5c:	d12f      	bne.n	b5cbe <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b5c5e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b5c62:	b110      	cbz	r0, b5c6a <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b5c64:	b240      	sxtb	r0, r0
}
   b5c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5c6a:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b5c6e:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b5c72:	f857 3b04 	ldr.w	r3, [r7], #4
   b5c76:	b1f3      	cbz	r3, b5cb6 <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b5c78:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b5c7a:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b5c7e:	4629      	mov	r1, r5
   b5c80:	7913      	ldrb	r3, [r2, #4]
   b5c82:	6812      	ldr	r2, [r2, #0]
   b5c84:	4620      	mov	r0, r4
   b5c86:	f7ff ffaa 	bl	b5bde <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b5c8a:	6823      	ldr	r3, [r4, #0]
   b5c8c:	b282      	uxth	r2, r0
   b5c8e:	695b      	ldr	r3, [r3, #20]
   b5c90:	4629      	mov	r1, r5
   b5c92:	4620      	mov	r0, r4
   b5c94:	4798      	blx	r3
   b5c96:	b190      	cbz	r0, b5cbe <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b5c98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b5c9c:	2209      	movs	r2, #9
   b5c9e:	4629      	mov	r1, r5
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	f7ff fe81 	bl	b59a8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b5ca6:	b930      	cbnz	r0, b5cb6 <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b5ca8:	3e01      	subs	r6, #1
   b5caa:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b5cae:	d1e4      	bne.n	b5c7a <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b5cb0:	f06f 0001 	mvn.w	r0, #1
   b5cb4:	e7d7      	b.n	b5c66 <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b5cb6:	45b8      	cmp	r8, r7
   b5cb8:	d1db      	bne.n	b5c72 <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b5cba:	2000      	movs	r0, #0
   b5cbc:	e7d3      	b.n	b5c66 <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b5cbe:	f04f 30ff 	mov.w	r0, #4294967295
   b5cc2:	e7d0      	b.n	b5c66 <_ZN13Adafruit_MQTT7connectEv+0x50>

000b5cc4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b5cc4:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b5cc6:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b5cca:	7203      	strb	r3, [r0, #8]
}
   b5ccc:	bd10      	pop	{r4, pc}

000b5cce <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b5cce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5cd0:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b5cd2:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b5cd4:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b5cd6:	a901      	add	r1, sp, #4
   b5cd8:	f000 fc4e 	bl	b6578 <ltoa>
  return mqtt->publish(topic, payload, qos);
   b5cdc:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5ce0:	7a23      	ldrb	r3, [r4, #8]
   b5ce2:	aa01      	add	r2, sp, #4
   b5ce4:	f7ff ff69 	bl	b5bba <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b5ce8:	b004      	add	sp, #16
   b5cea:	bd10      	pop	{r4, pc}

000b5cec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5cec:	b508      	push	{r3, lr}
   b5cee:	4b02      	ldr	r3, [pc, #8]	; (b5cf8 <netdb_freeaddrinfo+0xc>)
   b5cf0:	681b      	ldr	r3, [r3, #0]
   b5cf2:	689b      	ldr	r3, [r3, #8]
   b5cf4:	9301      	str	r3, [sp, #4]
   b5cf6:	bd08      	pop	{r3, pc}
   b5cf8:	00030268 	.word	0x00030268

000b5cfc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5cfc:	b508      	push	{r3, lr}
   b5cfe:	4b02      	ldr	r3, [pc, #8]	; (b5d08 <netdb_getaddrinfo+0xc>)
   b5d00:	681b      	ldr	r3, [r3, #0]
   b5d02:	68db      	ldr	r3, [r3, #12]
   b5d04:	9301      	str	r3, [sp, #4]
   b5d06:	bd08      	pop	{r3, pc}
   b5d08:	00030268 	.word	0x00030268

000b5d0c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5d0c:	b508      	push	{r3, lr}
   b5d0e:	4b02      	ldr	r3, [pc, #8]	; (b5d18 <HAL_Pin_Map+0xc>)
   b5d10:	681b      	ldr	r3, [r3, #0]
   b5d12:	681b      	ldr	r3, [r3, #0]
   b5d14:	9301      	str	r3, [sp, #4]
   b5d16:	bd08      	pop	{r3, pc}
   b5d18:	0003022c 	.word	0x0003022c

000b5d1c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <HAL_Pin_Mode+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	689b      	ldr	r3, [r3, #8]
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	0003022c 	.word	0x0003022c

000b5d2c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <HAL_Get_Pin_Mode+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	68db      	ldr	r3, [r3, #12]
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	0003022c 	.word	0x0003022c

000b5d3c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <HAL_GPIO_Write+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	691b      	ldr	r3, [r3, #16]
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	0003022c 	.word	0x0003022c

000b5d4c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <if_index_to_name+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	695b      	ldr	r3, [r3, #20]
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	0003026c 	.word	0x0003026c

000b5d5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <HAL_RNG_GetRandomNumber+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	685b      	ldr	r3, [r3, #4]
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030218 	.word	0x00030218

000b5d6c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <HAL_Delay_Microseconds+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	68db      	ldr	r3, [r3, #12]
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030218 	.word	0x00030218

000b5d7c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	691b      	ldr	r3, [r3, #16]
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030218 	.word	0x00030218

000b5d8c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	695b      	ldr	r3, [r3, #20]
   b5d94:	9301      	str	r3, [sp, #4]
   b5d96:	bd08      	pop	{r3, pc}
   b5d98:	00030218 	.word	0x00030218

000b5d9c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <hal_timer_millis+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	00030218 	.word	0x00030218

000b5dac <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <hal_ble_stack_init+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	689b      	ldr	r3, [r3, #8]
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	00030278 	.word	0x00030278

000b5dbc <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <hal_ble_gap_get_device_address+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	69db      	ldr	r3, [r3, #28]
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	00030278 	.word	0x00030278

000b5dcc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <hal_ble_gap_set_advertising_data+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	00030278 	.word	0x00030278

000b5ddc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <hal_ble_gap_set_scan_response_data+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	00030278 	.word	0x00030278

000b5dec <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <hal_ble_gap_start_advertising+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030278 	.word	0x00030278

000b5dfc <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <hal_ble_gap_set_scan_parameters+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030278 	.word	0x00030278

000b5e0c <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <hal_ble_gap_get_scan_parameters+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	00030278 	.word	0x00030278

000b5e1c <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <hal_ble_gap_start_scan+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	00030278 	.word	0x00030278

000b5e2c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b03      	ldr	r3, [pc, #12]	; (b5e3c <hal_ble_gap_stop_scan+0x10>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b5e36:	9301      	str	r3, [sp, #4]
   b5e38:	bd08      	pop	{r3, pc}
   b5e3a:	0000      	.short	0x0000
   b5e3c:	00030278 	.word	0x00030278

000b5e40 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b03      	ldr	r3, [pc, #12]	; (b5e50 <hal_ble_gap_disconnect+0x10>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5e4a:	9301      	str	r3, [sp, #4]
   b5e4c:	bd08      	pop	{r3, pc}
   b5e4e:	0000      	.short	0x0000
   b5e50:	00030278 	.word	0x00030278

000b5e54 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5e54:	b508      	push	{r3, lr}
   b5e56:	4b03      	ldr	r3, [pc, #12]	; (b5e64 <hal_ble_gatt_server_add_service+0x10>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5e5e:	9301      	str	r3, [sp, #4]
   b5e60:	bd08      	pop	{r3, pc}
   b5e62:	0000      	.short	0x0000
   b5e64:	00030278 	.word	0x00030278

000b5e68 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b03      	ldr	r3, [pc, #12]	; (b5e78 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5e72:	9301      	str	r3, [sp, #4]
   b5e74:	bd08      	pop	{r3, pc}
   b5e76:	0000      	.short	0x0000
   b5e78:	00030278 	.word	0x00030278

000b5e7c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b03      	ldr	r3, [pc, #12]	; (b5e8c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5e86:	9301      	str	r3, [sp, #4]
   b5e88:	bd08      	pop	{r3, pc}
   b5e8a:	0000      	.short	0x0000
   b5e8c:	00030278 	.word	0x00030278

000b5e90 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <os_mutex_recursive_create+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	00030248 	.word	0x00030248

000b5ea0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <os_mutex_recursive_lock+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	00030248 	.word	0x00030248

000b5eb0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <os_mutex_recursive_unlock+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	00030248 	.word	0x00030248

000b5ec0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <inet_inet_ntop+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	695b      	ldr	r3, [r3, #20]
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	00030264 	.word	0x00030264

000b5ed0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <inet_htonl+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	6a1b      	ldr	r3, [r3, #32]
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	00030264 	.word	0x00030264

000b5ee0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b02      	ldr	r3, [pc, #8]	; (b5eec <inet_htons+0xc>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ee8:	9301      	str	r3, [sp, #4]
   b5eea:	bd08      	pop	{r3, pc}
   b5eec:	00030264 	.word	0x00030264

000b5ef0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5ef0:	b508      	push	{r3, lr}
   b5ef2:	4b02      	ldr	r3, [pc, #8]	; (b5efc <hal_usart_write+0xc>)
   b5ef4:	681b      	ldr	r3, [r3, #0]
   b5ef6:	68db      	ldr	r3, [r3, #12]
   b5ef8:	9301      	str	r3, [sp, #4]
   b5efa:	bd08      	pop	{r3, pc}
   b5efc:	0003023c 	.word	0x0003023c

000b5f00 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <hal_usart_available+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	691b      	ldr	r3, [r3, #16]
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	0003023c 	.word	0x0003023c

000b5f10 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <hal_usart_read+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	695b      	ldr	r3, [r3, #20]
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	0003023c 	.word	0x0003023c

000b5f20 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <hal_usart_peek+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	699b      	ldr	r3, [r3, #24]
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	0003023c 	.word	0x0003023c

000b5f30 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <hal_usart_flush+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	69db      	ldr	r3, [r3, #28]
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	0003023c 	.word	0x0003023c

000b5f40 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <hal_usart_is_enabled+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	6a1b      	ldr	r3, [r3, #32]
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	0003023c 	.word	0x0003023c

000b5f50 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <hal_usart_available_data_for_write+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	0003023c 	.word	0x0003023c

000b5f60 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <hal_usart_init_ex+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	0003023c 	.word	0x0003023c

000b5f70 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <hal_i2c_begin+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	68db      	ldr	r3, [r3, #12]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030228 	.word	0x00030228

000b5f80 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <hal_i2c_begin_transmission+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	699b      	ldr	r3, [r3, #24]
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030228 	.word	0x00030228

000b5f90 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <hal_i2c_end_transmission+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	69db      	ldr	r3, [r3, #28]
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030228 	.word	0x00030228

000b5fa0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <hal_i2c_write+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	6a1b      	ldr	r3, [r3, #32]
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	00030228 	.word	0x00030228

000b5fb0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <hal_i2c_available+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	00030228 	.word	0x00030228

000b5fc0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <hal_i2c_read+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	00030228 	.word	0x00030228

000b5fd0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <hal_i2c_peek+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	00030228 	.word	0x00030228

000b5fe0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <hal_i2c_flush+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	00030228 	.word	0x00030228

000b5ff0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <hal_i2c_is_enabled+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	00030228 	.word	0x00030228

000b6000 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <hal_i2c_init+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	00030228 	.word	0x00030228

000b6010 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <sock_setsockopt+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	699b      	ldr	r3, [r3, #24]
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	00030238 	.word	0x00030238

000b6020 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <sock_close+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	69db      	ldr	r3, [r3, #28]
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	00030238 	.word	0x00030238

000b6030 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <sock_connect+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	6a1b      	ldr	r3, [r3, #32]
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	00030238 	.word	0x00030238

000b6040 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <sock_recv+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	00030238 	.word	0x00030238

000b6050 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <sock_send+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	00030238 	.word	0x00030238

000b6060 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <sock_socket+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	00030238 	.word	0x00030238

000b6070 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <hal_spi_begin+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	681b      	ldr	r3, [r3, #0]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	00030230 	.word	0x00030230

000b6080 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <hal_spi_set_bit_order+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	689b      	ldr	r3, [r3, #8]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030230 	.word	0x00030230

000b6090 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <hal_spi_set_data_mode+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	68db      	ldr	r3, [r3, #12]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030230 	.word	0x00030230

000b60a0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <hal_spi_set_clock_divider+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	691b      	ldr	r3, [r3, #16]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030230 	.word	0x00030230

000b60b0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <hal_spi_transfer+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	695b      	ldr	r3, [r3, #20]
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030230 	.word	0x00030230

000b60c0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <hal_spi_init+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	69db      	ldr	r3, [r3, #28]
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030230 	.word	0x00030230

000b60d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <hal_spi_is_enabled+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6a1b      	ldr	r3, [r3, #32]
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030230 	.word	0x00030230

000b60e0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <hal_spi_info+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030230 	.word	0x00030230

000b60f0 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <hal_spi_acquire+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030230 	.word	0x00030230

000b6100 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <hal_spi_release+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030230 	.word	0x00030230

000b6110 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <HAL_USB_USART_Init+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	681b      	ldr	r3, [r3, #0]
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	0003024c 	.word	0x0003024c

000b6120 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <HAL_USB_USART_Begin+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	685b      	ldr	r3, [r3, #4]
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	0003024c 	.word	0x0003024c

000b6130 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <HAL_USB_USART_Available_Data+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	691b      	ldr	r3, [r3, #16]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	0003024c 	.word	0x0003024c

000b6140 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	695b      	ldr	r3, [r3, #20]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	0003024c 	.word	0x0003024c

000b6150 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <HAL_USB_USART_Receive_Data+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	699b      	ldr	r3, [r3, #24]
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	0003024c 	.word	0x0003024c

000b6160 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <HAL_USB_USART_Send_Data+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	69db      	ldr	r3, [r3, #28]
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	0003024c 	.word	0x0003024c

000b6170 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <HAL_USB_USART_Flush_Data+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	6a1b      	ldr	r3, [r3, #32]
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	0003024c 	.word	0x0003024c

000b6180 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <HAL_USB_USART_Is_Connected+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	0003024c 	.word	0x0003024c

000b6190 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <panic_+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030260 	.word	0x00030260

000b61a0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <log_message+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030260 	.word	0x00030260

000b61b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <set_system_mode+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	685b      	ldr	r3, [r3, #4]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	00030220 	.word	0x00030220

000b61c0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <system_delay_ms+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	695b      	ldr	r3, [r3, #20]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	00030220 	.word	0x00030220

000b61d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b03      	ldr	r3, [pc, #12]	; (b61e0 <system_ctrl_set_app_request_handler+0x10>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b61da:	9301      	str	r3, [sp, #4]
   b61dc:	bd08      	pop	{r3, pc}
   b61de:	0000      	.short	0x0000
   b61e0:	00030220 	.word	0x00030220

000b61e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b03      	ldr	r3, [pc, #12]	; (b61f4 <system_ctrl_set_result+0x10>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b61ee:	9301      	str	r3, [sp, #4]
   b61f0:	bd08      	pop	{r3, pc}
   b61f2:	0000      	.short	0x0000
   b61f4:	00030220 	.word	0x00030220

000b61f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <network_connect+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	685b      	ldr	r3, [r3, #4]
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	00030240 	.word	0x00030240

000b6208 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <network_connecting+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	689b      	ldr	r3, [r3, #8]
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	00030240 	.word	0x00030240

000b6218 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <network_disconnect+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	68db      	ldr	r3, [r3, #12]
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	00030240 	.word	0x00030240

000b6228 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <network_ready+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	691b      	ldr	r3, [r3, #16]
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	00030240 	.word	0x00030240

000b6238 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <network_on+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	695b      	ldr	r3, [r3, #20]
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	00030240 	.word	0x00030240

000b6248 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <network_off+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	699b      	ldr	r3, [r3, #24]
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	00030240 	.word	0x00030240

000b6258 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <network_listen+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	69db      	ldr	r3, [r3, #28]
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	00030240 	.word	0x00030240

000b6268 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <network_listening+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	6a1b      	ldr	r3, [r3, #32]
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	00030240 	.word	0x00030240

000b6278 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <network_set_listen_timeout+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	00030240 	.word	0x00030240

000b6288 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <network_get_listen_timeout+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	00030240 	.word	0x00030240

000b6298 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <network_is_on+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	00030240 	.word	0x00030240

000b62a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <network_is_off+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	00030240 	.word	0x00030240

000b62b8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <spark_process+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	689b      	ldr	r3, [r3, #8]
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	00030244 	.word	0x00030244

000b62c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	00030244 	.word	0x00030244

000b62d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <malloc+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	681b      	ldr	r3, [r3, #0]
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	0003021c 	.word	0x0003021c

000b62e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <free+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	685b      	ldr	r3, [r3, #4]
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	0003021c 	.word	0x0003021c

000b62f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <realloc+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	689b      	ldr	r3, [r3, #8]
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	0003021c 	.word	0x0003021c

000b6308 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <vsnprintf+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	0003021c 	.word	0x0003021c

000b6318 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <abort+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	0003021c 	.word	0x0003021c

000b6328 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <__errno+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	0003021c 	.word	0x0003021c

000b6338 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6338:	b508      	push	{r3, lr}
   b633a:	4b02      	ldr	r3, [pc, #8]	; (b6344 <__assert_func+0xc>)
   b633c:	681b      	ldr	r3, [r3, #0]
   b633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6340:	9301      	str	r3, [sp, #4]
   b6342:	bd08      	pop	{r3, pc}
   b6344:	0003021c 	.word	0x0003021c

000b6348 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6348:	b508      	push	{r3, lr}
   b634a:	4b02      	ldr	r3, [pc, #8]	; (b6354 <newlib_impure_ptr_callback+0xc>)
   b634c:	681b      	ldr	r3, [r3, #0]
   b634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6350:	9301      	str	r3, [sp, #4]
   b6352:	bd08      	pop	{r3, pc}
   b6354:	0003021c 	.word	0x0003021c

000b6358 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6358:	2200      	movs	r2, #0
   b635a:	6840      	ldr	r0, [r0, #4]
   b635c:	4611      	mov	r1, r2
   b635e:	f7ff bf83 	b.w	b6268 <network_listening>

000b6362 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6362:	2200      	movs	r2, #0
   b6364:	6840      	ldr	r0, [r0, #4]
   b6366:	4611      	mov	r1, r2
   b6368:	f7ff bf8e 	b.w	b6288 <network_get_listen_timeout>

000b636c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b636c:	6840      	ldr	r0, [r0, #4]
   b636e:	2200      	movs	r2, #0
   b6370:	f7ff bf82 	b.w	b6278 <network_set_listen_timeout>

000b6374 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6374:	6840      	ldr	r0, [r0, #4]
   b6376:	2200      	movs	r2, #0
   b6378:	f081 0101 	eor.w	r1, r1, #1
   b637c:	f7ff bf6c 	b.w	b6258 <network_listen>

000b6380 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6380:	2300      	movs	r3, #0
   b6382:	6840      	ldr	r0, [r0, #4]
   b6384:	461a      	mov	r2, r3
   b6386:	4619      	mov	r1, r3
   b6388:	f7ff bf5e 	b.w	b6248 <network_off>

000b638c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b638c:	2300      	movs	r3, #0
   b638e:	6840      	ldr	r0, [r0, #4]
   b6390:	461a      	mov	r2, r3
   b6392:	4619      	mov	r1, r3
   b6394:	f7ff bf50 	b.w	b6238 <network_on>

000b6398 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6398:	2200      	movs	r2, #0
   b639a:	6840      	ldr	r0, [r0, #4]
   b639c:	4611      	mov	r1, r2
   b639e:	f7ff bf43 	b.w	b6228 <network_ready>

000b63a2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b63a2:	2200      	movs	r2, #0
   b63a4:	6840      	ldr	r0, [r0, #4]
   b63a6:	4611      	mov	r1, r2
   b63a8:	f7ff bf2e 	b.w	b6208 <network_connecting>

000b63ac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b63ac:	6840      	ldr	r0, [r0, #4]
   b63ae:	2200      	movs	r2, #0
   b63b0:	2102      	movs	r1, #2
   b63b2:	f7ff bf31 	b.w	b6218 <network_disconnect>

000b63b6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b63b6:	2300      	movs	r3, #0
   b63b8:	6840      	ldr	r0, [r0, #4]
   b63ba:	461a      	mov	r2, r3
   b63bc:	f7ff bf1c 	b.w	b61f8 <network_connect>

000b63c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b63c0:	4b02      	ldr	r3, [pc, #8]	; (b63cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b63c2:	2203      	movs	r2, #3
   b63c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b63c6:	4a02      	ldr	r2, [pc, #8]	; (b63d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b63c8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b63ca:	4770      	bx	lr
   b63cc:	2003e6b8 	.word	0x2003e6b8
   b63d0:	000ba94c 	.word	0x000ba94c

000b63d4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b63d4:	2100      	movs	r1, #0
   b63d6:	f7ff be93 	b.w	b6100 <hal_spi_release>

000b63da <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b63da:	2100      	movs	r1, #0
   b63dc:	f7ff be88 	b.w	b60f0 <hal_spi_acquire>

000b63e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b63e0:	b510      	push	{r4, lr}
   b63e2:	4604      	mov	r4, r0
   b63e4:	4608      	mov	r0, r1
{
    _spi = spi;
   b63e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b63e8:	f7ff fe6a 	bl	b60c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b63ec:	2300      	movs	r3, #0
   b63ee:	6063      	str	r3, [r4, #4]
}
   b63f0:	4620      	mov	r0, r4
   b63f2:	bd10      	pop	{r4, pc}

000b63f4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b63f4:	b513      	push	{r0, r1, r4, lr}
   b63f6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b63f8:	7800      	ldrb	r0, [r0, #0]
   b63fa:	f7ff ffee 	bl	b63da <_ZN8SPIClass4lockEv.isra.0>
   b63fe:	b958      	cbnz	r0, b6418 <_ZN8SPIClass5beginEv+0x24>
   b6400:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6402:	9001      	str	r0, [sp, #4]
   b6404:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6408:	f7ff fe32 	bl	b6070 <hal_spi_begin>
        unlock();
   b640c:	9801      	ldr	r0, [sp, #4]
    }
}
   b640e:	b002      	add	sp, #8
   b6410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6414:	f7ff bfde 	b.w	b63d4 <_ZN8SPIClass6unlockEv.isra.0>
   b6418:	b002      	add	sp, #8
   b641a:	bd10      	pop	{r4, pc}

000b641c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b641c:	b513      	push	{r0, r1, r4, lr}
   b641e:	4604      	mov	r4, r0
    if (!lock())
   b6420:	7800      	ldrb	r0, [r0, #0]
{
   b6422:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6424:	f7ff ffd9 	bl	b63da <_ZN8SPIClass4lockEv.isra.0>
   b6428:	9901      	ldr	r1, [sp, #4]
   b642a:	b948      	cbnz	r0, b6440 <_ZN8SPIClass11setBitOrderEh+0x24>
   b642c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b642e:	9001      	str	r0, [sp, #4]
   b6430:	f7ff fe26 	bl	b6080 <hal_spi_set_bit_order>
        unlock();
   b6434:	9801      	ldr	r0, [sp, #4]
    }
}
   b6436:	b002      	add	sp, #8
   b6438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b643c:	f7ff bfca 	b.w	b63d4 <_ZN8SPIClass6unlockEv.isra.0>
   b6440:	b002      	add	sp, #8
   b6442:	bd10      	pop	{r4, pc}

000b6444 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6444:	b513      	push	{r0, r1, r4, lr}
   b6446:	4604      	mov	r4, r0
    if (!lock())
   b6448:	7800      	ldrb	r0, [r0, #0]
{
   b644a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b644c:	f7ff ffc5 	bl	b63da <_ZN8SPIClass4lockEv.isra.0>
   b6450:	9901      	ldr	r1, [sp, #4]
   b6452:	b948      	cbnz	r0, b6468 <_ZN8SPIClass11setDataModeEh+0x24>
   b6454:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6456:	9001      	str	r0, [sp, #4]
   b6458:	f7ff fe1a 	bl	b6090 <hal_spi_set_data_mode>
        unlock();
   b645c:	9801      	ldr	r0, [sp, #4]
    }
}
   b645e:	b002      	add	sp, #8
   b6460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6464:	f7ff bfb6 	b.w	b63d4 <_ZN8SPIClass6unlockEv.isra.0>
   b6468:	b002      	add	sp, #8
   b646a:	bd10      	pop	{r4, pc}

000b646c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b646c:	0840      	lsrs	r0, r0, #1
{
   b646e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6470:	6018      	str	r0, [r3, #0]
   b6472:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6474:	6818      	ldr	r0, [r3, #0]
   b6476:	4288      	cmp	r0, r1
   b6478:	b2e5      	uxtb	r5, r4
   b647a:	d906      	bls.n	b648a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b647c:	3401      	adds	r4, #1
   b647e:	2c08      	cmp	r4, #8
   b6480:	d002      	beq.n	b6488 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6482:	0840      	lsrs	r0, r0, #1
   b6484:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6486:	e7f5      	b.n	b6474 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6488:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b648a:	4b02      	ldr	r3, [pc, #8]	; (b6494 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b648c:	5d5b      	ldrb	r3, [r3, r5]
   b648e:	7013      	strb	r3, [r2, #0]
}
   b6490:	bd30      	pop	{r4, r5, pc}
   b6492:	bf00      	nop
   b6494:	000ba980 	.word	0x000ba980

000b6498 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b649c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b649e:	2300      	movs	r3, #0
{
   b64a0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b64a2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b64a4:	9302      	str	r3, [sp, #8]
{
   b64a6:	460e      	mov	r6, r1
   b64a8:	4617      	mov	r7, r2
    if (!lock())
   b64aa:	f7ff ff96 	bl	b63da <_ZN8SPIClass4lockEv.isra.0>
   b64ae:	4605      	mov	r5, r0
   b64b0:	bb00      	cbnz	r0, b64f4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b64b2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b64b6:	4601      	mov	r1, r0
   b64b8:	2214      	movs	r2, #20
   b64ba:	a803      	add	r0, sp, #12
   b64bc:	f003 faf0 	bl	b9aa0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b64c0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b64c2:	462a      	mov	r2, r5
   b64c4:	a903      	add	r1, sp, #12
   b64c6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b64c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b64cc:	f7ff fe08 	bl	b60e0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b64d0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b64d2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b64d6:	ab02      	add	r3, sp, #8
   b64d8:	f10d 0207 	add.w	r2, sp, #7
   b64dc:	fb07 f106 	mul.w	r1, r7, r6
   b64e0:	f7ff ffc4 	bl	b646c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b64e4:	7820      	ldrb	r0, [r4, #0]
   b64e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b64ea:	f7ff fdd9 	bl	b60a0 <hal_spi_set_clock_divider>
        unlock();
   b64ee:	7820      	ldrb	r0, [r4, #0]
   b64f0:	f7ff ff70 	bl	b63d4 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b64f4:	9802      	ldr	r0, [sp, #8]
   b64f6:	b008      	add	sp, #32
   b64f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b64fc <_ZN8SPIClass15setClockDividerEh>:
{
   b64fc:	b538      	push	{r3, r4, r5, lr}
   b64fe:	4604      	mov	r4, r0
    if (!lock())
   b6500:	7800      	ldrb	r0, [r0, #0]
{
   b6502:	460d      	mov	r5, r1
    if (!lock())
   b6504:	f7ff ff69 	bl	b63da <_ZN8SPIClass4lockEv.isra.0>
   b6508:	4603      	mov	r3, r0
   b650a:	b9d0      	cbnz	r0, b6542 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b650c:	6861      	ldr	r1, [r4, #4]
   b650e:	b199      	cbz	r1, b6538 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6510:	4a0c      	ldr	r2, [pc, #48]	; (b6544 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6512:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6516:	4285      	cmp	r5, r0
   b6518:	d002      	beq.n	b6520 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b651a:	3301      	adds	r3, #1
   b651c:	2b08      	cmp	r3, #8
   b651e:	d1f8      	bne.n	b6512 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6520:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6522:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6524:	2201      	movs	r2, #1
   b6526:	40d9      	lsrs	r1, r3
   b6528:	4620      	mov	r0, r4
   b652a:	f7ff ffb5 	bl	b6498 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b652e:	7820      	ldrb	r0, [r4, #0]
}
   b6530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6534:	f7ff bf4e 	b.w	b63d4 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6538:	7820      	ldrb	r0, [r4, #0]
   b653a:	4629      	mov	r1, r5
   b653c:	f7ff fdb0 	bl	b60a0 <hal_spi_set_clock_divider>
   b6540:	e7f5      	b.n	b652e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6542:	bd38      	pop	{r3, r4, r5, pc}
   b6544:	000ba980 	.word	0x000ba980

000b6548 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6548:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b654a:	7800      	ldrb	r0, [r0, #0]
   b654c:	f7ff fdb0 	bl	b60b0 <hal_spi_transfer>
}
   b6550:	b2c0      	uxtb	r0, r0
   b6552:	bd08      	pop	{r3, pc}

000b6554 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6554:	4b05      	ldr	r3, [pc, #20]	; (b656c <_GLOBAL__sub_I_System+0x18>)
   b6556:	2202      	movs	r2, #2
   b6558:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b655a:	4b05      	ldr	r3, [pc, #20]	; (b6570 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b655c:	4a05      	ldr	r2, [pc, #20]	; (b6574 <_GLOBAL__sub_I_System+0x20>)
   b655e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6560:	2000      	movs	r0, #0
   b6562:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6566:	f7ff be23 	b.w	b61b0 <set_system_mode>
   b656a:	bf00      	nop
   b656c:	2003e6cc 	.word	0x2003e6cc
   b6570:	2003e6c0 	.word	0x2003e6c0
   b6574:	ffff0000 	.word	0xffff0000

000b6578 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b6578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b657c:	1e93      	subs	r3, r2, #2
{
   b657e:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b6580:	2b22      	cmp	r3, #34	; 0x22
   b6582:	f04f 0300 	mov.w	r3, #0
{
   b6586:	460d      	mov	r5, r1
   b6588:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b658a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b658e:	d927      	bls.n	b65e0 <ltoa+0x68>

      if (10 == base && N < 0L)
   b6590:	2800      	cmp	r0, #0
   b6592:	da2a      	bge.n	b65ea <ltoa+0x72>
      {
            *head++ = '-';
   b6594:	462e      	mov	r6, r5
   b6596:	232d      	movs	r3, #45	; 0x2d
   b6598:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b659c:	4240      	negs	r0, r0
   b659e:	240a      	movs	r4, #10
      *tail-- = '\0';
   b65a0:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b65a4:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b65a8:	4622      	mov	r2, r4
   b65aa:	4601      	mov	r1, r0
   b65ac:	a801      	add	r0, sp, #4
   b65ae:	f003 fa2b 	bl	b9a08 <ldiv>
   b65b2:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b65b4:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b65b6:	2b09      	cmp	r3, #9
   b65b8:	bfcc      	ite	gt
   b65ba:	2237      	movgt	r2, #55	; 0x37
   b65bc:	2230      	movle	r2, #48	; 0x30
   b65be:	fa52 f383 	uxtab	r3, r2, r3
   b65c2:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b65c6:	f108 0801 	add.w	r8, r8, #1
   b65ca:	2800      	cmp	r0, #0
   b65cc:	d1ec      	bne.n	b65a8 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b65ce:	4642      	mov	r2, r8
   b65d0:	1c79      	adds	r1, r7, #1
   b65d2:	4630      	mov	r0, r6
   b65d4:	f003 fa3c 	bl	b9a50 <memcpy>
      return str;
}
   b65d8:	4628      	mov	r0, r5
   b65da:	b00c      	add	sp, #48	; 0x30
   b65dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b65e0:	2a0a      	cmp	r2, #10
   b65e2:	d0d5      	beq.n	b6590 <ltoa+0x18>
      if (uarg)
   b65e4:	b118      	cbz	r0, b65ee <ltoa+0x76>
   b65e6:	462e      	mov	r6, r5
   b65e8:	e7da      	b.n	b65a0 <ltoa+0x28>
   b65ea:	240a      	movs	r4, #10
   b65ec:	e7fa      	b.n	b65e4 <ltoa+0x6c>
      else  *tail-- = '0';
   b65ee:	2330      	movs	r3, #48	; 0x30
   b65f0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b65f4:	462e      	mov	r6, r5
   b65f6:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b65fa:	f04f 0802 	mov.w	r8, #2
   b65fe:	e7e6      	b.n	b65ce <ltoa+0x56>

000b6600 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6600:	b510      	push	{r4, lr}
   b6602:	4604      	mov	r4, r0
{
	free(buffer);
   b6604:	6800      	ldr	r0, [r0, #0]
   b6606:	f7ff fe6f 	bl	b62e8 <free>
}
   b660a:	4620      	mov	r0, r4
   b660c:	bd10      	pop	{r4, pc}

000b660e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b660e:	b510      	push	{r4, lr}
   b6610:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6612:	6800      	ldr	r0, [r0, #0]
   b6614:	b108      	cbz	r0, b661a <_ZN6String10invalidateEv+0xc>
   b6616:	f7ff fe67 	bl	b62e8 <free>
	buffer = NULL;
   b661a:	2300      	movs	r3, #0
	capacity = len = 0;
   b661c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6620:	6023      	str	r3, [r4, #0]
}
   b6622:	bd10      	pop	{r4, pc}

000b6624 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6624:	b538      	push	{r3, r4, r5, lr}
   b6626:	4604      	mov	r4, r0
   b6628:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b662a:	6800      	ldr	r0, [r0, #0]
   b662c:	3101      	adds	r1, #1
   b662e:	f7ff fe63 	bl	b62f8 <realloc>
	if (newbuffer) {
   b6632:	b110      	cbz	r0, b663a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6634:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6638:	2001      	movs	r0, #1
	}
	return 0;
}
   b663a:	bd38      	pop	{r3, r4, r5, pc}

000b663c <_ZN6String7reserveEj>:
{
   b663c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b663e:	6803      	ldr	r3, [r0, #0]
{
   b6640:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6642:	b123      	cbz	r3, b664e <_ZN6String7reserveEj+0x12>
   b6644:	6843      	ldr	r3, [r0, #4]
   b6646:	428b      	cmp	r3, r1
   b6648:	d301      	bcc.n	b664e <_ZN6String7reserveEj+0x12>
   b664a:	2001      	movs	r0, #1
}
   b664c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b664e:	4620      	mov	r0, r4
   b6650:	f7ff ffe8 	bl	b6624 <_ZN6String12changeBufferEj>
   b6654:	2800      	cmp	r0, #0
   b6656:	d0f9      	beq.n	b664c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6658:	68a3      	ldr	r3, [r4, #8]
   b665a:	2b00      	cmp	r3, #0
   b665c:	d1f5      	bne.n	b664a <_ZN6String7reserveEj+0xe>
   b665e:	6822      	ldr	r2, [r4, #0]
   b6660:	7013      	strb	r3, [r2, #0]
   b6662:	e7f2      	b.n	b664a <_ZN6String7reserveEj+0xe>

000b6664 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6664:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6666:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6668:	4611      	mov	r1, r2
   b666a:	9201      	str	r2, [sp, #4]
{
   b666c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b666e:	f7ff ffe5 	bl	b663c <_ZN6String7reserveEj>
   b6672:	9a01      	ldr	r2, [sp, #4]
   b6674:	b928      	cbnz	r0, b6682 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6676:	4620      	mov	r0, r4
   b6678:	f7ff ffc9 	bl	b660e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b667c:	4620      	mov	r0, r4
   b667e:	b003      	add	sp, #12
   b6680:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6682:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6684:	4629      	mov	r1, r5
   b6686:	6820      	ldr	r0, [r4, #0]
   b6688:	f003 f9e2 	bl	b9a50 <memcpy>
	buffer[len] = 0;
   b668c:	6822      	ldr	r2, [r4, #0]
   b668e:	68a3      	ldr	r3, [r4, #8]
   b6690:	2100      	movs	r1, #0
   b6692:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6694:	e7f2      	b.n	b667c <_ZN6String4copyEPKcj+0x18>

000b6696 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6696:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6698:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b669a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b669e:	4604      	mov	r4, r0
	len = 0;
   b66a0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b66a2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b66a4:	b141      	cbz	r1, b66b8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b66a6:	4608      	mov	r0, r1
   b66a8:	9101      	str	r1, [sp, #4]
   b66aa:	f003 fa41 	bl	b9b30 <strlen>
   b66ae:	9901      	ldr	r1, [sp, #4]
   b66b0:	4602      	mov	r2, r0
   b66b2:	4620      	mov	r0, r4
   b66b4:	f7ff ffd6 	bl	b6664 <_ZN6String4copyEPKcj>
}
   b66b8:	4620      	mov	r0, r4
   b66ba:	b002      	add	sp, #8
   b66bc:	bd10      	pop	{r4, pc}

000b66be <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b66be:	b538      	push	{r3, r4, r5, lr}
   b66c0:	4605      	mov	r5, r0
	if (buffer) {
   b66c2:	6800      	ldr	r0, [r0, #0]
{
   b66c4:	460c      	mov	r4, r1
	if (buffer) {
   b66c6:	b168      	cbz	r0, b66e4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b66c8:	686a      	ldr	r2, [r5, #4]
   b66ca:	688b      	ldr	r3, [r1, #8]
   b66cc:	429a      	cmp	r2, r3
   b66ce:	d307      	bcc.n	b66e0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b66d0:	6809      	ldr	r1, [r1, #0]
   b66d2:	f003 fa25 	bl	b9b20 <strcpy>
			len = rhs.len;
   b66d6:	68a3      	ldr	r3, [r4, #8]
   b66d8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b66da:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b66dc:	60a3      	str	r3, [r4, #8]
}
   b66de:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b66e0:	f7ff fe02 	bl	b62e8 <free>
	buffer = rhs.buffer;
   b66e4:	6823      	ldr	r3, [r4, #0]
   b66e6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b66e8:	6863      	ldr	r3, [r4, #4]
   b66ea:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b66ec:	68a3      	ldr	r3, [r4, #8]
   b66ee:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b66f0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b66f2:	e9c4 3300 	strd	r3, r3, [r4]
   b66f6:	e7f1      	b.n	b66dc <_ZN6String4moveERS_+0x1e>

000b66f8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b66f8:	b510      	push	{r4, lr}
	buffer = NULL;
   b66fa:	2300      	movs	r3, #0
	capacity = 0;
   b66fc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b6700:	4604      	mov	r4, r0
	len = 0;
   b6702:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6704:	7303      	strb	r3, [r0, #12]
	move(rval);
   b6706:	f7ff ffda 	bl	b66be <_ZN6String4moveERS_>
}
   b670a:	4620      	mov	r0, r4
   b670c:	bd10      	pop	{r4, pc}

000b670e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b670e:	4288      	cmp	r0, r1
{
   b6710:	b510      	push	{r4, lr}
   b6712:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6714:	d005      	beq.n	b6722 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6716:	680b      	ldr	r3, [r1, #0]
   b6718:	b12b      	cbz	r3, b6726 <_ZN6StringaSERKS_+0x18>
   b671a:	688a      	ldr	r2, [r1, #8]
   b671c:	4619      	mov	r1, r3
   b671e:	f7ff ffa1 	bl	b6664 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6722:	4620      	mov	r0, r4
   b6724:	bd10      	pop	{r4, pc}
	else invalidate();
   b6726:	f7ff ff72 	bl	b660e <_ZN6String10invalidateEv>
   b672a:	e7fa      	b.n	b6722 <_ZN6StringaSERKS_+0x14>

000b672c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b672c:	b510      	push	{r4, lr}
	buffer = NULL;
   b672e:	2300      	movs	r3, #0
String::String(const String &value)
   b6730:	4604      	mov	r4, r0
	capacity = 0;
   b6732:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6736:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6738:	7303      	strb	r3, [r0, #12]
	*this = value;
   b673a:	f7ff ffe8 	bl	b670e <_ZN6StringaSERKS_>
}
   b673e:	4620      	mov	r0, r4
   b6740:	bd10      	pop	{r4, pc}

000b6742 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6742:	b513      	push	{r0, r1, r4, lr}
   b6744:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6746:	b159      	cbz	r1, b6760 <_ZN6StringaSEPKc+0x1e>
   b6748:	4608      	mov	r0, r1
   b674a:	9101      	str	r1, [sp, #4]
   b674c:	f003 f9f0 	bl	b9b30 <strlen>
   b6750:	9901      	ldr	r1, [sp, #4]
   b6752:	4602      	mov	r2, r0
   b6754:	4620      	mov	r0, r4
   b6756:	f7ff ff85 	bl	b6664 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b675a:	4620      	mov	r0, r4
   b675c:	b002      	add	sp, #8
   b675e:	bd10      	pop	{r4, pc}
	else invalidate();
   b6760:	f7ff ff55 	bl	b660e <_ZN6String10invalidateEv>
   b6764:	e7f9      	b.n	b675a <_ZN6StringaSEPKc+0x18>

000b6766 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6766:	b570      	push	{r4, r5, r6, lr}
   b6768:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b676a:	460e      	mov	r6, r1
   b676c:	b909      	cbnz	r1, b6772 <_ZN6String6concatEPKcj+0xc>
   b676e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6770:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6772:	b16a      	cbz	r2, b6790 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6774:	6884      	ldr	r4, [r0, #8]
   b6776:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6778:	4621      	mov	r1, r4
   b677a:	f7ff ff5f 	bl	b663c <_ZN6String7reserveEj>
   b677e:	2800      	cmp	r0, #0
   b6780:	d0f5      	beq.n	b676e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6782:	6828      	ldr	r0, [r5, #0]
   b6784:	68ab      	ldr	r3, [r5, #8]
   b6786:	4631      	mov	r1, r6
   b6788:	4418      	add	r0, r3
   b678a:	f003 f9c9 	bl	b9b20 <strcpy>
	len = newlen;
   b678e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6790:	2001      	movs	r0, #1
   b6792:	e7ed      	b.n	b6770 <_ZN6String6concatEPKcj+0xa>

000b6794 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6794:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b6796:	2300      	movs	r3, #0
	buf[0] = c;
   b6798:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b679c:	2201      	movs	r2, #1
   b679e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b67a0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b67a4:	f7ff ffdf 	bl	b6766 <_ZN6String6concatEPKcj>
}
   b67a8:	b003      	add	sp, #12
   b67aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b67ae <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b67ae:	6802      	ldr	r2, [r0, #0]
{
   b67b0:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b67b2:	6809      	ldr	r1, [r1, #0]
   b67b4:	b162      	cbz	r2, b67d0 <_ZNK6String9compareToERKS_+0x22>
   b67b6:	b941      	cbnz	r1, b67ca <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b67b8:	6880      	ldr	r0, [r0, #8]
   b67ba:	b160      	cbz	r0, b67d6 <_ZNK6String9compareToERKS_+0x28>
   b67bc:	7810      	ldrb	r0, [r2, #0]
   b67be:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b67c0:	6898      	ldr	r0, [r3, #8]
   b67c2:	b140      	cbz	r0, b67d6 <_ZNK6String9compareToERKS_+0x28>
   b67c4:	7809      	ldrb	r1, [r1, #0]
   b67c6:	4248      	negs	r0, r1
   b67c8:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b67ca:	4610      	mov	r0, r2
   b67cc:	f003 b99e 	b.w	b9b0c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b67d0:	2900      	cmp	r1, #0
   b67d2:	d1f5      	bne.n	b67c0 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b67d4:	4608      	mov	r0, r1
}
   b67d6:	4770      	bx	lr

000b67d8 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b67d8:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b67da:	6882      	ldr	r2, [r0, #8]
   b67dc:	688b      	ldr	r3, [r1, #8]
   b67de:	429a      	cmp	r2, r3
   b67e0:	d105      	bne.n	b67ee <_ZNK6String6equalsERKS_+0x16>
   b67e2:	f7ff ffe4 	bl	b67ae <_ZNK6String9compareToERKS_>
   b67e6:	fab0 f080 	clz	r0, r0
   b67ea:	0940      	lsrs	r0, r0, #5
}
   b67ec:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b67ee:	2000      	movs	r0, #0
   b67f0:	e7fc      	b.n	b67ec <_ZNK6String6equalsERKS_+0x14>

000b67f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b67f2:	4770      	bx	lr

000b67f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b67f4:	4770      	bx	lr

000b67f6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b67f6:	4770      	bx	lr

000b67f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b67f8:	4770      	bx	lr
	...

000b67fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b67fc:	4b06      	ldr	r3, [pc, #24]	; (b6818 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b67fe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6800:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6802:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6806:	d005      	beq.n	b6814 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6808:	4608      	mov	r0, r1
   b680a:	f002 ffe1 	bl	b97d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b680e:	2800      	cmp	r0, #0
   b6810:	bf08      	it	eq
   b6812:	2400      	moveq	r4, #0
      }
   b6814:	4620      	mov	r0, r4
   b6816:	bd10      	pop	{r4, pc}
   b6818:	000bab44 	.word	0x000bab44

000b681c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b681c:	4b06      	ldr	r3, [pc, #24]	; (b6838 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b681e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6820:	b510      	push	{r4, lr}
   b6822:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6826:	d005      	beq.n	b6834 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6828:	4608      	mov	r0, r1
   b682a:	f002 ffd1 	bl	b97d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b682e:	2800      	cmp	r0, #0
   b6830:	bf08      	it	eq
   b6832:	2400      	moveq	r4, #0
      }
   b6834:	4620      	mov	r0, r4
   b6836:	bd10      	pop	{r4, pc}
   b6838:	000bab44 	.word	0x000bab44

000b683c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b683c:	4b06      	ldr	r3, [pc, #24]	; (b6858 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b683e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6840:	b510      	push	{r4, lr}
   b6842:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6846:	d005      	beq.n	b6854 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6848:	4608      	mov	r0, r1
   b684a:	f002 ffc1 	bl	b97d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b684e:	2800      	cmp	r0, #0
   b6850:	bf08      	it	eq
   b6852:	2400      	moveq	r4, #0
      }
   b6854:	4620      	mov	r0, r4
   b6856:	bd10      	pop	{r4, pc}
   b6858:	000bab44 	.word	0x000bab44

000b685c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b685c:	b510      	push	{r4, lr}
   b685e:	2168      	movs	r1, #104	; 0x68
   b6860:	4604      	mov	r4, r0
   b6862:	f7fd fc1a 	bl	b409a <_ZdlPvj>
   b6866:	4620      	mov	r0, r4
   b6868:	bd10      	pop	{r4, pc}

000b686a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b686a:	b510      	push	{r4, lr}
   b686c:	2128      	movs	r1, #40	; 0x28
   b686e:	4604      	mov	r4, r0
   b6870:	f7fd fc13 	bl	b409a <_ZdlPvj>
   b6874:	4620      	mov	r0, r4
   b6876:	bd10      	pop	{r4, pc}

000b6878 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6878:	b510      	push	{r4, lr}
   b687a:	2130      	movs	r1, #48	; 0x30
   b687c:	4604      	mov	r4, r0
   b687e:	f7fd fc0c 	bl	b409a <_ZdlPvj>
   b6882:	4620      	mov	r0, r4
   b6884:	bd10      	pop	{r4, pc}

000b6886 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6886:	2168      	movs	r1, #104	; 0x68
   b6888:	f7fd bc07 	b.w	b409a <_ZdlPvj>

000b688c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b688c:	2128      	movs	r1, #40	; 0x28
   b688e:	f7fd bc04 	b.w	b409a <_ZdlPvj>

000b6892 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6892:	2130      	movs	r1, #48	; 0x30
   b6894:	f7fd bc01 	b.w	b409a <_ZdlPvj>

000b6898 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6898:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b689a:	2500      	movs	r5, #0
   b689c:	1cec      	adds	r4, r5, #3
   b689e:	428c      	cmp	r4, r1
   b68a0:	d80d      	bhi.n	b68be <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b68a2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b68a4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b68a6:	5d87      	ldrb	r7, [r0, r6]
   b68a8:	4297      	cmp	r7, r2
   b68aa:	d105      	bne.n	b68b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b68ac:	4426      	add	r6, r4
   b68ae:	42b1      	cmp	r1, r6
   b68b0:	d305      	bcc.n	b68be <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b68b2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b68b4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b68b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b68b8:	3401      	adds	r4, #1
   b68ba:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b68bc:	e7ee      	b.n	b689c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b68be:	2000      	movs	r0, #0
   b68c0:	e7f9      	b.n	b68b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b68c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b68c4:	4a02      	ldr	r2, [pc, #8]	; (b68d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b68c6:	4903      	ldr	r1, [pc, #12]	; (b68d4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b68c8:	200a      	movs	r0, #10
   b68ca:	f7ff bc61 	b.w	b6190 <panic_>
   b68ce:	bf00      	nop
   b68d0:	000b5d6d 	.word	0x000b5d6d
   b68d4:	000ba988 	.word	0x000ba988

000b68d8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b68d8:	b430      	push	{r4, r5}
   b68da:	460d      	mov	r5, r1
   b68dc:	4611      	mov	r1, r2
   b68de:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b68e0:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b68e2:	6809      	ldr	r1, [r1, #0]
   b68e4:	6828      	ldr	r0, [r5, #0]
   b68e6:	e9d3 4300 	ldrd	r4, r3, [r3]
   b68ea:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b68ec:	bc30      	pop	{r4, r5}
   b68ee:	4760      	bx	ip

000b68f0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b68f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b68f2:	b538      	push	{r3, r4, r5, lr}
   b68f4:	4604      	mov	r4, r0
	switch (__op)
   b68f6:	d102      	bne.n	b68fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b68f8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b68fa:	6023      	str	r3, [r4, #0]
	}
   b68fc:	e003      	b.n	b6906 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b68fe:	2a02      	cmp	r2, #2
   b6900:	d003      	beq.n	b690a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6902:	2a03      	cmp	r2, #3
   b6904:	d00d      	beq.n	b6922 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6906:	2000      	movs	r0, #0
   b6908:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b690a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b690c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b690e:	f7fd fbc0 	bl	b4092 <_Znwj>
   b6912:	4603      	mov	r3, r0
   b6914:	2800      	cmp	r0, #0
   b6916:	d0f0      	beq.n	b68fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6918:	e895 0003 	ldmia.w	r5, {r0, r1}
   b691c:	e883 0003 	stmia.w	r3, {r0, r1}
   b6920:	e7eb      	b.n	b68fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6922:	6800      	ldr	r0, [r0, #0]
   b6924:	2800      	cmp	r0, #0
   b6926:	d0ee      	beq.n	b6906 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6928:	2108      	movs	r1, #8
   b692a:	f7fd fbb6 	bl	b409a <_ZdlPvj>
   b692e:	e7ea      	b.n	b6906 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6930 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b6930:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b6932:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b6934:	4604      	mov	r4, r0
	if (_M_manager)
   b6936:	b12b      	cbz	r3, b6944 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6938:	2203      	movs	r2, #3
   b693a:	4601      	mov	r1, r0
   b693c:	4798      	blx	r3
	    _M_manager = nullptr;
   b693e:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b6940:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b6944:	bd10      	pop	{r4, pc}

000b6946 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b6946:	b510      	push	{r4, lr}
	if (_M_manager)
   b6948:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b694a:	4604      	mov	r4, r0
	if (_M_manager)
   b694c:	b12b      	cbz	r3, b695a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b694e:	2203      	movs	r2, #3
   b6950:	4601      	mov	r1, r0
   b6952:	4798      	blx	r3
	    _M_manager = nullptr;
   b6954:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b6956:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b695a:	bd10      	pop	{r4, pc}

000b695c <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b695c:	b510      	push	{r4, lr}
   b695e:	3801      	subs	r0, #1
   b6960:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b6964:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b6968:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b696a:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b696e:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b6970:	bf88      	it	hi
   b6972:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b6976:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b697a:	7803      	ldrb	r3, [r0, #0]
   b697c:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b6980:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b6984:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b6986:	bf88      	it	hi
   b6988:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b698c:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b698e:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b6992:	d1e7      	bne.n	b6964 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b6994:	bd10      	pop	{r4, pc}

000b6996 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6996:	b510      	push	{r4, lr}
      if (_M_manager)
   b6998:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b699a:	4604      	mov	r4, r0
      if (_M_manager)
   b699c:	b113      	cbz	r3, b69a4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b699e:	2203      	movs	r2, #3
   b69a0:	4601      	mov	r1, r0
   b69a2:	4798      	blx	r3
    }
   b69a4:	4620      	mov	r0, r4
   b69a6:	bd10      	pop	{r4, pc}

000b69a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b69a8:	b510      	push	{r4, lr}
   b69aa:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b69ac:	3058      	adds	r0, #88	; 0x58
   b69ae:	f7ff fff2 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b69b2:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b69b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b69ba:	f7ff be21 	b.w	b6600 <_ZN6StringD1Ev>

000b69be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b69be:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b69c0:	6843      	ldr	r3, [r0, #4]
   b69c2:	3b01      	subs	r3, #1
    {
   b69c4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b69c6:	6043      	str	r3, [r0, #4]
   b69c8:	b963      	cbnz	r3, b69e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b69ca:	6803      	ldr	r3, [r0, #0]
   b69cc:	689b      	ldr	r3, [r3, #8]
   b69ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b69d0:	68a3      	ldr	r3, [r4, #8]
   b69d2:	3b01      	subs	r3, #1
   b69d4:	60a3      	str	r3, [r4, #8]
   b69d6:	b92b      	cbnz	r3, b69e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b69d8:	6823      	ldr	r3, [r4, #0]
   b69da:	4620      	mov	r0, r4
   b69dc:	68db      	ldr	r3, [r3, #12]
    }
   b69de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b69e2:	4718      	bx	r3
    }
   b69e4:	bd10      	pop	{r4, pc}

000b69e6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b69e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b69ea:	b2da      	uxtb	r2, r3
   b69ec:	2a09      	cmp	r2, #9
   b69ee:	d801      	bhi.n	b69f4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b69f0:	4618      	mov	r0, r3
   b69f2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b69f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b69f8:	2b05      	cmp	r3, #5
   b69fa:	d801      	bhi.n	b6a00 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b69fc:	3857      	subs	r0, #87	; 0x57
   b69fe:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6a00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6a04:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6a06:	bf94      	ite	ls
   b6a08:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6a0a:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b6a0e:	4770      	bx	lr

000b6a10 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6a10:	b510      	push	{r4, lr}
            locked_(false) {
   b6a12:	2300      	movs	r3, #0
   b6a14:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6a16:	4b04      	ldr	r3, [pc, #16]	; (b6a28 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6a18:	4604      	mov	r4, r0
   b6a1a:	6818      	ldr	r0, [r3, #0]
   b6a1c:	f7ff fa40 	bl	b5ea0 <os_mutex_recursive_lock>
        locked_ = true;
   b6a20:	2301      	movs	r3, #1
   b6a22:	7023      	strb	r3, [r4, #0]
    }
   b6a24:	4620      	mov	r0, r4
   b6a26:	bd10      	pop	{r4, pc}
   b6a28:	2003e6d8 	.word	0x2003e6d8

000b6a2c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6a2c:	b510      	push	{r4, lr}
        if (locked_) {
   b6a2e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6a30:	4604      	mov	r4, r0
        if (locked_) {
   b6a32:	b11b      	cbz	r3, b6a3c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6a34:	4b02      	ldr	r3, [pc, #8]	; (b6a40 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6a36:	6818      	ldr	r0, [r3, #0]
   b6a38:	f7ff fa3a 	bl	b5eb0 <os_mutex_recursive_unlock>
    }
   b6a3c:	4620      	mov	r0, r4
   b6a3e:	bd10      	pop	{r4, pc}
   b6a40:	2003e6d8 	.word	0x2003e6d8

000b6a44 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b6a44:	2905      	cmp	r1, #5
    return address_.addr[i];
   b6a46:	bf94      	ite	ls
   b6a48:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b6a4a:	2000      	movhi	r0, #0
}
   b6a4c:	4770      	bx	lr

000b6a4e <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6a4e:	b082      	sub	sp, #8
   b6a50:	4603      	mov	r3, r0
    address_ = addr;
   b6a52:	6808      	ldr	r0, [r1, #0]
   b6a54:	6849      	ldr	r1, [r1, #4]
   b6a56:	466a      	mov	r2, sp
   b6a58:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6a5a:	466a      	mov	r2, sp
   b6a5c:	ca03      	ldmia	r2!, {r0, r1}
   b6a5e:	6018      	str	r0, [r3, #0]
}
   b6a60:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6a62:	6059      	str	r1, [r3, #4]
}
   b6a64:	b002      	add	sp, #8
   b6a66:	4770      	bx	lr

000b6a68 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6a68:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6a6a:	7982      	ldrb	r2, [r0, #6]
   b6a6c:	798b      	ldrb	r3, [r1, #6]
   b6a6e:	429a      	cmp	r2, r3
   b6a70:	d106      	bne.n	b6a80 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6a72:	2206      	movs	r2, #6
   b6a74:	f002 ffdc 	bl	b9a30 <memcmp>
   b6a78:	fab0 f080 	clz	r0, r0
   b6a7c:	0940      	lsrs	r0, r0, #5
}
   b6a7e:	bd08      	pop	{r3, pc}
    return false;
   b6a80:	2000      	movs	r0, #0
   b6a82:	e7fc      	b.n	b6a7e <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6a84 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6a84:	f04f 33ff 	mov.w	r3, #4294967295
   b6a88:	6003      	str	r3, [r0, #0]
   b6a8a:	8083      	strh	r3, [r0, #4]
}
   b6a8c:	2000      	movs	r0, #0
   b6a8e:	4770      	bx	lr

000b6a90 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4602      	mov	r2, r0
        : address_{} {
   b6a94:	2100      	movs	r1, #0
   b6a96:	6001      	str	r1, [r0, #0]
   b6a98:	6041      	str	r1, [r0, #4]
    clear();
   b6a9a:	f7ff fff3 	bl	b6a84 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6a9e:	7191      	strb	r1, [r2, #6]
}
   b6aa0:	4610      	mov	r0, r2
   b6aa2:	bd08      	pop	{r3, pc}

000b6aa4 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b6aa4:	b510      	push	{r4, lr}
   b6aa6:	1d43      	adds	r3, r0, #5
   b6aa8:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b6aaa:	781c      	ldrb	r4, [r3, #0]
   b6aac:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b6ab0:	4283      	cmp	r3, r0
   b6ab2:	f103 33ff 	add.w	r3, r3, #4294967295
   b6ab6:	d1f8      	bne.n	b6aaa <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b6ab8:	bd10      	pop	{r4, pc}

000b6aba <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b6aba:	b570      	push	{r4, r5, r6, lr}
   b6abc:	4614      	mov	r4, r2
   b6abe:	b088      	sub	sp, #32
   b6ac0:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b6ac2:	460d      	mov	r5, r1
   b6ac4:	2900      	cmp	r1, #0
   b6ac6:	d048      	beq.n	b6b5a <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b6ac8:	b1a4      	cbz	r4, b6af4 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b6aca:	a901      	add	r1, sp, #4
   b6acc:	f7ff ffea 	bl	b6aa4 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b6ad0:	b19a      	cbz	r2, b6afa <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b6ad2:	aa03      	add	r2, sp, #12
   b6ad4:	2106      	movs	r1, #6
   b6ad6:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b6ad8:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b6ada:	f7ff ff3f 	bl	b695c <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b6ade:	2e11      	cmp	r6, #17
   b6ae0:	bf28      	it	cs
   b6ae2:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b6ae4:	4632      	mov	r2, r6
   b6ae6:	a903      	add	r1, sp, #12
   b6ae8:	4628      	mov	r0, r5
   b6aea:	f002 ffb1 	bl	b9a50 <memcpy>
    buf[len++] = '\0';
   b6aee:	2300      	movs	r3, #0
   b6af0:	55ab      	strb	r3, [r5, r6]
   b6af2:	1c74      	adds	r4, r6, #1
}
   b6af4:	4620      	mov	r0, r4
   b6af6:	b008      	add	sp, #32
   b6af8:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b6afa:	aa03      	add	r2, sp, #12
   b6afc:	2101      	movs	r1, #1
   b6afe:	a801      	add	r0, sp, #4
   b6b00:	f7ff ff2c 	bl	b695c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b6b04:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b6b06:	f10d 020f 	add.w	r2, sp, #15
   b6b0a:	2101      	movs	r1, #1
   b6b0c:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b6b10:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b6b14:	f7ff ff22 	bl	b695c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b6b18:	f10d 0212 	add.w	r2, sp, #18
   b6b1c:	2101      	movs	r1, #1
   b6b1e:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b6b22:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b6b26:	f7ff ff19 	bl	b695c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b6b2a:	f10d 0215 	add.w	r2, sp, #21
   b6b2e:	2101      	movs	r1, #1
   b6b30:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b6b34:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b6b38:	f7ff ff10 	bl	b695c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b6b3c:	aa06      	add	r2, sp, #24
   b6b3e:	2101      	movs	r1, #1
   b6b40:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b6b42:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b6b46:	f7ff ff09 	bl	b695c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b6b4a:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b6b4e:	f10d 021b 	add.w	r2, sp, #27
   b6b52:	2101      	movs	r1, #1
   b6b54:	f10d 0009 	add.w	r0, sp, #9
   b6b58:	e7be      	b.n	b6ad8 <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b6b5a:	460c      	mov	r4, r1
   b6b5c:	e7ca      	b.n	b6af4 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b6b5e <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b6b5e:	b510      	push	{r4, lr}
   b6b60:	b086      	sub	sp, #24
   b6b62:	4604      	mov	r4, r0
   b6b64:	4613      	mov	r3, r2
   b6b66:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b6b68:	2212      	movs	r2, #18
   b6b6a:	a901      	add	r1, sp, #4
   b6b6c:	f7ff ffa5 	bl	b6aba <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b6b70:	a901      	add	r1, sp, #4
   b6b72:	4620      	mov	r0, r4
   b6b74:	f7ff fd8f 	bl	b6696 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6b78:	4620      	mov	r0, r4
   b6b7a:	b006      	add	sp, #24
   b6b7c:	bd10      	pop	{r4, pc}
	...

000b6b80 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6b80:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6b82:	2301      	movs	r3, #1
   b6b84:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6b86:	4b05      	ldr	r3, [pc, #20]	; (b6b9c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6b88:	4602      	mov	r2, r0
   b6b8a:	f103 0110 	add.w	r1, r3, #16
   b6b8e:	f853 4b04 	ldr.w	r4, [r3], #4
   b6b92:	f842 4b04 	str.w	r4, [r2], #4
   b6b96:	428b      	cmp	r3, r1
   b6b98:	d1f9      	bne.n	b6b8e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6b9a:	bd10      	pop	{r4, pc}
   b6b9c:	000bab52 	.word	0x000bab52

000b6ba0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6ba0:	b510      	push	{r4, lr}
    if (uuid128) {
   b6ba2:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6ba4:	4604      	mov	r4, r0
    if (uuid128) {
   b6ba6:	b1b1      	cbz	r1, b6bd6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6ba8:	2a01      	cmp	r2, #1
   b6baa:	f101 0210 	add.w	r2, r1, #16
   b6bae:	d10a      	bne.n	b6bc6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6bb0:	4601      	mov	r1, r0
   b6bb2:	f853 0b04 	ldr.w	r0, [r3], #4
   b6bb6:	f841 0b04 	str.w	r0, [r1], #4
   b6bba:	4293      	cmp	r3, r2
   b6bbc:	d1f9      	bne.n	b6bb2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6bbe:	2301      	movs	r3, #1
   b6bc0:	6123      	str	r3, [r4, #16]
}
   b6bc2:	4620      	mov	r0, r4
   b6bc4:	bd10      	pop	{r4, pc}
   b6bc6:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6bc8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6bcc:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6bd0:	429a      	cmp	r2, r3
   b6bd2:	d1f9      	bne.n	b6bc8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6bd4:	e7f3      	b.n	b6bbe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6bd6:	2210      	movs	r2, #16
   b6bd8:	f002 ff62 	bl	b9aa0 <memset>
   b6bdc:	e7f1      	b.n	b6bc2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6bde <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b6bde:	b538      	push	{r3, r4, r5, lr}
   b6be0:	4604      	mov	r4, r0
   b6be2:	460d      	mov	r5, r1
        : BleUuid() {
   b6be4:	f7ff ffcc 	bl	b6b80 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b6be8:	2300      	movs	r3, #0
   b6bea:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6bec:	81a5      	strh	r5, [r4, #12]
}
   b6bee:	4620      	mov	r0, r4
   b6bf0:	bd38      	pop	{r3, r4, r5, pc}

000b6bf2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6bf2:	b538      	push	{r3, r4, r5, lr}
   b6bf4:	4604      	mov	r4, r0
   b6bf6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6bf8:	461a      	mov	r2, r3
   b6bfa:	f7ff ffd1 	bl	b6ba0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6bfe:	81a5      	strh	r5, [r4, #12]
}
   b6c00:	4620      	mov	r0, r4
   b6c02:	bd38      	pop	{r3, r4, r5, pc}

000b6c04 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6c04:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6c06:	6902      	ldr	r2, [r0, #16]
   b6c08:	b922      	cbnz	r2, b6c14 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6c0a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6c0c:	3800      	subs	r0, #0
   b6c0e:	bf18      	it	ne
   b6c10:	2001      	movne	r0, #1
}
   b6c12:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6c14:	4902      	ldr	r1, [pc, #8]	; (b6c20 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6c16:	2210      	movs	r2, #16
   b6c18:	f002 ff0a 	bl	b9a30 <memcmp>
   b6c1c:	e7f6      	b.n	b6c0c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6c1e:	bf00      	nop
   b6c20:	000bab72 	.word	0x000bab72

000b6c24 <_ZNK8particle7BleUuid4typeEv>:
}
   b6c24:	6900      	ldr	r0, [r0, #16]
   b6c26:	4770      	bx	lr

000b6c28 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6c28:	b538      	push	{r3, r4, r5, lr}
   b6c2a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6c2c:	2214      	movs	r2, #20
   b6c2e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6c30:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6c32:	f002 ff35 	bl	b9aa0 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6c36:	6923      	ldr	r3, [r4, #16]
   b6c38:	b91b      	cbnz	r3, b6c42 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6c3a:	89a3      	ldrh	r3, [r4, #12]
   b6c3c:	802b      	strh	r3, [r5, #0]
}
   b6c3e:	4628      	mov	r0, r5
   b6c40:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6c42:	2301      	movs	r3, #1
   b6c44:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6c46:	4621      	mov	r1, r4
   b6c48:	462b      	mov	r3, r5
   b6c4a:	f104 0210 	add.w	r2, r4, #16
   b6c4e:	f851 0b04 	ldr.w	r0, [r1], #4
   b6c52:	f843 0b04 	str.w	r0, [r3], #4
   b6c56:	4291      	cmp	r1, r2
   b6c58:	d1f9      	bne.n	b6c4e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6c5a:	e7f0      	b.n	b6c3e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6c5c <_ZNK8particle7BleUuid7shortedEv>:
}
   b6c5c:	8980      	ldrh	r0, [r0, #12]
   b6c5e:	4770      	bx	lr

000b6c60 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6c60:	4770      	bx	lr

000b6c62 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6c62:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6c64:	6902      	ldr	r2, [r0, #16]
   b6c66:	690b      	ldr	r3, [r1, #16]
   b6c68:	429a      	cmp	r2, r3
   b6c6a:	d106      	bne.n	b6c7a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6c6c:	2210      	movs	r2, #16
   b6c6e:	f002 fedf 	bl	b9a30 <memcmp>
   b6c72:	fab0 f080 	clz	r0, r0
   b6c76:	0940      	lsrs	r0, r0, #5
}
   b6c78:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6c7a:	2000      	movs	r0, #0
   b6c7c:	e7fc      	b.n	b6c78 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6c80 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6c80:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6c82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6c86:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6c88:	4b34      	ldr	r3, [pc, #208]	; (b6d5c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6c8a:	460c      	mov	r4, r1
   b6c8c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6c8e:	4602      	mov	r2, r0
   b6c90:	f103 0110 	add.w	r1, r3, #16
   b6c94:	f853 0b04 	ldr.w	r0, [r3], #4
   b6c98:	f842 0b04 	str.w	r0, [r2], #4
   b6c9c:	428b      	cmp	r3, r1
   b6c9e:	d1f9      	bne.n	b6c94 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6ca0:	b344      	cbz	r4, b6cf4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6ca2:	2124      	movs	r1, #36	; 0x24
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	f002 ff5e 	bl	b9b66 <strnlen>
   b6caa:	2804      	cmp	r0, #4
   b6cac:	f04f 0500 	mov.w	r5, #0
   b6cb0:	d123      	bne.n	b6cfa <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6cb2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6cb6:	af01      	add	r7, sp, #4
   b6cb8:	1ca5      	adds	r5, r4, #2
   b6cba:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6cbc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6cc0:	f7ff fe91 	bl	b69e6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6cc4:	f1b0 0800 	subs.w	r8, r0, #0
   b6cc8:	db12      	blt.n	b6cf0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6cca:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6cce:	f7ff fe8a 	bl	b69e6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6cd2:	2800      	cmp	r0, #0
   b6cd4:	db0c      	blt.n	b6cf0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6cd6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6cd8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6cdc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6cde:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6ce2:	d1eb      	bne.n	b6cbc <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6ce4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6ce8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6cee:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6cf0:	2300      	movs	r3, #0
   b6cf2:	6133      	str	r3, [r6, #16]
}
   b6cf4:	b002      	add	sp, #8
   b6cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6cfa:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6cfe:	2124      	movs	r1, #36	; 0x24
   b6d00:	4620      	mov	r0, r4
   b6d02:	f002 ff30 	bl	b9b66 <strnlen>
   b6d06:	42a8      	cmp	r0, r5
   b6d08:	d807      	bhi.n	b6d1a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6d0a:	4642      	mov	r2, r8
   b6d0c:	2100      	movs	r1, #0
   b6d0e:	4630      	mov	r0, r6
}
   b6d10:	b002      	add	sp, #8
   b6d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6d16:	f002 bec3 	b.w	b9aa0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6d1a:	f1b8 0f00 	cmp.w	r8, #0
   b6d1e:	d0e9      	beq.n	b6cf4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6d20:	5d60      	ldrb	r0, [r4, r5]
   b6d22:	f7ff fe60 	bl	b69e6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6d26:	0603      	lsls	r3, r0, #24
   b6d28:	d415      	bmi.n	b6d56 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6d2a:	0100      	lsls	r0, r0, #4
   b6d2c:	f108 38ff 	add.w	r8, r8, #4294967295
   b6d30:	b2c7      	uxtb	r7, r0
   b6d32:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6d36:	2124      	movs	r1, #36	; 0x24
   b6d38:	4620      	mov	r0, r4
   b6d3a:	f002 ff14 	bl	b9b66 <strnlen>
   b6d3e:	3501      	adds	r5, #1
   b6d40:	42a8      	cmp	r0, r5
   b6d42:	d908      	bls.n	b6d56 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6d44:	5d60      	ldrb	r0, [r4, r5]
   b6d46:	f7ff fe4e 	bl	b69e6 <_ZN8particle11hexToNibbleEc>
   b6d4a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6d4c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6d4e:	bfa4      	itt	ge
   b6d50:	4338      	orrge	r0, r7
   b6d52:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6d56:	3501      	adds	r5, #1
   b6d58:	e7d1      	b.n	b6cfe <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6d5a:	bf00      	nop
   b6d5c:	000bab52 	.word	0x000bab52

000b6d60 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6d60:	b513      	push	{r0, r1, r4, lr}
   b6d62:	4604      	mov	r4, r0
   b6d64:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6d66:	f7ff ff0b 	bl	b6b80 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6d6a:	4620      	mov	r0, r4
   b6d6c:	9901      	ldr	r1, [sp, #4]
   b6d6e:	f7ff ff87 	bl	b6c80 <_ZN8particle7BleUuid9constructEPKc>
}
   b6d72:	4620      	mov	r0, r4
   b6d74:	b002      	add	sp, #8
   b6d76:	bd10      	pop	{r4, pc}

000b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b6d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6d7a:	4605      	mov	r5, r0
   b6d7c:	4616      	mov	r6, r2
   b6d7e:	461f      	mov	r7, r3
   b6d80:	460a      	mov	r2, r1
   b6d82:	ab01      	add	r3, sp, #4
   b6d84:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6d88:	f7ff fd86 	bl	b6898 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b6d8c:	f030 0402 	bics.w	r4, r0, #2
   b6d90:	d00c      	beq.n	b6dac <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b6d92:	1e84      	subs	r4, r0, #2
   b6d94:	42bc      	cmp	r4, r7
   b6d96:	bf28      	it	cs
   b6d98:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b6d9a:	b13e      	cbz	r6, b6dac <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b6d9c:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b6d9e:	682b      	ldr	r3, [r5, #0]
   b6da0:	3102      	adds	r1, #2
   b6da2:	4622      	mov	r2, r4
   b6da4:	4419      	add	r1, r3
   b6da6:	4630      	mov	r0, r6
   b6da8:	f002 fe52 	bl	b9a50 <memcpy>
}
   b6dac:	4620      	mov	r0, r4
   b6dae:	b003      	add	sp, #12
   b6db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6db2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6db4:	4613      	mov	r3, r2
   b6db6:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6db8:	9201      	str	r2, [sp, #4]
   b6dba:	460a      	mov	r2, r1
   b6dbc:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6dbe:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6dc0:	f7ff ffda 	bl	b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b6dc4:	b940      	cbnz	r0, b6dd8 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6dc6:	9b01      	ldr	r3, [sp, #4]
   b6dc8:	4622      	mov	r2, r4
   b6dca:	2109      	movs	r1, #9
   b6dcc:	4628      	mov	r0, r5
}
   b6dce:	b003      	add	sp, #12
   b6dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6dd4:	f7ff bfd0 	b.w	b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b6dd8:	b003      	add	sp, #12
   b6dda:	bd30      	pop	{r4, r5, pc}

000b6ddc <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b6ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6dde:	460c      	mov	r4, r1
   b6de0:	b089      	sub	sp, #36	; 0x24
    String name;
   b6de2:	490c      	ldr	r1, [pc, #48]	; (b6e14 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b6de4:	4605      	mov	r5, r0
    String name;
   b6de6:	f7ff fc56 	bl	b6696 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b6dea:	221f      	movs	r2, #31
   b6dec:	4669      	mov	r1, sp
   b6dee:	4620      	mov	r0, r4
   b6df0:	f7ff ffdf 	bl	b6db2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b6df4:	4606      	mov	r6, r0
   b6df6:	b150      	cbz	r0, b6e0e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b6df8:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b6dfa:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b6dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6e00:	4628      	mov	r0, r5
   b6e02:	f7ff fcc7 	bl	b6794 <_ZN6String6concatEc>
   b6e06:	b110      	cbz	r0, b6e0e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b6e08:	3701      	adds	r7, #1
   b6e0a:	42be      	cmp	r6, r7
   b6e0c:	d1f6      	bne.n	b6dfc <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b6e0e:	4628      	mov	r0, r5
   b6e10:	b009      	add	sp, #36	; 0x24
   b6e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6e14:	000b9dfd 	.word	0x000b9dfd

000b6e18 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b6e18:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b6e1a:	2302      	movs	r3, #2
   b6e1c:	aa01      	add	r2, sp, #4
   b6e1e:	2119      	movs	r1, #25
   b6e20:	f7ff ffaa 	bl	b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b6e24:	b108      	cbz	r0, b6e2a <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b6e26:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b6e2a:	b003      	add	sp, #12
   b6e2c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e30 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6e30:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6e36:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6e38:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6e3a:	8043      	strh	r3, [r0, #2]
   b6e3c:	220e      	movs	r2, #14
   b6e3e:	4629      	mov	r1, r5
   b6e40:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6e42:	7105      	strb	r5, [r0, #4]
   b6e44:	3006      	adds	r0, #6
   b6e46:	f002 fe2b 	bl	b9aa0 <memset>
   b6e4a:	f104 0014 	add.w	r0, r4, #20
   b6e4e:	f7ff fe97 	bl	b6b80 <_ZN8particle7BleUuidC1Ev>
   b6e52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6e56:	f7ff fe93 	bl	b6b80 <_ZN8particle7BleUuidC1Ev>
   b6e5a:	4904      	ldr	r1, [pc, #16]	; (b6e6c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6e5c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6e60:	f7ff fc19 	bl	b6696 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6e64:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6e66:	4620      	mov	r0, r4
   b6e68:	bd38      	pop	{r3, r4, r5, pc}
   b6e6a:	bf00      	nop
   b6e6c:	000b9dfd 	.word	0x000b9dfd

000b6e70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6e70:	b510      	push	{r4, lr}
    return data_ + size_;
   b6e72:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6e76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6e7a:	4293      	cmp	r3, r2
   b6e7c:	4618      	mov	r0, r3
   b6e7e:	d006      	beq.n	b6e8e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6e80:	6804      	ldr	r4, [r0, #0]
   b6e82:	8824      	ldrh	r4, [r4, #0]
   b6e84:	428c      	cmp	r4, r1
   b6e86:	f103 0308 	add.w	r3, r3, #8
   b6e8a:	d1f6      	bne.n	b6e7a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6e8c:	bd10      	pop	{r4, pc}
        return nullptr;
   b6e8e:	2000      	movs	r0, #0
   b6e90:	e7fc      	b.n	b6e8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6e94 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6e98:	2600      	movs	r6, #0
   b6e9a:	6006      	str	r6, [r0, #0]
   b6e9c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6e9e:	2028      	movs	r0, #40	; 0x28
   b6ea0:	460c      	mov	r4, r1
   b6ea2:	f7fd f8f6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6ea6:	1e05      	subs	r5, r0, #0
   b6ea8:	f105 080c 	add.w	r8, r5, #12
   b6eac:	d00f      	beq.n	b6ece <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6eae:	2301      	movs	r3, #1
   b6eb0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6eb4:	4b08      	ldr	r3, [pc, #32]	; (b6ed8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6eb6:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6eb8:	4640      	mov	r0, r8
   b6eba:	f7ff fe61 	bl	b6b80 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6ec0:	622e      	str	r6, [r5, #32]
   b6ec2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6ec6:	4646      	mov	r6, r8
   b6ec8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6eca:	6823      	ldr	r3, [r4, #0]
   b6ecc:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6ece:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6ed2:	4638      	mov	r0, r7
   b6ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6ed8:	000bab14 	.word	0x000bab14

000b6edc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6edc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6ede:	2500      	movs	r5, #0
   b6ee0:	6005      	str	r5, [r0, #0]
   b6ee2:	4606      	mov	r6, r0
   b6ee4:	2030      	movs	r0, #48	; 0x30
   b6ee6:	f7fd f8d4 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6eea:	4604      	mov	r4, r0
   b6eec:	b188      	cbz	r0, b6f12 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6eee:	2301      	movs	r3, #1
   b6ef0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6ef4:	4b09      	ldr	r3, [pc, #36]	; (b6f1c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6ef6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6efc:	8183      	strh	r3, [r0, #12]
   b6efe:	300e      	adds	r0, #14
   b6f00:	f7ff fdc6 	bl	b6a90 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6f04:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6f08:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6f0c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6f10:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6f12:	6074      	str	r4, [r6, #4]
   b6f14:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6f16:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6f18:	4630      	mov	r0, r6
   b6f1a:	bd70      	pop	{r4, r5, r6, pc}
   b6f1c:	000bab30 	.word	0x000bab30

000b6f20 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6f22:	460d      	mov	r5, r1
   b6f24:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6f26:	a801      	add	r0, sp, #4
   b6f28:	f7ff fd72 	bl	b6a10 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6f2c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6f2e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6f32:	6023      	str	r3, [r4, #0]
   b6f34:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6f38:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6f3a:	a801      	add	r0, sp, #4
   b6f3c:	f7ff fd76 	bl	b6a2c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6f40:	4620      	mov	r0, r4
   b6f42:	b003      	add	sp, #12
   b6f44:	bd30      	pop	{r4, r5, pc}

000b6f46 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6f46:	b530      	push	{r4, r5, lr}
   b6f48:	4605      	mov	r5, r0
   b6f4a:	b087      	sub	sp, #28
   b6f4c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6f4e:	a801      	add	r0, sp, #4
   b6f50:	f7ff fd5e 	bl	b6a10 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6f54:	682a      	ldr	r2, [r5, #0]
   b6f56:	6823      	ldr	r3, [r4, #0]
   b6f58:	8812      	ldrh	r2, [r2, #0]
   b6f5a:	881b      	ldrh	r3, [r3, #0]
   b6f5c:	429a      	cmp	r2, r3
   b6f5e:	d10d      	bne.n	b6f7c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6f60:	4629      	mov	r1, r5
   b6f62:	a802      	add	r0, sp, #8
   b6f64:	f7ff ffdc 	bl	b6f20 <_ZNK8particle13BlePeerDevice7addressEv>
   b6f68:	4621      	mov	r1, r4
   b6f6a:	a804      	add	r0, sp, #16
   b6f6c:	f7ff ffd8 	bl	b6f20 <_ZNK8particle13BlePeerDevice7addressEv>
   b6f70:	a904      	add	r1, sp, #16
   b6f72:	a802      	add	r0, sp, #8
   b6f74:	f7ff fd78 	bl	b6a68 <_ZNK8particle10BleAddresseqERKS0_>
   b6f78:	4604      	mov	r4, r0
   b6f7a:	b900      	cbnz	r0, b6f7e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6f7c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6f7e:	a801      	add	r0, sp, #4
   b6f80:	f7ff fd54 	bl	b6a2c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6f84:	4620      	mov	r0, r4
   b6f86:	b007      	add	sp, #28
   b6f88:	bd30      	pop	{r4, r5, pc}
	...

000b6f8c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6f8c:	b510      	push	{r4, lr}
   b6f8e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6f90:	2064      	movs	r0, #100	; 0x64
   b6f92:	f7fd f87e 	bl	b4092 <_Znwj>
   b6f96:	b168      	cbz	r0, b6fb4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6f98:	2300      	movs	r3, #0
   b6f9a:	e9c0 3300 	strd	r3, r3, [r0]
   b6f9e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6fa6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6faa:	6203      	str	r3, [r0, #32]
   b6fac:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6fae:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6fb0:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6fb2:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6fb4:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6fb6:	b920      	cbnz	r0, b6fc2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6fb8:	4a0a      	ldr	r2, [pc, #40]	; (b6fe4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6fba:	490b      	ldr	r1, [pc, #44]	; (b6fe8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6fbc:	200a      	movs	r0, #10
   b6fbe:	f7ff f8e7 	bl	b6190 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6fc2:	2000      	movs	r0, #0
   b6fc4:	f7fe fef2 	bl	b5dac <hal_ble_stack_init>
   b6fc8:	b120      	cbz	r0, b6fd4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6fca:	4a06      	ldr	r2, [pc, #24]	; (b6fe4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6fcc:	4907      	ldr	r1, [pc, #28]	; (b6fec <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6fce:	200a      	movs	r0, #10
   b6fd0:	f7ff f8de 	bl	b6190 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6fd4:	6821      	ldr	r1, [r4, #0]
   b6fd6:	4806      	ldr	r0, [pc, #24]	; (b6ff0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6fd8:	2200      	movs	r2, #0
   b6fda:	f7fe ff4f 	bl	b5e7c <hal_ble_set_callback_on_periph_link_events>
}
   b6fde:	4620      	mov	r0, r4
   b6fe0:	bd10      	pop	{r4, pc}
   b6fe2:	bf00      	nop
   b6fe4:	000b5d6d 	.word	0x000b5d6d
   b6fe8:	000ba988 	.word	0x000ba988
   b6fec:	000ba9c6 	.word	0x000ba9c6
   b6ff0:	000b7ae9 	.word	0x000b7ae9

000b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6ff4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6ff6:	4c0a      	ldr	r4, [pc, #40]	; (b7020 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6ff8:	7823      	ldrb	r3, [r4, #0]
   b6ffa:	f3bf 8f5b 	dmb	ish
   b6ffe:	07db      	lsls	r3, r3, #31
   b7000:	d40c      	bmi.n	b701c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7002:	4620      	mov	r0, r4
   b7004:	f7fd f858 	bl	b40b8 <__cxa_guard_acquire>
   b7008:	b140      	cbz	r0, b701c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b700a:	4806      	ldr	r0, [pc, #24]	; (b7024 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b700c:	f7ff ffbe 	bl	b6f8c <_ZN8particle14BleLocalDeviceC1Ev>
   b7010:	4620      	mov	r0, r4
   b7012:	f7fd f856 	bl	b40c2 <__cxa_guard_release>
   b7016:	4804      	ldr	r0, [pc, #16]	; (b7028 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7018:	f002 fcec 	bl	b99f4 <atexit>
    return instance;
}
   b701c:	4801      	ldr	r0, [pc, #4]	; (b7024 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b701e:	bd10      	pop	{r4, pc}
   b7020:	2003e6d0 	.word	0x2003e6d0
   b7024:	2003e6dc 	.word	0x2003e6dc
   b7028:	000b73c9 	.word	0x000b73c9

000b702c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b702c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b702e:	6803      	ldr	r3, [r0, #0]
   b7030:	3b09      	subs	r3, #9
   b7032:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7034:	b08d      	sub	sp, #52	; 0x34
   b7036:	4604      	mov	r4, r0
   b7038:	460d      	mov	r5, r1
    switch (event->type) {
   b703a:	d811      	bhi.n	b7060 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b703c:	f7ff ffda 	bl	b6ff4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7040:	88a1      	ldrh	r1, [r4, #4]
   b7042:	6800      	ldr	r0, [r0, #0]
   b7044:	f7ff ff14 	bl	b6e70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7048:	4603      	mov	r3, r0
   b704a:	b958      	cbnz	r0, b7064 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b704c:	2220      	movs	r2, #32
   b704e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7052:	4a0b      	ldr	r2, [pc, #44]	; (b7080 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7054:	9200      	str	r2, [sp, #0]
   b7056:	490b      	ldr	r1, [pc, #44]	; (b7084 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7058:	aa04      	add	r2, sp, #16
   b705a:	2032      	movs	r0, #50	; 0x32
   b705c:	f7ff f8a0 	bl	b61a0 <log_message>
}
   b7060:	b00d      	add	sp, #52	; 0x34
   b7062:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7064:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7066:	2a00      	cmp	r2, #0
   b7068:	d0fa      	beq.n	b7060 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b706a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b706e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7072:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7076:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7078:	aa04      	add	r2, sp, #16
   b707a:	a903      	add	r1, sp, #12
   b707c:	47a0      	blx	r4
}
   b707e:	e7ef      	b.n	b7060 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7080:	000baa08 	.word	0x000baa08
   b7084:	000ba99f 	.word	0x000ba99f

000b7088 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7088:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b708a:	2000      	movs	r0, #0
   b708c:	f7fe fe8e 	bl	b5dac <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7090:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7094:	bd08      	pop	{r3, pc}

000b7096 <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   b7096:	b513      	push	{r0, r1, r4, lr}
   b7098:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   b709a:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   b709c:	4668      	mov	r0, sp
    hal_ble_addr_t halAddr = {};
   b709e:	e9cd 1100 	strd	r1, r1, [sp]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   b70a2:	f7fe fe8b 	bl	b5dbc <hal_ble_gap_get_device_address>
    address_ = addr;
   b70a6:	466b      	mov	r3, sp
   b70a8:	cb03      	ldmia	r3!, {r0, r1}
   b70aa:	6020      	str	r0, [r4, #0]
    return BleAddress(halAddr);
}
   b70ac:	4620      	mov	r0, r4
    address_ = addr;
   b70ae:	6061      	str	r1, [r4, #4]
}
   b70b0:	b002      	add	sp, #8
   b70b2:	bd10      	pop	{r4, pc}

000b70b4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b70b4:	b919      	cbnz	r1, b70be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b70b6:	460a      	mov	r2, r1
   b70b8:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b70ba:	f7fe be87 	b.w	b5dcc <hal_ble_gap_set_advertising_data>
   b70be:	e9d1 0100 	ldrd	r0, r1, [r1]
   b70c2:	2200      	movs	r2, #0
   b70c4:	e7f9      	b.n	b70ba <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>
	...

000b70c8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b70c8:	b570      	push	{r4, r5, r6, lr}
   b70ca:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b70cc:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b70ce:	460e      	mov	r6, r1
   b70d0:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b70d2:	f7ff fc2d 	bl	b6930 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b70d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b70da:	f7ff fc34 	bl	b6946 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b70de:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b70e2:	2200      	movs	r2, #0
   b70e4:	4621      	mov	r1, r4
   b70e6:	4803      	ldr	r0, [pc, #12]	; (b70f4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b70e8:	f7fe fe98 	bl	b5e1c <hal_ble_gap_start_scan>
   b70ec:	2800      	cmp	r0, #0
        return foundCount_;
   b70ee:	bfa8      	it	ge
   b70f0:	6960      	ldrge	r0, [r4, #20]
    }
   b70f2:	bd70      	pop	{r4, r5, r6, pc}
   b70f4:	000b85c9 	.word	0x000b85c9

000b70f8 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b70f8:	b510      	push	{r4, lr}
   b70fa:	4604      	mov	r4, r0
    ::free(ptr);
   b70fc:	6940      	ldr	r0, [r0, #20]
   b70fe:	f7ff f8f3 	bl	b62e8 <free>
   b7102:	68a0      	ldr	r0, [r4, #8]
   b7104:	f7ff f8f0 	bl	b62e8 <free>
   b7108:	4620      	mov	r0, r4
   b710a:	bd10      	pop	{r4, pc}

000b710c <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b710c:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b710e:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b7112:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b7116:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b711a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b711e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b7122:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b7126:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b712a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b712e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b7132:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b7136:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b713a:	6202      	str	r2, [r0, #32]
   b713c:	6302      	str	r2, [r0, #48]	; 0x30
   b713e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b7142:	4770      	bx	lr

000b7144 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b7144:	b530      	push	{r4, r5, lr}
   b7146:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   b7148:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b714a:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b714c:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b714e:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b7152:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   b7154:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b7156:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   b7158:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   b715c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b7160:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b7162:	f7fe fe53 	bl	b5e0c <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b7166:	4621      	mov	r1, r4
   b7168:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   b716a:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b716e:	f7fe fe45 	bl	b5dfc <hal_ble_gap_set_scan_parameters>
}
   b7172:	b005      	add	sp, #20
   b7174:	bd30      	pop	{r4, r5, pc}

000b7176 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7176:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7178:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b717c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b717e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b7182:	42ae      	cmp	r6, r5
   b7184:	d004      	beq.n	b7190 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b7186:	4628      	mov	r0, r5
   b7188:	f7ff fa3a 	bl	b6600 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b718c:	3510      	adds	r5, #16
   b718e:	e7f8      	b.n	b7182 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7190:	6820      	ldr	r0, [r4, #0]
   b7192:	f7ff f8a9 	bl	b62e8 <free>
}
   b7196:	4620      	mov	r0, r4
   b7198:	bd70      	pop	{r4, r5, r6, pc}

000b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b719a:	b510      	push	{r4, lr}
   b719c:	4604      	mov	r4, r0
    ::free(ptr);
   b719e:	6800      	ldr	r0, [r0, #0]
   b71a0:	f7ff f8a2 	bl	b62e8 <free>
}
   b71a4:	4620      	mov	r0, r4
   b71a6:	bd10      	pop	{r4, pc}

000b71a8 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b71a8:	b570      	push	{r4, r5, r6, lr}
   b71aa:	4604      	mov	r4, r0
    ::free(ptr);
   b71ac:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b71ae:	f7ff f89b 	bl	b62e8 <free>
   b71b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b71b4:	f7ff f898 	bl	b62e8 <free>
    }
    ~BleScanFilter() = default;
   b71b8:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b71bc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b71c0:	f7ff ffeb 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b71c4:	4628      	mov	r0, r5
   b71c6:	f7ff ffd6 	bl	b7176 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b71ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b71ce:	f7ff fbe2 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
   b71d2:	f104 0018 	add.w	r0, r4, #24
   b71d6:	f7ff fbde 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b71da:	e9d4 5300 	ldrd	r5, r3, [r4]
   b71de:	2624      	movs	r6, #36	; 0x24
   b71e0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b71e4:	42ae      	cmp	r6, r5
   b71e6:	d004      	beq.n	b71f2 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b71e8:	4628      	mov	r0, r5
   b71ea:	f7ff ff85 	bl	b70f8 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b71ee:	3524      	adds	r5, #36	; 0x24
   b71f0:	e7f8      	b.n	b71e4 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b71f2:	6820      	ldr	r0, [r4, #0]
   b71f4:	f7ff f878 	bl	b62e8 <free>
   b71f8:	4620      	mov	r0, r4
   b71fa:	bd70      	pop	{r4, r5, r6, pc}

000b71fc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b71fc:	b530      	push	{r4, r5, lr}
   b71fe:	4615      	mov	r5, r2
   b7200:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b7202:	460c      	mov	r4, r1
   b7204:	b179      	cbz	r1, b7226 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b7206:	b172      	cbz	r2, b7226 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
   b7208:	a801      	add	r0, sp, #4
   b720a:	f7ff ff7f 	bl	b710c <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b720e:	4621      	mov	r1, r4
   b7210:	462a      	mov	r2, r5
   b7212:	a801      	add	r0, sp, #4
   b7214:	f7ff ff58 	bl	b70c8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b7218:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b721a:	a801      	add	r0, sp, #4
   b721c:	f7ff ffc4 	bl	b71a8 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b7220:	4620      	mov	r0, r4
   b7222:	b01f      	add	sp, #124	; 0x7c
   b7224:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7226:	4c01      	ldr	r4, [pc, #4]	; (b722c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b7228:	e7fa      	b.n	b7220 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b722a:	bf00      	nop
   b722c:	fffffef2 	.word	0xfffffef2

000b7230 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7230:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7232:	1e14      	subs	r4, r2, #0
   b7234:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7236:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7238:	db02      	blt.n	b7240 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b723a:	1862      	adds	r2, r4, r1
   b723c:	429a      	cmp	r2, r3
   b723e:	dd00      	ble.n	b7242 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7240:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7242:	682a      	ldr	r2, [r5, #0]
   b7244:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7246:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7248:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b724a:	1a52      	subs	r2, r2, r1
   b724c:	f002 fc0e 	bl	b9a6c <memmove>
    size_ -= n;
   b7250:	686a      	ldr	r2, [r5, #4]
   b7252:	1b12      	subs	r2, r2, r4
   b7254:	606a      	str	r2, [r5, #4]
}
   b7256:	bd38      	pop	{r3, r4, r5, pc}

000b7258 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7258:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b725a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b725c:	4604      	mov	r4, r0
   b725e:	460d      	mov	r5, r1
   b7260:	ab01      	add	r3, sp, #4
   b7262:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7266:	f7ff fb17 	bl	b6898 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b726a:	4602      	mov	r2, r0
   b726c:	b138      	cbz	r0, b727e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b726e:	9901      	ldr	r1, [sp, #4]
   b7270:	4620      	mov	r0, r4
   b7272:	f7ff ffdd 	bl	b7230 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7276:	4629      	mov	r1, r5
   b7278:	4620      	mov	r0, r4
   b727a:	f7ff ffed 	bl	b7258 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b727e:	b003      	add	sp, #12
   b7280:	bd30      	pop	{r4, r5, pc}

000b7282 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7282:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7284:	460c      	mov	r4, r1
   b7286:	b929      	cbnz	r1, b7294 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7288:	460a      	mov	r2, r1
   b728a:	4608      	mov	r0, r1
}
   b728c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7290:	f7fe bda4 	b.w	b5ddc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7294:	2101      	movs	r1, #1
   b7296:	4620      	mov	r0, r4
   b7298:	f7ff ffde 	bl	b7258 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b729c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b72a0:	2200      	movs	r2, #0
   b72a2:	e7f3      	b.n	b728c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b72a4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b72a4:	b538      	push	{r3, r4, r5, lr}
   b72a6:	4604      	mov	r4, r0
   b72a8:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b72aa:	f7ff ff03 	bl	b70b4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b72ae:	2800      	cmp	r0, #0
   b72b0:	db0a      	blt.n	b72c8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b72b2:	4629      	mov	r1, r5
   b72b4:	4620      	mov	r0, r4
   b72b6:	f7ff ffe4 	bl	b7282 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b72ba:	2800      	cmp	r0, #0
   b72bc:	db04      	blt.n	b72c8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b72be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b72c2:	2000      	movs	r0, #0
   b72c4:	f7fe bd92 	b.w	b5dec <hal_ble_gap_start_advertising>
}
   b72c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b72cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b72cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b72ce:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b72d0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b72d2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72d4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b72d6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72d8:	f7fc fedb 	bl	b4092 <_Znwj>
   b72dc:	b118      	cbz	r0, b72e6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b72de:	682b      	ldr	r3, [r5, #0]
   b72e0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b72e2:	686b      	ldr	r3, [r5, #4]
   b72e4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b72e6:	4b03      	ldr	r3, [pc, #12]	; (b72f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b72e8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b72ea:	4b03      	ldr	r3, [pc, #12]	; (b72f8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72ec:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b72ee:	60a3      	str	r3, [r4, #8]
      }
   b72f0:	4620      	mov	r0, r4
   b72f2:	bd38      	pop	{r3, r4, r5, pc}
   b72f4:	000b68d9 	.word	0x000b68d9
   b72f8:	000b68f1 	.word	0x000b68f1

000b72fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b72fc:	680b      	ldr	r3, [r1, #0]
   b72fe:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7300:	b113      	cbz	r3, b7308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7302:	685a      	ldr	r2, [r3, #4]
   b7304:	3201      	adds	r2, #1
   b7306:	605a      	str	r2, [r3, #4]
      }
   b7308:	4770      	bx	lr

000b730a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b730a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b730c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7310:	4604      	mov	r4, r0
   b7312:	f840 3b04 	str.w	r3, [r0], #4
   b7316:	f7ff fff1 	bl	b72fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b731a:	6823      	ldr	r3, [r4, #0]
   b731c:	b90b      	cbnz	r3, b7322 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b731e:	f7ff fad1 	bl	b68c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7322:	4620      	mov	r0, r4
   b7324:	bd10      	pop	{r4, pc}

000b7326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7326:	b510      	push	{r4, lr}
   b7328:	f851 3b04 	ldr.w	r3, [r1], #4
   b732c:	4604      	mov	r4, r0
   b732e:	f840 3b04 	str.w	r3, [r0], #4
   b7332:	f7ff ffe3 	bl	b72fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7336:	4620      	mov	r0, r4
   b7338:	bd10      	pop	{r4, pc}

000b733a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b733a:	b510      	push	{r4, lr}
   b733c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7340:	4604      	mov	r4, r0
   b7342:	f840 3b04 	str.w	r3, [r0], #4
   b7346:	f7ff ffd9 	bl	b72fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b734a:	4620      	mov	r0, r4
   b734c:	bd10      	pop	{r4, pc}

000b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b734e:	b510      	push	{r4, lr}
   b7350:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7352:	6800      	ldr	r0, [r0, #0]
   b7354:	b108      	cbz	r0, b735a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7356:	f7ff fb32 	bl	b69be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b735a:	4620      	mov	r0, r4
   b735c:	bd10      	pop	{r4, pc}

000b735e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b735e:	b510      	push	{r4, lr}
   b7360:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7362:	3004      	adds	r0, #4
   b7364:	f7ff fff3 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7368:	4620      	mov	r0, r4
   b736a:	bd10      	pop	{r4, pc}

000b736c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b736c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b736e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7372:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7374:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7378:	42ae      	cmp	r6, r5
   b737a:	d004      	beq.n	b7386 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b737c:	1d28      	adds	r0, r5, #4
   b737e:	f7ff ffe6 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7382:	3508      	adds	r5, #8
   b7384:	e7f8      	b.n	b7378 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7386:	6820      	ldr	r0, [r4, #0]
   b7388:	f7fe ffae 	bl	b62e8 <free>
}
   b738c:	4620      	mov	r0, r4
   b738e:	bd70      	pop	{r4, r5, r6, pc}

000b7390 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7390:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7392:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7396:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7398:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b739c:	42ae      	cmp	r6, r5
   b739e:	d004      	beq.n	b73aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b73a0:	1d28      	adds	r0, r5, #4
   b73a2:	f7ff ffd4 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b73a6:	3508      	adds	r5, #8
   b73a8:	e7f8      	b.n	b739c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b73aa:	6820      	ldr	r0, [r4, #0]
   b73ac:	f7fe ff9c 	bl	b62e8 <free>
}
   b73b0:	4620      	mov	r0, r4
   b73b2:	bd70      	pop	{r4, r5, r6, pc}

000b73b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b73b4:	b510      	push	{r4, lr}
   b73b6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b73b8:	3024      	adds	r0, #36	; 0x24
   b73ba:	f7ff ffe9 	bl	b7390 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b73be:	f104 0018 	add.w	r0, r4, #24
   b73c2:	f7ff ffd3 	bl	b736c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b73c6:	bd10      	pop	{r4, pc}

000b73c8 <__tcf_0>:
    static BleLocalDevice instance;
   b73c8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b73ca:	4b17      	ldr	r3, [pc, #92]	; (b7428 <__tcf_0+0x60>)
   b73cc:	681c      	ldr	r4, [r3, #0]
   b73ce:	b354      	cbz	r4, b7426 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b73d0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b73d4:	f7ff fadf 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
   b73d8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b73dc:	f7ff fadb 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
   b73e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b73e4:	f7ff fad7 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
   b73e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b73ec:	f7ff fad3 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b73f0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b73f4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b73f8:	42ae      	cmp	r6, r5
   b73fa:	d004      	beq.n	b7406 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b73fc:	1d28      	adds	r0, r5, #4
   b73fe:	f7ff ffa6 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7402:	3508      	adds	r5, #8
   b7404:	e7f8      	b.n	b73f8 <__tcf_0+0x30>
    ::free(ptr);
   b7406:	69a0      	ldr	r0, [r4, #24]
   b7408:	f7fe ff6e 	bl	b62e8 <free>
    ~BleLocalDeviceImpl() = default;
   b740c:	f104 000c 	add.w	r0, r4, #12
   b7410:	f7ff ffbe 	bl	b7390 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7414:	4620      	mov	r0, r4
   b7416:	f7ff ffa9 	bl	b736c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b741a:	4620      	mov	r0, r4
   b741c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b741e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7422:	f7fc be3a 	b.w	b409a <_ZdlPvj>
   b7426:	bd70      	pop	{r4, r5, r6, pc}
   b7428:	2003e6dc 	.word	0x2003e6dc

000b742c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b742c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b742e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7430:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7434:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b7438:	6803      	ldr	r3, [r0, #0]
   b743a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b743c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b743e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7440:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7442:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7444:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7446:	f7ff ff82 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b744a:	b002      	add	sp, #8
   b744c:	bd10      	pop	{r4, pc}

000b744e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b744e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7450:	b510      	push	{r4, lr}
      if (_M_empty())
   b7452:	b90a      	cbnz	r2, b7458 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7454:	f002 f9b8 	bl	b97c8 <_ZSt25__throw_bad_function_callv>
    }
   b7458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b745c:	68c3      	ldr	r3, [r0, #12]
   b745e:	4718      	bx	r3

000b7460 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b7464:	2300      	movs	r3, #0
   b7466:	e9c0 3300 	strd	r3, r3, [r0]
   b746a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b746c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b7470:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7472:	4605      	mov	r5, r0
   b7474:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7476:	dd4a      	ble.n	b750e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b7478:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b747c:	f7fe ff2c 	bl	b62d8 <malloc>
            if (!d) {
   b7480:	4606      	mov	r6, r0
   b7482:	2800      	cmp	r0, #0
   b7484:	d043      	beq.n	b750e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b7486:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b748a:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b748c:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b7490:	d916      	bls.n	b74c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b7492:	4550      	cmp	r0, sl
   b7494:	d215      	bcs.n	b74c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b7496:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b749a:	f1a4 0910 	sub.w	r9, r4, #16
   b749e:	ebaa 0404 	sub.w	r4, sl, r4
   b74a2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b74a4:	45d1      	cmp	r9, sl
   b74a6:	d01d      	beq.n	b74e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b74a8:	b11c      	cbz	r4, b74b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b74aa:	4651      	mov	r1, sl
   b74ac:	4620      	mov	r0, r4
   b74ae:	f7ff f923 	bl	b66f8 <_ZN6StringC1EOS_>
                end->~T();
   b74b2:	4650      	mov	r0, sl
   b74b4:	f7ff f8a4 	bl	b6600 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b74b8:	f1aa 0a10 	sub.w	sl, sl, #16
   b74bc:	3c10      	subs	r4, #16
   b74be:	e7f1      	b.n	b74a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b74c0:	d010      	beq.n	b74e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b74c2:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b74c4:	45a2      	cmp	sl, r4
   b74c6:	d00d      	beq.n	b74e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b74c8:	f1b9 0f00 	cmp.w	r9, #0
   b74cc:	d003      	beq.n	b74d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b74ce:	4621      	mov	r1, r4
   b74d0:	4648      	mov	r0, r9
   b74d2:	f7ff f911 	bl	b66f8 <_ZN6StringC1EOS_>
                p->~T();
   b74d6:	4620      	mov	r0, r4
   b74d8:	f7ff f892 	bl	b6600 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b74dc:	3410      	adds	r4, #16
   b74de:	f109 0910 	add.w	r9, r9, #16
   b74e2:	e7ef      	b.n	b74c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b74e4:	6828      	ldr	r0, [r5, #0]
   b74e6:	f7fe feff 	bl	b62e8 <free>
        capacity_ = n;
   b74ea:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b74ee:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b74f0:	e9d7 4300 	ldrd	r4, r3, [r7]
   b74f4:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b74f8:	45a0      	cmp	r8, r4
   b74fa:	d006      	beq.n	b750a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b74fc:	4621      	mov	r1, r4
   b74fe:	4630      	mov	r0, r6
   b7500:	f7ff f914 	bl	b672c <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b7504:	3410      	adds	r4, #16
   b7506:	3610      	adds	r6, #16
   b7508:	e7f6      	b.n	b74f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b750a:	687b      	ldr	r3, [r7, #4]
   b750c:	606b      	str	r3, [r5, #4]
}
   b750e:	4628      	mov	r0, r5
   b7510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b7514 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b7514:	b530      	push	{r4, r5, lr}
   b7516:	b08d      	sub	sp, #52	; 0x34
   b7518:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b751a:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b751e:	a801      	add	r0, sp, #4
   b7520:	f7ff ff9e 	bl	b7460 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b7524:	9b02      	ldr	r3, [sp, #8]
   b7526:	2b00      	cmp	r3, #0
   b7528:	dd2f      	ble.n	b758a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b752a:	f104 0114 	add.w	r1, r4, #20
   b752e:	a804      	add	r0, sp, #16
   b7530:	f7ff fc54 	bl	b6ddc <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b7534:	f104 0108 	add.w	r1, r4, #8
   b7538:	a808      	add	r0, sp, #32
   b753a:	f7ff fc4f 	bl	b6ddc <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b753e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b7540:	9b06      	ldr	r3, [sp, #24]
   b7542:	4313      	orrs	r3, r2
   b7544:	d01f      	beq.n	b7586 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b7546:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b754a:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b754e:	42ac      	cmp	r4, r5
   b7550:	d019      	beq.n	b7586 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b7552:	a904      	add	r1, sp, #16
   b7554:	4620      	mov	r0, r4
   b7556:	f7ff f93f 	bl	b67d8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b755a:	b160      	cbz	r0, b7576 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b755c:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b755e:	a808      	add	r0, sp, #32
   b7560:	f7ff f84e 	bl	b6600 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b7564:	a804      	add	r0, sp, #16
   b7566:	f7ff f84b 	bl	b6600 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b756a:	a801      	add	r0, sp, #4
   b756c:	f7ff fe03 	bl	b7176 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b7570:	4620      	mov	r0, r4
   b7572:	b00d      	add	sp, #52	; 0x34
   b7574:	bd30      	pop	{r4, r5, pc}
   b7576:	4620      	mov	r0, r4
   b7578:	a908      	add	r1, sp, #32
   b757a:	f7ff f92d 	bl	b67d8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b757e:	3410      	adds	r4, #16
   b7580:	2800      	cmp	r0, #0
   b7582:	d0e4      	beq.n	b754e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b7584:	e7ea      	b.n	b755c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b7586:	2400      	movs	r4, #0
   b7588:	e7e9      	b.n	b755e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b758a:	2401      	movs	r4, #1
   b758c:	e7ed      	b.n	b756a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b758e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b7590:	2300      	movs	r3, #0
   b7592:	e9c0 3300 	strd	r3, r3, [r0]
   b7596:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7598:	684f      	ldr	r7, [r1, #4]
   b759a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b759c:	4605      	mov	r5, r0
   b759e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b75a0:	dd3e      	ble.n	b7620 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b75a2:	00f8      	lsls	r0, r7, #3
   b75a4:	f7fe fe98 	bl	b62d8 <malloc>
            if (!d) {
   b75a8:	4604      	mov	r4, r0
   b75aa:	b3c8      	cbz	r0, b7620 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b75ac:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b75b0:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b75b2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b75b6:	d910      	bls.n	b75da <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b75b8:	429c      	cmp	r4, r3
   b75ba:	d20f      	bcs.n	b75dc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b75bc:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b75be:	1a1a      	subs	r2, r3, r0
   b75c0:	f1a0 0c08 	sub.w	ip, r0, #8
   b75c4:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b75c6:	459c      	cmp	ip, r3
   b75c8:	d018      	beq.n	b75fc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b75ca:	b11a      	cbz	r2, b75d4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b75cc:	6819      	ldr	r1, [r3, #0]
   b75ce:	6011      	str	r1, [r2, #0]
   b75d0:	6859      	ldr	r1, [r3, #4]
   b75d2:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b75d4:	3b08      	subs	r3, #8
   b75d6:	3a08      	subs	r2, #8
   b75d8:	e7f5      	b.n	b75c6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b75da:	d00f      	beq.n	b75fc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b75dc:	4601      	mov	r1, r0
   b75de:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b75e0:	428b      	cmp	r3, r1
   b75e2:	d00b      	beq.n	b75fc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b75e4:	b13a      	cbz	r2, b75f6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b75e6:	f8d1 c000 	ldr.w	ip, [r1]
   b75ea:	f8c2 c000 	str.w	ip, [r2]
   b75ee:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b75f2:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b75f6:	3108      	adds	r1, #8
   b75f8:	3208      	adds	r2, #8
   b75fa:	e7f1      	b.n	b75e0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b75fc:	f7fe fe74 	bl	b62e8 <free>
        data_ = d;
   b7600:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7602:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7604:	e9d6 3100 	ldrd	r3, r1, [r6]
   b7608:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b760c:	4298      	cmp	r0, r3
   b760e:	d006      	beq.n	b761e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b7610:	681a      	ldr	r2, [r3, #0]
   b7612:	6022      	str	r2, [r4, #0]
   b7614:	685a      	ldr	r2, [r3, #4]
   b7616:	6062      	str	r2, [r4, #4]
   b7618:	3308      	adds	r3, #8
   b761a:	3408      	adds	r4, #8
   b761c:	e7f6      	b.n	b760c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b761e:	6069      	str	r1, [r5, #4]
}
   b7620:	4628      	mov	r0, r5
   b7622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7624 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7624:	b570      	push	{r4, r5, r6, lr}
   b7626:	4604      	mov	r4, r0
        capacity_(0) {
   b7628:	2000      	movs	r0, #0
   b762a:	e9c4 0000 	strd	r0, r0, [r4]
   b762e:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7630:	684e      	ldr	r6, [r1, #4]
   b7632:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7634:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7636:	dd12      	ble.n	b765e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b7638:	0071      	lsls	r1, r6, #1
   b763a:	f7fe fe5d 	bl	b62f8 <realloc>
            if (!d) {
   b763e:	b170      	cbz	r0, b765e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b7640:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7642:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7644:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7648:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b764c:	429a      	cmp	r2, r3
   b764e:	d004      	beq.n	b765a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b7650:	f833 1b02 	ldrh.w	r1, [r3], #2
   b7654:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b7658:	e7f8      	b.n	b764c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b765a:	686b      	ldr	r3, [r5, #4]
   b765c:	6063      	str	r3, [r4, #4]
}
   b765e:	4620      	mov	r0, r4
   b7660:	bd70      	pop	{r4, r5, r6, pc}

000b7662 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b7662:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b7664:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b7666:	4604      	mov	r4, r0
        if (!dismissed_) {
   b7668:	b923      	cbnz	r3, b7674 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b766a:	6803      	ldr	r3, [r0, #0]
   b766c:	6818      	ldr	r0, [r3, #0]
   b766e:	b108      	cbz	r0, b7674 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b7670:	f7fe fe3a 	bl	b62e8 <free>
            func_();
        }
    }
   b7674:	4620      	mov	r0, r4
   b7676:	bd10      	pop	{r4, pc}

000b7678 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b7678:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b767a:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b767c:	4604      	mov	r4, r0
        if (!dismissed_) {
   b767e:	b923      	cbnz	r3, b768a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b7680:	6803      	ldr	r3, [r0, #0]
   b7682:	6818      	ldr	r0, [r3, #0]
   b7684:	b108      	cbz	r0, b768a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b7686:	f7fe fe2f 	bl	b62e8 <free>
    }
   b768a:	4620      	mov	r0, r4
   b768c:	bd10      	pop	{r4, pc}
	...

000b7690 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b7690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b7694:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b7698:	b08f      	sub	sp, #60	; 0x3c
   b769a:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b769c:	f1b8 0f00 	cmp.w	r8, #0
   b76a0:	d072      	beq.n	b7788 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b76a2:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b76a4:	2d00      	cmp	r5, #0
   b76a6:	d06f      	beq.n	b7788 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b76a8:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b76ac:	231f      	movs	r3, #31
   b76ae:	2200      	movs	r2, #0
   b76b0:	21ff      	movs	r1, #255	; 0xff
   b76b2:	4648      	mov	r0, r9
   b76b4:	f7ff fb60 	bl	b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b76b8:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b76ba:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b76bc:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b76be:	2200      	movs	r2, #0
   b76c0:	4619      	mov	r1, r3
   b76c2:	4638      	mov	r0, r7
   b76c4:	f7ff fb58 	bl	b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b76c8:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b76ca:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b76cc:	d006      	beq.n	b76dc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b76ce:	42ae      	cmp	r6, r5
   b76d0:	d030      	beq.n	b7734 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b76d2:	2400      	movs	r4, #0
    }
   b76d4:	4620      	mov	r0, r4
   b76d6:	b00f      	add	sp, #60	; 0x3c
   b76d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b76dc:	4620      	mov	r0, r4
   b76de:	f7fe fdfb 	bl	b62d8 <malloc>
            dismissed_(false) {
   b76e2:	ab03      	add	r3, sp, #12
   b76e4:	9304      	str	r3, [sp, #16]
   b76e6:	2300      	movs	r3, #0
   b76e8:	4604      	mov	r4, r0
   b76ea:	9003      	str	r0, [sp, #12]
   b76ec:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b76f0:	b970      	cbnz	r0, b7710 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b76f2:	2320      	movs	r3, #32
   b76f4:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b76f8:	4b24      	ldr	r3, [pc, #144]	; (b778c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b76fa:	9300      	str	r3, [sp, #0]
   b76fc:	4924      	ldr	r1, [pc, #144]	; (b7790 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b76fe:	4603      	mov	r3, r0
   b7700:	aa06      	add	r2, sp, #24
   b7702:	2032      	movs	r0, #50	; 0x32
   b7704:	f7fe fd4c 	bl	b61a0 <log_message>
                    return false;
   b7708:	a804      	add	r0, sp, #16
   b770a:	f7ff ffaa 	bl	b7662 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b770e:	e7e1      	b.n	b76d4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b7710:	4602      	mov	r2, r0
   b7712:	21ff      	movs	r1, #255	; 0xff
   b7714:	462b      	mov	r3, r5
   b7716:	4648      	mov	r0, r9
   b7718:	f7ff fb2e 	bl	b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b771c:	9803      	ldr	r0, [sp, #12]
   b771e:	462a      	mov	r2, r5
   b7720:	4641      	mov	r1, r8
   b7722:	f002 f985 	bl	b9a30 <memcmp>
   b7726:	b118      	cbz	r0, b7730 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b7728:	a804      	add	r0, sp, #16
   b772a:	f7ff ff9a 	bl	b7662 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b772e:	e7ce      	b.n	b76ce <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b7730:	2401      	movs	r4, #1
   b7732:	e7e9      	b.n	b7708 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b7734:	4628      	mov	r0, r5
   b7736:	f7fe fdcf 	bl	b62d8 <malloc>
   b773a:	2400      	movs	r4, #0
   b773c:	ab03      	add	r3, sp, #12
   b773e:	4606      	mov	r6, r0
   b7740:	9003      	str	r0, [sp, #12]
   b7742:	9304      	str	r3, [sp, #16]
   b7744:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b7748:	b978      	cbnz	r0, b776a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b774a:	2320      	movs	r3, #32
   b774c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b7750:	4b0e      	ldr	r3, [pc, #56]	; (b778c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b7752:	9300      	str	r3, [sp, #0]
   b7754:	490e      	ldr	r1, [pc, #56]	; (b7790 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b7756:	4603      	mov	r3, r0
   b7758:	aa06      	add	r2, sp, #24
   b775a:	2032      	movs	r0, #50	; 0x32
   b775c:	f7fe fd20 	bl	b61a0 <log_message>
                    return false;
   b7760:	4634      	mov	r4, r6
   b7762:	a804      	add	r0, sp, #16
   b7764:	f7ff ff88 	bl	b7678 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b7768:	e7b4      	b.n	b76d4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b776a:	4602      	mov	r2, r0
   b776c:	21ff      	movs	r1, #255	; 0xff
   b776e:	462b      	mov	r3, r5
   b7770:	4638      	mov	r0, r7
   b7772:	f7ff fb01 	bl	b6d78 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b7776:	9803      	ldr	r0, [sp, #12]
   b7778:	462a      	mov	r2, r5
   b777a:	4641      	mov	r1, r8
   b777c:	f002 f958 	bl	b9a30 <memcmp>
   b7780:	2800      	cmp	r0, #0
   b7782:	d1ee      	bne.n	b7762 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b7784:	2401      	movs	r4, #1
   b7786:	e7ec      	b.n	b7762 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b7788:	2401      	movs	r4, #1
   b778a:	e7a3      	b.n	b76d4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b778c:	000baa20 	.word	0x000baa20
   b7790:	000ba99f 	.word	0x000ba99f

000b7794 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7794:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7796:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7798:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b779a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b779c:	dd03      	ble.n	b77a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b779e:	f7fe fdab 	bl	b62f8 <realloc>
            if (!d) {
   b77a2:	b918      	cbnz	r0, b77ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b77a4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b77a6:	f7fe fd9f 	bl	b62e8 <free>
        T* d = nullptr;
   b77aa:	2000      	movs	r0, #0
        data_ = d;
   b77ac:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b77ae:	60a5      	str	r5, [r4, #8]
        return true;
   b77b0:	2001      	movs	r0, #1
   b77b2:	e7f7      	b.n	b77a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b77b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b77b4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b77b6:	6883      	ldr	r3, [r0, #8]
   b77b8:	428b      	cmp	r3, r1
   b77ba:	da02      	bge.n	b77c2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b77bc:	f7ff ffea 	bl	b7794 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b77c0:	bd08      	pop	{r3, pc}
    return true;
   b77c2:	2001      	movs	r0, #1
   b77c4:	e7fc      	b.n	b77c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b77c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b77c6:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b77c8:	2300      	movs	r3, #0
   b77ca:	e9c0 3300 	strd	r3, r3, [r0]
   b77ce:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b77d0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b77d2:	6849      	ldr	r1, [r1, #4]
   b77d4:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b77d6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b77d8:	dd10      	ble.n	b77fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b77da:	f7ff ffdb 	bl	b7794 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b77de:	b168      	cbz	r0, b77fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b77e0:	e9d5 3100 	ldrd	r3, r1, [r5]
   b77e4:	6822      	ldr	r2, [r4, #0]
   b77e6:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b77e8:	4299      	cmp	r1, r3
   b77ea:	d005      	beq.n	b77f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b77ec:	b10a      	cbz	r2, b77f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b77ee:	7818      	ldrb	r0, [r3, #0]
   b77f0:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b77f2:	3301      	adds	r3, #1
   b77f4:	3201      	adds	r2, #1
   b77f6:	e7f7      	b.n	b77e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b77f8:	686b      	ldr	r3, [r5, #4]
   b77fa:	6063      	str	r3, [r4, #4]
}
   b77fc:	4620      	mov	r0, r4
   b77fe:	bd38      	pop	{r3, r4, r5, pc}

000b7800 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b7800:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b7802:	680b      	ldr	r3, [r1, #0]
   b7804:	6003      	str	r3, [r0, #0]
   b7806:	684b      	ldr	r3, [r1, #4]
   b7808:	6043      	str	r3, [r0, #4]
   b780a:	4604      	mov	r4, r0
   b780c:	460d      	mov	r5, r1
class BleAdvertisingData {
   b780e:	3008      	adds	r0, #8
   b7810:	3108      	adds	r1, #8
   b7812:	f7ff ffd8 	bl	b77c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b7816:	f105 0114 	add.w	r1, r5, #20
   b781a:	f104 0014 	add.w	r0, r4, #20
   b781e:	f7ff ffd2 	bl	b77c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b7822:	f895 3020 	ldrb.w	r3, [r5, #32]
   b7826:	f884 3020 	strb.w	r3, [r4, #32]
   b782a:	4620      	mov	r0, r4
   b782c:	bd38      	pop	{r3, r4, r5, pc}

000b782e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b782e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7830:	4604      	mov	r4, r0
   b7832:	a801      	add	r0, sp, #4
   b7834:	f7ff ffc7 	bl	b77c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b7838:	9b01      	ldr	r3, [sp, #4]
   b783a:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b783c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b783e:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7840:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7842:	6062      	str	r2, [r4, #4]
   b7844:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7846:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7848:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b784a:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b784c:	9001      	str	r0, [sp, #4]
   b784e:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b7850:	f7fe fd4a 	bl	b62e8 <free>
   b7854:	b004      	add	sp, #16
   b7856:	bd10      	pop	{r4, pc}

000b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b785c:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b785e:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7860:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7862:	4419      	add	r1, r3
   b7864:	6883      	ldr	r3, [r0, #8]
   b7866:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7868:	4604      	mov	r4, r0
   b786a:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b786c:	dc12      	bgt.n	b7894 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b786e:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7870:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7872:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7874:	1bd2      	subs	r2, r2, r7
   b7876:	4631      	mov	r1, r6
   b7878:	1970      	adds	r0, r6, r5
   b787a:	f002 f8f7 	bl	b9a6c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b787e:	462a      	mov	r2, r5
   b7880:	4641      	mov	r1, r8
   b7882:	4630      	mov	r0, r6
   b7884:	f002 f8e4 	bl	b9a50 <memcpy>
    size_ += n;
   b7888:	6863      	ldr	r3, [r4, #4]
   b788a:	442b      	add	r3, r5
   b788c:	6063      	str	r3, [r4, #4]
    return true;
   b788e:	2001      	movs	r0, #1
}
   b7890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7894:	f7ff ff7e 	bl	b7794 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7898:	2800      	cmp	r0, #0
   b789a:	d1e8      	bne.n	b786e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b789c:	e7f8      	b.n	b7890 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b789e <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b789e:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b78a0:	460a      	mov	r2, r1
   b78a2:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b78a4:	b510      	push	{r4, lr}
   b78a6:	4604      	mov	r4, r0
    size_ = 0;
   b78a8:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b78aa:	b102      	cbz	r2, b78ae <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b78ac:	b90b      	cbnz	r3, b78b2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b78ae:	2000      	movs	r0, #0
}
   b78b0:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b78b2:	2bff      	cmp	r3, #255	; 0xff
   b78b4:	bf28      	it	cs
   b78b6:	23ff      	movcs	r3, #255	; 0xff
   b78b8:	f7ff ffce 	bl	b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b78bc:	2800      	cmp	r0, #0
   b78be:	d0f7      	beq.n	b78b0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b78c0:	6860      	ldr	r0, [r4, #4]
   b78c2:	e7f5      	b.n	b78b0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b78c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b78c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78c6:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78c8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b78cc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b78ce:	4604      	mov	r4, r0
   b78d0:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78d2:	da0b      	bge.n	b78ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b78d4:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78d6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b78d8:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78da:	1b52      	subs	r2, r2, r5
   b78dc:	1c48      	adds	r0, r1, #1
   b78de:	f002 f8c5 	bl	b9a6c <memmove>
    new(p) T(std::move(value));
   b78e2:	557e      	strb	r6, [r7, r5]
    ++size_;
   b78e4:	6863      	ldr	r3, [r4, #4]
   b78e6:	3301      	adds	r3, #1
   b78e8:	6063      	str	r3, [r4, #4]
}
   b78ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78ec:	3101      	adds	r1, #1
   b78ee:	f7ff ff51 	bl	b7794 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b78f2:	2800      	cmp	r0, #0
   b78f4:	d1ee      	bne.n	b78d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b78f6:	e7f8      	b.n	b78ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b78f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b78f8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b78fa:	6841      	ldr	r1, [r0, #4]
   b78fc:	f7ff bfe2 	b.w	b78c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7900 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7904:	4604      	mov	r4, r0
   b7906:	461d      	mov	r5, r3
   b7908:	460f      	mov	r7, r1
   b790a:	ab01      	add	r3, sp, #4
   b790c:	4690      	mov	r8, r2
   b790e:	460a      	mov	r2, r1
   b7910:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7914:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7918:	f7fe ffbe 	bl	b6898 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b791c:	1cae      	adds	r6, r5, #2
   b791e:	6863      	ldr	r3, [r4, #4]
   b7920:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7922:	f1b9 0f00 	cmp.w	r9, #0
   b7926:	d126      	bne.n	b7976 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7928:	b328      	cbz	r0, b7976 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b792a:	4433      	add	r3, r6
   b792c:	1a1b      	subs	r3, r3, r0
   b792e:	2bff      	cmp	r3, #255	; 0xff
   b7930:	d809      	bhi.n	b7946 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7932:	9901      	ldr	r1, [sp, #4]
   b7934:	4620      	mov	r0, r4
   b7936:	f7ff fc7b 	bl	b7230 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b793a:	6861      	ldr	r1, [r4, #4]
   b793c:	4620      	mov	r0, r4
   b793e:	4431      	add	r1, r6
   b7940:	f7ff ff38 	bl	b77b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7944:	b918      	cbnz	r0, b794e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7946:	6860      	ldr	r0, [r4, #4]
}
   b7948:	b003      	add	sp, #12
   b794a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b794e:	1c6a      	adds	r2, r5, #1
   b7950:	9901      	ldr	r1, [sp, #4]
   b7952:	b2d2      	uxtb	r2, r2
   b7954:	4620      	mov	r0, r4
   b7956:	f7ff ffb5 	bl	b78c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b795a:	9901      	ldr	r1, [sp, #4]
   b795c:	463a      	mov	r2, r7
   b795e:	3101      	adds	r1, #1
   b7960:	4620      	mov	r0, r4
   b7962:	f7ff ffaf 	bl	b78c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7966:	9901      	ldr	r1, [sp, #4]
   b7968:	462b      	mov	r3, r5
   b796a:	4642      	mov	r2, r8
   b796c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b796e:	4620      	mov	r0, r4
   b7970:	f7ff ff72 	bl	b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7974:	e7e7      	b.n	b7946 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7976:	18f1      	adds	r1, r6, r3
   b7978:	29ff      	cmp	r1, #255	; 0xff
   b797a:	d8e4      	bhi.n	b7946 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b797c:	4620      	mov	r0, r4
   b797e:	f7ff ff19 	bl	b77b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7982:	2800      	cmp	r0, #0
   b7984:	d0df      	beq.n	b7946 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7986:	1c69      	adds	r1, r5, #1
   b7988:	b2c9      	uxtb	r1, r1
   b798a:	4620      	mov	r0, r4
   b798c:	f7ff ffb4 	bl	b78f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7990:	4639      	mov	r1, r7
   b7992:	4620      	mov	r0, r4
   b7994:	f7ff ffb0 	bl	b78f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7998:	6861      	ldr	r1, [r4, #4]
   b799a:	462b      	mov	r3, r5
   b799c:	4642      	mov	r2, r8
   b799e:	e7e6      	b.n	b796e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b79a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b79a0:	b430      	push	{r4, r5}
   b79a2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b79a6:	b11a      	cbz	r2, b79b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b79a8:	9502      	str	r5, [sp, #8]
}
   b79aa:	bc30      	pop	{r4, r5}
   b79ac:	f7ff bfa8 	b.w	b7900 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b79b0:	6840      	ldr	r0, [r0, #4]
}
   b79b2:	bc30      	pop	{r4, r5}
   b79b4:	4770      	bx	lr

000b79b6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b79b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b79b8:	2300      	movs	r3, #0
   b79ba:	e9c0 3300 	strd	r3, r3, [r0]
   b79be:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b79c0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b79c2:	9300      	str	r3, [sp, #0]
   b79c4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b79c6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b79ca:	4619      	mov	r1, r3
   b79cc:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b79d0:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b79d2:	f7ff ffe5 	bl	b79a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b79d6:	4620      	mov	r0, r4
   b79d8:	b004      	add	sp, #16
   b79da:	bd10      	pop	{r4, pc}

000b79dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b79dc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b79de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79e0:	4604      	mov	r4, r0
   b79e2:	460d      	mov	r5, r1
   b79e4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b79e6:	d914      	bls.n	b7a12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b79e8:	4290      	cmp	r0, r2
   b79ea:	d213      	bcs.n	b7a14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b79ec:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b79f0:	1a75      	subs	r5, r6, r1
   b79f2:	f1a1 0708 	sub.w	r7, r1, #8
   b79f6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b79f8:	42b7      	cmp	r7, r6
   b79fa:	d018      	beq.n	b7a2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b79fc:	b11c      	cbz	r4, b7a06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b79fe:	4631      	mov	r1, r6
   b7a00:	4620      	mov	r0, r4
   b7a02:	f7ff fc9a 	bl	b733a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7a06:	1d30      	adds	r0, r6, #4
   b7a08:	f7ff fca1 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7a0c:	3e08      	subs	r6, #8
   b7a0e:	3c08      	subs	r4, #8
   b7a10:	e7f2      	b.n	b79f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7a12:	d00c      	beq.n	b7a2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7a14:	42b5      	cmp	r5, r6
   b7a16:	d00a      	beq.n	b7a2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7a18:	b11c      	cbz	r4, b7a22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7a1a:	4629      	mov	r1, r5
   b7a1c:	4620      	mov	r0, r4
   b7a1e:	f7ff fc8c 	bl	b733a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7a22:	1d28      	adds	r0, r5, #4
   b7a24:	f7ff fc93 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7a28:	3508      	adds	r5, #8
   b7a2a:	3408      	adds	r4, #8
   b7a2c:	e7f2      	b.n	b7a14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7a30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7a32:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7a34:	6846      	ldr	r6, [r0, #4]
   b7a36:	4668      	mov	r0, sp
   b7a38:	f7ff fc7f 	bl	b733a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a3c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7a40:	429f      	cmp	r7, r3
   b7a42:	db12      	blt.n	b7a6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7a44:	3701      	adds	r7, #1
        if (n > 0) {
   b7a46:	2f00      	cmp	r7, #0
   b7a48:	dd29      	ble.n	b7a9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7a4a:	00f8      	lsls	r0, r7, #3
   b7a4c:	f7fe fc44 	bl	b62d8 <malloc>
            if (!d) {
   b7a50:	4605      	mov	r5, r0
   b7a52:	b1f0      	cbz	r0, b7a92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7a54:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7a58:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7a5c:	f7ff ffbe 	bl	b79dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7a60:	6820      	ldr	r0, [r4, #0]
   b7a62:	f7fe fc41 	bl	b62e8 <free>
        data_ = d;
   b7a66:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7a68:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7a6a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7a6c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7a6e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7a72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7a76:	4631      	mov	r1, r6
   b7a78:	f106 0008 	add.w	r0, r6, #8
   b7a7c:	f7ff ffae 	bl	b79dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7a80:	b11e      	cbz	r6, b7a8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7a82:	4669      	mov	r1, sp
   b7a84:	4630      	mov	r0, r6
   b7a86:	f7ff fc58 	bl	b733a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7a8a:	6863      	ldr	r3, [r4, #4]
   b7a8c:	3301      	adds	r3, #1
   b7a8e:	6063      	str	r3, [r4, #4]
    return true;
   b7a90:	2501      	movs	r5, #1
   b7a92:	a801      	add	r0, sp, #4
   b7a94:	f7ff fc5b 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a98:	4628      	mov	r0, r5
   b7a9a:	b003      	add	sp, #12
   b7a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7a9e:	2500      	movs	r5, #0
   b7aa0:	e7de      	b.n	b7a60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7aa2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7aa4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7aa8:	4605      	mov	r5, r0
   b7aaa:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7aac:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7ab0:	42a6      	cmp	r6, r4
   b7ab2:	d005      	beq.n	b7ac0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7ab4:	4639      	mov	r1, r7
   b7ab6:	4620      	mov	r0, r4
   b7ab8:	f7ff fa45 	bl	b6f46 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7abc:	b108      	cbz	r0, b7ac2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7abe:	b914      	cbnz	r4, b7ac6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7ac2:	3408      	adds	r4, #8
   b7ac4:	e7f4      	b.n	b7ab0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7ac6:	1d20      	adds	r0, r4, #4
   b7ac8:	f7ff fc41 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7acc:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7ad0:	f104 0108 	add.w	r1, r4, #8
   b7ad4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7ad8:	4620      	mov	r0, r4
   b7ada:	f7ff ff7f 	bl	b79dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7ade:	686b      	ldr	r3, [r5, #4]
   b7ae0:	3b01      	subs	r3, #1
   b7ae2:	606b      	str	r3, [r5, #4]
    return true;
   b7ae4:	e7ec      	b.n	b7ac0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7ae8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7aec:	4605      	mov	r5, r0
   b7aee:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7af0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7af2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7af4:	f7fe ff8c 	bl	b6a10 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7af8:	682e      	ldr	r6, [r5, #0]
   b7afa:	1ef3      	subs	r3, r6, #3
   b7afc:	2b0d      	cmp	r3, #13
   b7afe:	d83c      	bhi.n	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7b00:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7b04:	0053000e 	.word	0x0053000e
   b7b08:	00d1003b 	.word	0x00d1003b
   b7b0c:	003b003b 	.word	0x003b003b
   b7b10:	003b003b 	.word	0x003b003b
   b7b14:	009b003b 	.word	0x009b003b
   b7b18:	009b009b 	.word	0x009b009b
   b7b1c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7b20:	a804      	add	r0, sp, #16
   b7b22:	f7ff f9db 	bl	b6edc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7b26:	9b04      	ldr	r3, [sp, #16]
   b7b28:	89aa      	ldrh	r2, [r5, #12]
   b7b2a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7b2c:	6869      	ldr	r1, [r5, #4]
   b7b2e:	9804      	ldr	r0, [sp, #16]
   b7b30:	3108      	adds	r1, #8
   b7b32:	3002      	adds	r0, #2
   b7b34:	f7fe ff8b 	bl	b6a4e <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7b38:	a904      	add	r1, sp, #16
   b7b3a:	a806      	add	r0, sp, #24
   b7b3c:	f7ff fbfd 	bl	b733a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7b40:	a906      	add	r1, sp, #24
   b7b42:	f104 0018 	add.w	r0, r4, #24
   b7b46:	f7ff ff73 	bl	b7a30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7b4a:	4605      	mov	r5, r0
   b7b4c:	a807      	add	r0, sp, #28
   b7b4e:	f7ff fbfe 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b52:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7b54:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7b56:	b9b5      	cbnz	r5, b7b86 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7b58:	4b5d      	ldr	r3, [pc, #372]	; (b7cd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b7b5a:	495e      	ldr	r1, [pc, #376]	; (b7cd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7b5c:	9300      	str	r3, [sp, #0]
   b7b5e:	2032      	movs	r0, #50	; 0x32
   b7b60:	462b      	mov	r3, r5
   b7b62:	aa06      	add	r2, sp, #24
   b7b64:	9507      	str	r5, [sp, #28]
   b7b66:	f7fe fb1b 	bl	b61a0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7b6a:	9b04      	ldr	r3, [sp, #16]
   b7b6c:	4629      	mov	r1, r5
   b7b6e:	8818      	ldrh	r0, [r3, #0]
   b7b70:	f7fe f966 	bl	b5e40 <hal_ble_gap_disconnect>
   b7b74:	a805      	add	r0, sp, #20
   b7b76:	f7ff fbea 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7b7a:	a803      	add	r0, sp, #12
   b7b7c:	f7fe ff56 	bl	b6a2c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7b80:	b00e      	add	sp, #56	; 0x38
   b7b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7b86:	4a54      	ldr	r2, [pc, #336]	; (b7cd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7b88:	9200      	str	r2, [sp, #0]
   b7b8a:	2300      	movs	r3, #0
   b7b8c:	4951      	ldr	r1, [pc, #324]	; (b7cd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7b8e:	9307      	str	r3, [sp, #28]
   b7b90:	aa06      	add	r2, sp, #24
   b7b92:	2001      	movs	r0, #1
   b7b94:	f7fe fb04 	bl	b61a0 <log_message>
                if (impl->connectedCallback_) {
   b7b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7b9a:	2b00      	cmp	r3, #0
   b7b9c:	d0ea      	beq.n	b7b74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b7b9e:	a904      	add	r1, sp, #16
   b7ba0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7ba4:	f7ff fc53 	bl	b744e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7ba8:	e7e4      	b.n	b7b74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7baa:	89a9      	ldrh	r1, [r5, #12]
   b7bac:	4620      	mov	r0, r4
   b7bae:	f7ff f95f 	bl	b6e70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7bb2:	4606      	mov	r6, r0
   b7bb4:	2800      	cmp	r0, #0
   b7bb6:	d0e0      	beq.n	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7bb8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7bba:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7bbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7bc2:	8029      	strh	r1, [r5, #0]
   b7bc4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7bc8:	429a      	cmp	r2, r3
   b7bca:	d003      	beq.n	b7bd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7bcc:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7bd0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7bd2:	e7f9      	b.n	b7bc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b7bd4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7bd8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7bdc:	45b8      	cmp	r8, r7
   b7bde:	d004      	beq.n	b7bea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7be0:	1d38      	adds	r0, r7, #4
   b7be2:	f7ff fbb4 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7be6:	3708      	adds	r7, #8
   b7be8:	e7f8      	b.n	b7bdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7bea:	2300      	movs	r3, #0
   b7bec:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7bee:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7bf2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7bf6:	45b8      	cmp	r8, r7
   b7bf8:	d004      	beq.n	b7c04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7bfa:	1d38      	adds	r0, r7, #4
   b7bfc:	f7ff fba7 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c00:	3708      	adds	r7, #8
   b7c02:	e7f8      	b.n	b7bf6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7c04:	2300      	movs	r3, #0
   b7c06:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7c08:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7c0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7c0c:	b123      	cbz	r3, b7c18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7c0e:	4631      	mov	r1, r6
   b7c10:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7c14:	f7ff fc1b 	bl	b744e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7c18:	2300      	movs	r3, #0
   b7c1a:	2220      	movs	r2, #32
   b7c1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7c20:	4a2e      	ldr	r2, [pc, #184]	; (b7cdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7c22:	9200      	str	r2, [sp, #0]
   b7c24:	492b      	ldr	r1, [pc, #172]	; (b7cd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7c26:	aa06      	add	r2, sp, #24
   b7c28:	2001      	movs	r0, #1
   b7c2a:	f7fe fab9 	bl	b61a0 <log_message>
                    impl->peers_.removeOne(*peer);
   b7c2e:	4631      	mov	r1, r6
   b7c30:	f104 0018 	add.w	r0, r4, #24
   b7c34:	f7ff ff35 	bl	b7aa2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7c38:	e79f      	b.n	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7c3a:	89a9      	ldrh	r1, [r5, #12]
   b7c3c:	4620      	mov	r0, r4
   b7c3e:	f7ff f917 	bl	b6e70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7c42:	2800      	cmp	r0, #0
   b7c44:	d099      	beq.n	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7c46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7c48:	2b00      	cmp	r3, #0
   b7c4a:	d096      	beq.n	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7c4c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7c4e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7c50:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7c54:	d001      	beq.n	b7c5a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7c56:	2e10      	cmp	r6, #16
   b7c58:	d117      	bne.n	b7c8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b7c5a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7c5c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7c5e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7c60:	2506      	movs	r5, #6
                        };
   b7c62:	f88d 3015 	strb.w	r3, [sp, #21]
   b7c66:	9104      	str	r1, [sp, #16]
   b7c68:	f88d 2014 	strb.w	r2, [sp, #20]
   b7c6c:	9006      	str	r0, [sp, #24]
   b7c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7c72:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7c74:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7c78:	9508      	str	r5, [sp, #32]
   b7c7a:	e883 0003 	stmia.w	r3, {r0, r1}
   b7c7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7c80:	a906      	add	r1, sp, #24
   b7c82:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7c86:	4798      	blx	r3
   b7c88:	e777      	b.n	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7c8a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7c8c:	bf01      	itttt	eq
   b7c8e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7c90:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7c92:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7c96:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7c98:	bf0f      	iteee	eq
   b7c9a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7c9e:	461a      	movne	r2, r3
   b7ca0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7ca2:	461d      	movne	r5, r3
   b7ca4:	e7dd      	b.n	b7c62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7ca6:	89a9      	ldrh	r1, [r5, #12]
   b7ca8:	4620      	mov	r0, r4
   b7caa:	f7ff f8e1 	bl	b6e70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7cae:	4601      	mov	r1, r0
   b7cb0:	2800      	cmp	r0, #0
   b7cb2:	f43f af62 	beq.w	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7cb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7cb8:	2b00      	cmp	r3, #0
   b7cba:	f43f af5e 	beq.w	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7cbe:	686b      	ldr	r3, [r5, #4]
   b7cc0:	9306      	str	r3, [sp, #24]
   b7cc2:	aa06      	add	r2, sp, #24
   b7cc4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7cc6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7cca:	4798      	blx	r3
   b7ccc:	e755      	b.n	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7cce:	bf00      	nop
   b7cd0:	000baa3b 	.word	0x000baa3b
   b7cd4:	000ba99f 	.word	0x000ba99f
   b7cd8:	000baa61 	.word	0x000baa61
   b7cdc:	000baa7e 	.word	0x000baa7e

000b7ce0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7ce0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7ce2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7ce4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7ce6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7ce8:	dd05      	ble.n	b7cf6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b7cea:	2114      	movs	r1, #20
   b7cec:	4369      	muls	r1, r5
   b7cee:	f7fe fb03 	bl	b62f8 <realloc>
            if (!d) {
   b7cf2:	b918      	cbnz	r0, b7cfc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b7cf4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7cf6:	f7fe faf7 	bl	b62e8 <free>
        T* d = nullptr;
   b7cfa:	2000      	movs	r0, #0
        data_ = d;
   b7cfc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7cfe:	60a5      	str	r5, [r4, #8]
        return true;
   b7d00:	2001      	movs	r0, #1
   b7d02:	e7f7      	b.n	b7cf4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b7d04 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b7d08:	2400      	movs	r4, #0
   b7d0a:	e9c0 4400 	strd	r4, r4, [r0]
   b7d0e:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7d10:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7d12:	6849      	ldr	r1, [r1, #4]
   b7d14:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7d16:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7d18:	dd1a      	ble.n	b7d50 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b7d1a:	f7ff ffe1 	bl	b7ce0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7d1e:	b1b8      	cbz	r0, b7d50 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7d20:	e9d8 9300 	ldrd	r9, r3, [r8]
   b7d24:	f04f 0c14 	mov.w	ip, #20
   b7d28:	f8d7 e000 	ldr.w	lr, [r7]
   b7d2c:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b7d30:	eb09 0504 	add.w	r5, r9, r4
   b7d34:	45ac      	cmp	ip, r5
   b7d36:	d008      	beq.n	b7d4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b7d38:	eb1e 0604 	adds.w	r6, lr, r4
   b7d3c:	bf1f      	itttt	ne
   b7d3e:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b7d40:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b7d42:	682b      	ldrne	r3, [r5, #0]
   b7d44:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b7d46:	3414      	adds	r4, #20
   b7d48:	e7f2      	b.n	b7d30 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b7d4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7d4e:	607b      	str	r3, [r7, #4]
}
   b7d50:	4638      	mov	r0, r7
   b7d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7d56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7d56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b7d5a:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b7d5e:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7d60:	6883      	ldr	r3, [r0, #8]
   b7d62:	19e9      	adds	r1, r5, r7
   b7d64:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7d66:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7d68:	dc17      	bgt.n	b7d9a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b7d6a:	2314      	movs	r3, #20
   b7d6c:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b7d6e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7d70:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b7d72:	fb03 f907 	mul.w	r9, r3, r7
   b7d76:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7d78:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7d7a:	1b52      	subs	r2, r2, r5
   b7d7c:	4631      	mov	r1, r6
   b7d7e:	eb06 0009 	add.w	r0, r6, r9
   b7d82:	f001 fe73 	bl	b9a6c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7d86:	464a      	mov	r2, r9
   b7d88:	4641      	mov	r1, r8
   b7d8a:	4630      	mov	r0, r6
   b7d8c:	f001 fe60 	bl	b9a50 <memcpy>
    size_ += n;
   b7d90:	6863      	ldr	r3, [r4, #4]
   b7d92:	443b      	add	r3, r7
   b7d94:	6063      	str	r3, [r4, #4]
}
   b7d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7d9a:	f7ff ffa1 	bl	b7ce0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7d9e:	2800      	cmp	r0, #0
   b7da0:	d1e3      	bne.n	b7d6a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b7da2:	e7f8      	b.n	b7d96 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b7da4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7da4:	b082      	sub	sp, #8
   b7da6:	b570      	push	{r4, r5, r6, lr}
   b7da8:	460c      	mov	r4, r1
   b7daa:	a904      	add	r1, sp, #16
   b7dac:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7db0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7db4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7db6:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7db8:	da17      	bge.n	b7dea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b7dba:	2314      	movs	r3, #20
   b7dbc:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b7dc0:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b7dc2:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b7dc4:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7dc6:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7dc8:	1a52      	subs	r2, r2, r1
   b7dca:	18e0      	adds	r0, r4, r3
   b7dcc:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b7dce:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7dd0:	f001 fe4c 	bl	b9a6c <memmove>
    new(p) T(std::move(value));
   b7dd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7dd8:	6833      	ldr	r3, [r6, #0]
   b7dda:	6023      	str	r3, [r4, #0]
    ++size_;
   b7ddc:	686b      	ldr	r3, [r5, #4]
   b7dde:	3301      	adds	r3, #1
   b7de0:	606b      	str	r3, [r5, #4]
}
   b7de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7de6:	b002      	add	sp, #8
   b7de8:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7dea:	3101      	adds	r1, #1
   b7dec:	f7ff ff78 	bl	b7ce0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7df0:	2800      	cmp	r0, #0
   b7df2:	d1e2      	bne.n	b7dba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b7df4:	e7f5      	b.n	b7de2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b7df6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b7df6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b7dfa:	2400      	movs	r4, #0
   b7dfc:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7dfe:	1e93      	subs	r3, r2, #2
   b7e00:	e9c0 4400 	strd	r4, r4, [r0]
   b7e04:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b7e06:	4605      	mov	r5, r0
   b7e08:	460f      	mov	r7, r1
   b7e0a:	4690      	mov	r8, r2
   b7e0c:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7e0e:	9305      	str	r3, [sp, #20]
    return size_;
   b7e10:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b7e12:	428c      	cmp	r4, r1
   b7e14:	da72      	bge.n	b7efc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b7e16:	6838      	ldr	r0, [r7, #0]
   b7e18:	ab07      	add	r3, sp, #28
   b7e1a:	4642      	mov	r2, r8
   b7e1c:	1b09      	subs	r1, r1, r4
   b7e1e:	4420      	add	r0, r4
   b7e20:	f7fe fd3a 	bl	b6898 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b7e24:	4606      	mov	r6, r0
   b7e26:	2800      	cmp	r0, #0
   b7e28:	d068      	beq.n	b7efc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7e2a:	9b05      	ldr	r3, [sp, #20]
   b7e2c:	2b01      	cmp	r3, #1
   b7e2e:	d82f      	bhi.n	b7e90 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7e30:	f1a0 0b02 	sub.w	fp, r0, #2
   b7e34:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b7e38:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b7e3c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7e40:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7e42:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7e44:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7e46:	d055      	beq.n	b7ef4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b7e48:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7e4a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b7e4e:	4413      	add	r3, r2
   b7e50:	a808      	add	r0, sp, #32
   b7e52:	78d9      	ldrb	r1, [r3, #3]
   b7e54:	789b      	ldrb	r3, [r3, #2]
   b7e56:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b7e5a:	f7fe fec0 	bl	b6bde <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b7e5e:	f10d 0e20 	add.w	lr, sp, #32
   b7e62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7e66:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7e6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7e6e:	f8de 3000 	ldr.w	r3, [lr]
   b7e72:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7e76:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7e7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b7e7e:	ab0d      	add	r3, sp, #52	; 0x34
   b7e80:	cb0c      	ldmia	r3, {r2, r3}
   b7e82:	6869      	ldr	r1, [r5, #4]
   b7e84:	4628      	mov	r0, r5
   b7e86:	f7ff ff8d 	bl	b7da4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7e8a:	f109 0901 	add.w	r9, r9, #1
   b7e8e:	e7d7      	b.n	b7e40 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b7e90:	f1a8 0306 	sub.w	r3, r8, #6
   b7e94:	2b01      	cmp	r3, #1
   b7e96:	d82d      	bhi.n	b7ef4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7e98:	f1a0 0b02 	sub.w	fp, r0, #2
   b7e9c:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b7ea0:	f04f 0900 	mov.w	r9, #0
   b7ea4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b7ea8:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7eaa:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7eac:	d022      	beq.n	b7ef4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7eae:	3302      	adds	r3, #2
    return data_[i];
   b7eb0:	6839      	ldr	r1, [r7, #0]
   b7eb2:	4423      	add	r3, r4
   b7eb4:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b7eb8:	2201      	movs	r2, #1
   b7eba:	4419      	add	r1, r3
   b7ebc:	a808      	add	r0, sp, #32
   b7ebe:	f7fe fe6f 	bl	b6ba0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b7ec2:	f10d 0e20 	add.w	lr, sp, #32
   b7ec6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7eca:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7ece:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7ed2:	f8de 3000 	ldr.w	r3, [lr]
   b7ed6:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7eda:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7ede:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b7ee2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b7ee6:	6869      	ldr	r1, [r5, #4]
   b7ee8:	4628      	mov	r0, r5
   b7eea:	f7ff ff5b 	bl	b7da4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7eee:	f109 0901 	add.w	r9, r9, #1
   b7ef2:	e7d9      	b.n	b7ea8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b7ef4:	9b07      	ldr	r3, [sp, #28]
   b7ef6:	441c      	add	r4, r3
   b7ef8:	4434      	add	r4, r6
   b7efa:	e789      	b.n	b7e10 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b7efc:	4628      	mov	r0, r5
   b7efe:	b013      	add	sp, #76	; 0x4c
   b7f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7f04 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b7f04:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b7f06:	2300      	movs	r3, #0
   b7f08:	b085      	sub	sp, #20
   b7f0a:	e9c0 3300 	strd	r3, r3, [r0]
   b7f0e:	6083      	str	r3, [r0, #8]
   b7f10:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7f12:	2202      	movs	r2, #2
   b7f14:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b7f16:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7f18:	f7ff ff6d 	bl	b7df6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7f1c:	a901      	add	r1, sp, #4
   b7f1e:	4620      	mov	r0, r4
   b7f20:	f7ff ff19 	bl	b7d56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7f24:	a801      	add	r0, sp, #4
   b7f26:	f7ff f938 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7f2a:	2202      	movs	r2, #2
   b7f2c:	4629      	mov	r1, r5
   b7f2e:	a801      	add	r0, sp, #4
   b7f30:	f7ff ff61 	bl	b7df6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7f34:	a901      	add	r1, sp, #4
   b7f36:	4620      	mov	r0, r4
   b7f38:	f7ff ff0d 	bl	b7d56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7f3c:	a801      	add	r0, sp, #4
   b7f3e:	f7ff f92c 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b7f42:	2203      	movs	r2, #3
   b7f44:	4629      	mov	r1, r5
   b7f46:	a801      	add	r0, sp, #4
   b7f48:	f7ff ff55 	bl	b7df6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7f4c:	a901      	add	r1, sp, #4
   b7f4e:	4620      	mov	r0, r4
   b7f50:	f7ff ff01 	bl	b7d56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7f54:	a801      	add	r0, sp, #4
   b7f56:	f7ff f920 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b7f5a:	2206      	movs	r2, #6
   b7f5c:	4629      	mov	r1, r5
   b7f5e:	a801      	add	r0, sp, #4
   b7f60:	f7ff ff49 	bl	b7df6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7f64:	a901      	add	r1, sp, #4
   b7f66:	4620      	mov	r0, r4
   b7f68:	f7ff fef5 	bl	b7d56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7f6c:	a801      	add	r0, sp, #4
   b7f6e:	f7ff f914 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b7f72:	2207      	movs	r2, #7
   b7f74:	4629      	mov	r1, r5
   b7f76:	a801      	add	r0, sp, #4
   b7f78:	f7ff ff3d 	bl	b7df6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7f7c:	a901      	add	r1, sp, #4
   b7f7e:	4620      	mov	r0, r4
   b7f80:	f7ff fee9 	bl	b7d56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7f84:	a801      	add	r0, sp, #4
   b7f86:	f7ff f908 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b7f8a:	4620      	mov	r0, r4
   b7f8c:	b005      	add	sp, #20
   b7f8e:	bd30      	pop	{r4, r5, pc}

000b7f90 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b7f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f94:	b08b      	sub	sp, #44	; 0x2c
   b7f96:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b7f98:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b7f9c:	a801      	add	r0, sp, #4
   b7f9e:	f7ff feb1 	bl	b7d04 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b7fa2:	9b02      	ldr	r3, [sp, #8]
   b7fa4:	2b00      	cmp	r3, #0
   b7fa6:	dd4a      	ble.n	b803e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b7fa8:	f104 0114 	add.w	r1, r4, #20
   b7fac:	a804      	add	r0, sp, #16
   b7fae:	f7ff ffa9 	bl	b7f04 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b7fb2:	f104 0108 	add.w	r1, r4, #8
   b7fb6:	a807      	add	r0, sp, #28
   b7fb8:	f7ff ffa4 	bl	b7f04 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b7fbc:	9d05      	ldr	r5, [sp, #20]
   b7fbe:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b7fc0:	2d00      	cmp	r5, #0
   b7fc2:	dc01      	bgt.n	b7fc8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b7fc4:	2e00      	cmp	r6, #0
   b7fc6:	dd38      	ble.n	b803a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b7fc8:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b7fca:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b7fcc:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b7fd0:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b7fd4:	2314      	movs	r3, #20
   b7fd6:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b7fda:	fb03 8505 	mla	r5, r3, r5, r8
   b7fde:	fb03 9606 	mla	r6, r3, r6, r9
   b7fe2:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b7fe4:	45ba      	cmp	sl, r7
   b7fe6:	d028      	beq.n	b803a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b7fe8:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b7fea:	45ab      	cmp	fp, r5
   b7fec:	d015      	beq.n	b801a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b7fee:	4659      	mov	r1, fp
   b7ff0:	4650      	mov	r0, sl
   b7ff2:	f7fe fe36 	bl	b6c62 <_ZNK8particle7BleUuideqERKS0_>
   b7ff6:	f10b 0b14 	add.w	fp, fp, #20
   b7ffa:	4604      	mov	r4, r0
   b7ffc:	2800      	cmp	r0, #0
   b7ffe:	d0f4      	beq.n	b7fea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8000:	a807      	add	r0, sp, #28
   b8002:	f7ff f8ca 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b8006:	a804      	add	r0, sp, #16
   b8008:	f7ff f8c7 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b800c:	a801      	add	r0, sp, #4
   b800e:	f7ff f8c4 	bl	b719a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b8012:	4620      	mov	r0, r4
   b8014:	b00b      	add	sp, #44	; 0x2c
   b8016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b801a:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b801c:	45b3      	cmp	fp, r6
   b801e:	d009      	beq.n	b8034 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b8020:	4659      	mov	r1, fp
   b8022:	4650      	mov	r0, sl
   b8024:	f7fe fe1d 	bl	b6c62 <_ZNK8particle7BleUuideqERKS0_>
   b8028:	f10b 0b14 	add.w	fp, fp, #20
   b802c:	4604      	mov	r4, r0
   b802e:	2800      	cmp	r0, #0
   b8030:	d0f4      	beq.n	b801c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b8032:	e7e5      	b.n	b8000 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b8034:	f10a 0a14 	add.w	sl, sl, #20
   b8038:	e7d4      	b.n	b7fe4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b803a:	2400      	movs	r4, #0
   b803c:	e7e0      	b.n	b8000 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b803e:	2401      	movs	r4, #1
   b8040:	e7e4      	b.n	b800c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b8042 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8042:	b513      	push	{r0, r1, r4, lr}
   b8044:	460b      	mov	r3, r1
   b8046:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8048:	e9d0 0100 	ldrd	r0, r1, [r0]
   b804c:	466c      	mov	r4, sp
   b804e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8052:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8056:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b805a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b805e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8062:	b002      	add	sp, #8
   b8064:	bd10      	pop	{r4, pc}

000b8066 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8066:	b538      	push	{r3, r4, r5, lr}
   b8068:	4605      	mov	r5, r0
   b806a:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b806c:	f7ff ffe9 	bl	b8042 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8070:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8072:	68a2      	ldr	r2, [r4, #8]
   b8074:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8076:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8078:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b807a:	68e2      	ldr	r2, [r4, #12]
   b807c:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b807e:	60e3      	str	r3, [r4, #12]
      }
   b8080:	bd38      	pop	{r3, r4, r5, pc}

000b8082 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8082:	b570      	push	{r4, r5, r6, lr}
   b8084:	4604      	mov	r4, r0
   b8086:	b08c      	sub	sp, #48	; 0x30
   b8088:	460e      	mov	r6, r1
   b808a:	9201      	str	r2, [sp, #4]
   b808c:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b808e:	f7fe fecf 	bl	b6e30 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8092:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8094:	9901      	ldr	r1, [sp, #4]
   b8096:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b809a:	f7fe fb52 	bl	b6742 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b809e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b80a2:	b1cd      	cbz	r5, b80d8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b80a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b80a6:	9502      	str	r5, [sp, #8]
   b80a8:	a902      	add	r1, sp, #8
   b80aa:	a804      	add	r0, sp, #16
   b80ac:	9303      	str	r3, [sp, #12]
   b80ae:	f7ff f90d 	bl	b72cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b80b2:	2300      	movs	r3, #0
	__x.swap(*this);
   b80b4:	a908      	add	r1, sp, #32
   b80b6:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b80b8:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b80ba:	f7ff ffd4 	bl	b8066 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b80be:	4631      	mov	r1, r6
   b80c0:	a808      	add	r0, sp, #32
   b80c2:	f7ff ffd0 	bl	b8066 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b80c6:	a808      	add	r0, sp, #32
   b80c8:	f7fe fc65 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
   b80cc:	a804      	add	r0, sp, #16
   b80ce:	f7fe fc62 	bl	b6996 <_ZNSt14_Function_baseD1Ev>
    }
   b80d2:	4620      	mov	r0, r4
   b80d4:	b00c      	add	sp, #48	; 0x30
   b80d6:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b80d8:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b80da:	e7ea      	b.n	b80b2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

000b80dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b80dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b80e0:	b087      	sub	sp, #28
   b80e2:	461d      	mov	r5, r3
   b80e4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b80e8:	4680      	mov	r8, r0
   b80ea:	468b      	mov	fp, r1
   b80ec:	4692      	mov	sl, r2
   b80ee:	9912      	ldr	r1, [sp, #72]	; 0x48
   b80f0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b80f2:	2200      	movs	r2, #0
   b80f4:	2068      	movs	r0, #104	; 0x68
   b80f6:	9102      	str	r1, [sp, #8]
   b80f8:	9204      	str	r2, [sp, #16]
   b80fa:	f7fb ffca 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b80fe:	1e06      	subs	r6, r0, #0
   b8100:	f106 090c 	add.w	r9, r6, #12
   b8104:	d018      	beq.n	b8138 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8106:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8108:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b810a:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b810e:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8110:	4a15      	ldr	r2, [pc, #84]	; (b8168 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8112:	f847 2b20 	str.w	r2, [r7], #32
   b8116:	9b03      	ldr	r3, [sp, #12]
   b8118:	9100      	str	r1, [sp, #0]
   b811a:	465a      	mov	r2, fp
   b811c:	4651      	mov	r1, sl
   b811e:	4648      	mov	r0, r9
   b8120:	f7ff ffaf 	bl	b8082 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8126:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8128:	682b      	ldr	r3, [r5, #0]
   b812a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b812c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b812e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8134:	6823      	ldr	r3, [r4, #0]
   b8136:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8138:	a904      	add	r1, sp, #16
   b813a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b813c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8140:	f7ff f974 	bl	b742c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8144:	a805      	add	r0, sp, #20
   b8146:	f7ff f902 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b814a:	f8d8 3000 	ldr.w	r3, [r8]
   b814e:	b93b      	cbnz	r3, b8160 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8150:	4a06      	ldr	r2, [pc, #24]	; (b816c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8152:	4907      	ldr	r1, [pc, #28]	; (b8170 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8154:	200a      	movs	r0, #10
}
   b8156:	b007      	add	sp, #28
   b8158:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b815c:	f7fe b818 	b.w	b6190 <panic_>
}
   b8160:	b007      	add	sp, #28
   b8162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8166:	bf00      	nop
   b8168:	000baaf8 	.word	0x000baaf8
   b816c:	000b5d6d 	.word	0x000b5d6d
   b8170:	000ba988 	.word	0x000ba988

000b8174 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8174:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8178:	4604      	mov	r4, r0
   b817a:	460d      	mov	r5, r1
   b817c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b817e:	d914      	bls.n	b81aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8180:	4290      	cmp	r0, r2
   b8182:	d213      	bcs.n	b81ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8184:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8188:	1a75      	subs	r5, r6, r1
   b818a:	f1a1 0708 	sub.w	r7, r1, #8
   b818e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8190:	42b7      	cmp	r7, r6
   b8192:	d018      	beq.n	b81c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8194:	b11c      	cbz	r4, b819e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8196:	4631      	mov	r1, r6
   b8198:	4620      	mov	r0, r4
   b819a:	f7ff f8c4 	bl	b7326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b819e:	1d30      	adds	r0, r6, #4
   b81a0:	f7ff f8d5 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b81a4:	3e08      	subs	r6, #8
   b81a6:	3c08      	subs	r4, #8
   b81a8:	e7f2      	b.n	b8190 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b81aa:	d00c      	beq.n	b81c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b81ac:	42b5      	cmp	r5, r6
   b81ae:	d00a      	beq.n	b81c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b81b0:	b11c      	cbz	r4, b81ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b81b2:	4629      	mov	r1, r5
   b81b4:	4620      	mov	r0, r4
   b81b6:	f7ff f8b6 	bl	b7326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b81ba:	1d28      	adds	r0, r5, #4
   b81bc:	f7ff f8c7 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b81c0:	3508      	adds	r5, #8
   b81c2:	3408      	adds	r4, #8
   b81c4:	e7f2      	b.n	b81ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b81c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b81c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b81c8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b81ca:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b81cc:	4605      	mov	r5, r0
        if (n > 0) {
   b81ce:	dd11      	ble.n	b81f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b81d0:	00f0      	lsls	r0, r6, #3
   b81d2:	f7fe f881 	bl	b62d8 <malloc>
            if (!d) {
   b81d6:	4604      	mov	r4, r0
   b81d8:	b158      	cbz	r0, b81f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b81da:	e9d5 1200 	ldrd	r1, r2, [r5]
   b81de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b81e2:	f7ff ffc7 	bl	b8174 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b81e6:	6828      	ldr	r0, [r5, #0]
   b81e8:	f7fe f87e 	bl	b62e8 <free>
        data_ = d;
   b81ec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b81ee:	60ae      	str	r6, [r5, #8]
        return true;
   b81f0:	2001      	movs	r0, #1
    }
   b81f2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b81f4:	2400      	movs	r4, #0
   b81f6:	e7f6      	b.n	b81e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b81f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b81f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b81fa:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b81fc:	6845      	ldr	r5, [r0, #4]
   b81fe:	4668      	mov	r0, sp
   b8200:	f7ff f891 	bl	b7326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8204:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8208:	4299      	cmp	r1, r3
   b820a:	da10      	bge.n	b822e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b820c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b820e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8210:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8214:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8218:	4629      	mov	r1, r5
   b821a:	f105 0008 	add.w	r0, r5, #8
   b821e:	f7ff ffa9 	bl	b8174 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8222:	b98d      	cbnz	r5, b8248 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8224:	6863      	ldr	r3, [r4, #4]
   b8226:	3301      	adds	r3, #1
   b8228:	6063      	str	r3, [r4, #4]
    return true;
   b822a:	2601      	movs	r6, #1
   b822c:	e006      	b.n	b823c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b822e:	3101      	adds	r1, #1
   b8230:	4620      	mov	r0, r4
   b8232:	f7ff ffc9 	bl	b81c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8236:	4606      	mov	r6, r0
   b8238:	2800      	cmp	r0, #0
   b823a:	d1e7      	bne.n	b820c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b823c:	a801      	add	r0, sp, #4
   b823e:	f7ff f886 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8242:	4630      	mov	r0, r6
   b8244:	b002      	add	sp, #8
   b8246:	bd70      	pop	{r4, r5, r6, pc}
   b8248:	4669      	mov	r1, sp
   b824a:	4628      	mov	r0, r5
   b824c:	f7ff f86b 	bl	b7326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8250:	e7e8      	b.n	b8224 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8252 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8252:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8256:	4604      	mov	r4, r0
   b8258:	460d      	mov	r5, r1
   b825a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b825c:	d914      	bls.n	b8288 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b825e:	4290      	cmp	r0, r2
   b8260:	d213      	bcs.n	b828a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8262:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8266:	1a75      	subs	r5, r6, r1
   b8268:	f1a1 0708 	sub.w	r7, r1, #8
   b826c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b826e:	42b7      	cmp	r7, r6
   b8270:	d018      	beq.n	b82a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8272:	b11c      	cbz	r4, b827c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8274:	4631      	mov	r1, r6
   b8276:	4620      	mov	r0, r4
   b8278:	f7ff f847 	bl	b730a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b827c:	1d30      	adds	r0, r6, #4
   b827e:	f7ff f866 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8282:	3e08      	subs	r6, #8
   b8284:	3c08      	subs	r4, #8
   b8286:	e7f2      	b.n	b826e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8288:	d00c      	beq.n	b82a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b828a:	42b5      	cmp	r5, r6
   b828c:	d00a      	beq.n	b82a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b828e:	b11c      	cbz	r4, b8298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8290:	4629      	mov	r1, r5
   b8292:	4620      	mov	r0, r4
   b8294:	f7ff f839 	bl	b730a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8298:	1d28      	adds	r0, r5, #4
   b829a:	f7ff f858 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b829e:	3508      	adds	r5, #8
   b82a0:	3408      	adds	r4, #8
   b82a2:	e7f2      	b.n	b828a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b82a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b82a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b82a6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b82a8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b82aa:	4605      	mov	r5, r0
        if (n > 0) {
   b82ac:	dd11      	ble.n	b82d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b82ae:	00f0      	lsls	r0, r6, #3
   b82b0:	f7fe f812 	bl	b62d8 <malloc>
            if (!d) {
   b82b4:	4604      	mov	r4, r0
   b82b6:	b158      	cbz	r0, b82d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b82b8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b82bc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b82c0:	f7ff ffc7 	bl	b8252 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b82c4:	6828      	ldr	r0, [r5, #0]
   b82c6:	f7fe f80f 	bl	b62e8 <free>
        data_ = d;
   b82ca:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b82cc:	60ae      	str	r6, [r5, #8]
        return true;
   b82ce:	2001      	movs	r0, #1
    }
   b82d0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b82d2:	2400      	movs	r4, #0
   b82d4:	e7f6      	b.n	b82c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b82d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b82d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b82d8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b82da:	6845      	ldr	r5, [r0, #4]
   b82dc:	4668      	mov	r0, sp
   b82de:	f7ff f814 	bl	b730a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b82e2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b82e6:	4299      	cmp	r1, r3
   b82e8:	da10      	bge.n	b830c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b82ea:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b82ec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b82ee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b82f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b82f6:	4629      	mov	r1, r5
   b82f8:	f105 0008 	add.w	r0, r5, #8
   b82fc:	f7ff ffa9 	bl	b8252 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8300:	b98d      	cbnz	r5, b8326 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8302:	6863      	ldr	r3, [r4, #4]
   b8304:	3301      	adds	r3, #1
   b8306:	6063      	str	r3, [r4, #4]
    return true;
   b8308:	2601      	movs	r6, #1
   b830a:	e006      	b.n	b831a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b830c:	3101      	adds	r1, #1
   b830e:	4620      	mov	r0, r4
   b8310:	f7ff ffc9 	bl	b82a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8314:	4606      	mov	r6, r0
   b8316:	2800      	cmp	r0, #0
   b8318:	d1e7      	bne.n	b82ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b831a:	a801      	add	r0, sp, #4
   b831c:	f7ff f817 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8320:	4630      	mov	r0, r6
   b8322:	b002      	add	sp, #8
   b8324:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8326:	4669      	mov	r1, sp
   b8328:	4628      	mov	r0, r5
   b832a:	f7fe ffee 	bl	b730a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b832e:	e7e8      	b.n	b8302 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8330 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8334:	4617      	mov	r7, r2
   b8336:	b0a1      	sub	sp, #132	; 0x84
   b8338:	4680      	mov	r8, r0
    WiringBleLock lk;
   b833a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b833c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b833e:	f7fe fb67 	bl	b6a10 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8342:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8344:	7923      	ldrb	r3, [r4, #4]
   b8346:	b953      	cbnz	r3, b835e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8348:	4639      	mov	r1, r7
   b834a:	4640      	mov	r0, r8
   b834c:	f7fe ffdd 	bl	b730a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8350:	a80a      	add	r0, sp, #40	; 0x28
   b8352:	f7fe fb6b 	bl	b6a2c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8356:	4640      	mov	r0, r8
   b8358:	b021      	add	sp, #132	; 0x84
   b835a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b835e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8360:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8364:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8368:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b836a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b836e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8372:	9b03      	ldr	r3, [sp, #12]
   b8374:	429d      	cmp	r5, r3
   b8376:	d021      	beq.n	b83bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8378:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b837c:	4658      	mov	r0, fp
   b837e:	f109 0114 	add.w	r1, r9, #20
   b8382:	f7fe fc6e 	bl	b6c62 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8386:	b1b8      	cbz	r0, b83b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8388:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b838c:	4650      	mov	r0, sl
   b838e:	f7fe fc68 	bl	b6c62 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8392:	b188      	cbz	r0, b83b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8394:	6823      	ldr	r3, [r4, #0]
   b8396:	f8d9 2000 	ldr.w	r2, [r9]
   b839a:	4053      	eors	r3, r2
   b839c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b83a0:	d10a      	bne.n	b83b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b83a2:	2220      	movs	r2, #32
   b83a4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b83a8:	4a5e      	ldr	r2, [pc, #376]	; (b8524 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b83aa:	9200      	str	r2, [sp, #0]
   b83ac:	aa15      	add	r2, sp, #84	; 0x54
   b83ae:	495e      	ldr	r1, [pc, #376]	; (b8528 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b83b0:	2032      	movs	r0, #50	; 0x32
   b83b2:	f7fd fef5 	bl	b61a0 <log_message>
   b83b6:	e7c7      	b.n	b8348 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b83b8:	3508      	adds	r5, #8
   b83ba:	e7da      	b.n	b8372 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b83bc:	4650      	mov	r0, sl
   b83be:	f7fe fc21 	bl	b6c04 <_ZNK8particle7BleUuid7isValidEv>
   b83c2:	b960      	cbnz	r0, b83de <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b83c4:	4959      	ldr	r1, [pc, #356]	; (b852c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b83c6:	2201      	movs	r2, #1
   b83c8:	a815      	add	r0, sp, #84	; 0x54
   b83ca:	ad15      	add	r5, sp, #84	; 0x54
   b83cc:	f7fe fbe8 	bl	b6ba0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b83d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b83d2:	46d4      	mov	ip, sl
   b83d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b83d8:	682b      	ldr	r3, [r5, #0]
   b83da:	f8cc 3000 	str.w	r3, [ip]
   b83de:	6833      	ldr	r3, [r6, #0]
   b83e0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b83e4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b83e8:	455d      	cmp	r5, fp
   b83ea:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b83ec:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b83ee:	d06e      	beq.n	b84ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b83f0:	f855 0b08 	ldr.w	r0, [r5], #8
   b83f4:	f7fe fc35 	bl	b6c62 <_ZNK8particle7BleUuideqERKS0_>
   b83f8:	2800      	cmp	r0, #0
   b83fa:	d0f5      	beq.n	b83e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b83fc:	f104 0a14 	add.w	sl, r4, #20
   b8400:	4650      	mov	r0, sl
   b8402:	f7fe fbff 	bl	b6c04 <_ZNK8particle7BleUuid7isValidEv>
   b8406:	b988      	cbnz	r0, b842c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8408:	4b49      	ldr	r3, [pc, #292]	; (b8530 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b840a:	4948      	ldr	r1, [pc, #288]	; (b852c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b840c:	881a      	ldrh	r2, [r3, #0]
   b840e:	3201      	adds	r2, #1
   b8410:	b292      	uxth	r2, r2
   b8412:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8414:	a815      	add	r0, sp, #84	; 0x54
   b8416:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8418:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b841a:	f7fe fbea 	bl	b6bf2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b841e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8420:	46d4      	mov	ip, sl
   b8422:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8426:	682b      	ldr	r3, [r5, #0]
   b8428:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b842c:	4b41      	ldr	r3, [pc, #260]	; (b8534 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b842e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8430:	2228      	movs	r2, #40	; 0x28
   b8432:	2100      	movs	r1, #0
   b8434:	a816      	add	r0, sp, #88	; 0x58
   b8436:	f001 fb33 	bl	b9aa0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b843a:	4651      	mov	r1, sl
   b843c:	a804      	add	r0, sp, #16
   b843e:	f7fe fbf3 	bl	b6c28 <_ZN8particle7BleUuid7halUUIDEv>
   b8442:	ab04      	add	r3, sp, #16
   b8444:	aa18      	add	r2, sp, #96	; 0x60
   b8446:	f10d 0c20 	add.w	ip, sp, #32
   b844a:	6818      	ldr	r0, [r3, #0]
   b844c:	6859      	ldr	r1, [r3, #4]
   b844e:	4615      	mov	r5, r2
   b8450:	c503      	stmia	r5!, {r0, r1}
   b8452:	3308      	adds	r3, #8
   b8454:	4563      	cmp	r3, ip
   b8456:	462a      	mov	r2, r5
   b8458:	d1f7      	bne.n	b844a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b845a:	6818      	ldr	r0, [r3, #0]
   b845c:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b845e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8460:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8464:	f8d9 3000 	ldr.w	r3, [r9]
   b8468:	8a9b      	ldrh	r3, [r3, #20]
   b846a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b846e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8470:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8472:	4b31      	ldr	r3, [pc, #196]	; (b8538 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8474:	2200      	movs	r2, #0
   b8476:	1da1      	adds	r1, r4, #6
   b8478:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b847a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b847e:	f7fd fcf3 	bl	b5e68 <hal_ble_gatt_server_add_characteristic>
   b8482:	2800      	cmp	r0, #0
   b8484:	f47f af60 	bne.w	b8348 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8488:	2301      	movs	r3, #1
   b848a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b848c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b848e:	4639      	mov	r1, r7
        return characteristics_;
   b8490:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8492:	a80d      	add	r0, sp, #52	; 0x34
   b8494:	f7fe ff39 	bl	b730a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8498:	4620      	mov	r0, r4
   b849a:	a90d      	add	r1, sp, #52	; 0x34
   b849c:	f7ff ff1b 	bl	b82d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b84a0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b84a2:	a80e      	add	r0, sp, #56	; 0x38
   b84a4:	f7fe ff53 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84a8:	2c00      	cmp	r4, #0
   b84aa:	f47f af4d 	bne.w	b8348 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b84ae:	2320      	movs	r3, #32
   b84b0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b84b4:	4b21      	ldr	r3, [pc, #132]	; (b853c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b84b6:	9300      	str	r3, [sp, #0]
   b84b8:	aa0d      	add	r2, sp, #52	; 0x34
   b84ba:	4623      	mov	r3, r4
   b84bc:	e777      	b.n	b83ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b84be:	4639      	mov	r1, r7
   b84c0:	4640      	mov	r0, r8
   b84c2:	f7fe ff22 	bl	b730a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b84c6:	a80c      	add	r0, sp, #48	; 0x30
   b84c8:	f7fe ff41 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84cc:	e740      	b.n	b8350 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b84ce:	a80b      	add	r0, sp, #44	; 0x2c
   b84d0:	f7fe fce0 	bl	b6e94 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b84d4:	4651      	mov	r1, sl
   b84d6:	a815      	add	r0, sp, #84	; 0x54
   b84d8:	f7fe fba6 	bl	b6c28 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b84dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b84de:	2300      	movs	r3, #0
   b84e0:	3214      	adds	r2, #20
   b84e2:	a915      	add	r1, sp, #84	; 0x54
   b84e4:	2001      	movs	r0, #1
   b84e6:	f7fd fcb5 	bl	b5e54 <hal_ble_gatt_server_add_service>
   b84ea:	2800      	cmp	r0, #0
   b84ec:	d1e7      	bne.n	b84be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b84ee:	6835      	ldr	r5, [r6, #0]
   b84f0:	a90b      	add	r1, sp, #44	; 0x2c
   b84f2:	a80d      	add	r0, sp, #52	; 0x34
   b84f4:	f7fe ff17 	bl	b7326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b84f8:	4628      	mov	r0, r5
   b84fa:	a90d      	add	r1, sp, #52	; 0x34
   b84fc:	f7ff fe7c 	bl	b81f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8500:	4605      	mov	r5, r0
   b8502:	a80e      	add	r0, sp, #56	; 0x38
   b8504:	f7fe ff23 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8508:	2d00      	cmp	r5, #0
   b850a:	d0d8      	beq.n	b84be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b850c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b850e:	6853      	ldr	r3, [r2, #4]
   b8510:	6812      	ldr	r2, [r2, #0]
   b8512:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8516:	3b01      	subs	r3, #1
   b8518:	a80c      	add	r0, sp, #48	; 0x30
   b851a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b851e:	f7fe ff16 	bl	b734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8522:	e76b      	b.n	b83fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8524:	000baa9d 	.word	0x000baa9d
   b8528:	000ba99f 	.word	0x000ba99f
   b852c:	000bab62 	.word	0x000bab62
   b8530:	2003e6d4 	.word	0x2003e6d4
   b8534:	002c0003 	.word	0x002c0003
   b8538:	000b702d 	.word	0x000b702d
   b853c:	000baac8 	.word	0x000baac8

000b8540 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8540:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8544:	4604      	mov	r4, r0
   b8546:	460d      	mov	r5, r1
   b8548:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b854a:	d914      	bls.n	b8576 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b854c:	4290      	cmp	r0, r2
   b854e:	d213      	bcs.n	b8578 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8550:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b8554:	1a75      	subs	r5, r6, r1
   b8556:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b855a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b855c:	42b7      	cmp	r7, r6
   b855e:	d018      	beq.n	b8592 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8560:	b11c      	cbz	r4, b856a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8562:	4631      	mov	r1, r6
   b8564:	4620      	mov	r0, r4
   b8566:	f7ff f94b 	bl	b7800 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b856a:	4630      	mov	r0, r6
   b856c:	f7fe fdc4 	bl	b70f8 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b8570:	3e24      	subs	r6, #36	; 0x24
   b8572:	3c24      	subs	r4, #36	; 0x24
   b8574:	e7f2      	b.n	b855c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8576:	d00c      	beq.n	b8592 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8578:	42b5      	cmp	r5, r6
   b857a:	d00a      	beq.n	b8592 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b857c:	b11c      	cbz	r4, b8586 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b857e:	4629      	mov	r1, r5
   b8580:	4620      	mov	r0, r4
   b8582:	f7ff f93d 	bl	b7800 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b8586:	4628      	mov	r0, r5
   b8588:	f7fe fdb6 	bl	b70f8 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b858c:	3524      	adds	r5, #36	; 0x24
   b858e:	3424      	adds	r4, #36	; 0x24
   b8590:	e7f2      	b.n	b8578 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8594 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b8596:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8598:	4605      	mov	r5, r0
        if (n > 0) {
   b859a:	dd13      	ble.n	b85c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b859c:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b859e:	fb07 f006 	mul.w	r0, r7, r6
   b85a2:	f7fd fe99 	bl	b62d8 <malloc>
            if (!d) {
   b85a6:	4604      	mov	r4, r0
   b85a8:	b158      	cbz	r0, b85c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b85aa:	e9d5 1200 	ldrd	r1, r2, [r5]
   b85ae:	fb07 1202 	mla	r2, r7, r2, r1
   b85b2:	f7ff ffc5 	bl	b8540 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b85b6:	6828      	ldr	r0, [r5, #0]
   b85b8:	f7fd fe96 	bl	b62e8 <free>
        data_ = d;
   b85bc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b85be:	60ae      	str	r6, [r5, #8]
        return true;
   b85c0:	2001      	movs	r0, #1
    }
   b85c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b85c4:	2400      	movs	r4, #0
   b85c6:	e7f6      	b.n	b85b6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b85c8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b85c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b85cc:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b85ce:	ad01      	add	r5, sp, #4
   b85d0:	4606      	mov	r6, r0
   b85d2:	4628      	mov	r0, r5
   b85d4:	460c      	mov	r4, r1
   b85d6:	f7fe fa5b 	bl	b6a90 <_ZN8particle10BleAddressC1Ev>
   b85da:	a803      	add	r0, sp, #12
   b85dc:	f7ff f9eb 	bl	b79b6 <_ZN8particle18BleAdvertisingDataC1Ev>
   b85e0:	a806      	add	r0, sp, #24
   b85e2:	f7ff f9e8 	bl	b79b6 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b85e6:	6930      	ldr	r0, [r6, #16]
   b85e8:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b85ea:	89f2      	ldrh	r2, [r6, #14]
   b85ec:	ab13      	add	r3, sp, #76	; 0x4c
   b85ee:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b85f0:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b85f4:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b85f6:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b85f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b85fc:	a806      	add	r0, sp, #24
   b85fe:	f7ff f94e 	bl	b789e <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b8602:	89b2      	ldrh	r2, [r6, #12]
   b8604:	6871      	ldr	r1, [r6, #4]
   b8606:	a803      	add	r0, sp, #12
   b8608:	f7ff f949 	bl	b789e <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b860c:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b8610:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b8612:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b8614:	d003      	beq.n	b861e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b8616:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b861a:	429a      	cmp	r2, r3
   b861c:	db5c      	blt.n	b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b861e:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b8622:	2b7f      	cmp	r3, #127	; 0x7f
   b8624:	d003      	beq.n	b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b8626:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b862a:	429a      	cmp	r2, r3
   b862c:	dc54      	bgt.n	b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b862e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b8632:	4638      	mov	r0, r7
   b8634:	f7fe ffab 	bl	b758e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b8638:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b863a:	2b00      	cmp	r3, #0
   b863c:	dd52      	ble.n	b86e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b863e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b8640:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b8644:	45b1      	cmp	r9, r6
   b8646:	d050      	beq.n	b86ea <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b8648:	4630      	mov	r0, r6
   b864a:	4629      	mov	r1, r5
   b864c:	f7fe fa0c 	bl	b6a68 <_ZNK8particle10BleAddresseqERKS0_>
   b8650:	3608      	adds	r6, #8
   b8652:	4680      	mov	r8, r0
   b8654:	2800      	cmp	r0, #0
   b8656:	d0f5      	beq.n	b8644 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b8658:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b865a:	f7fd fe45 	bl	b62e8 <free>
        if (!delegator->filterByRssi(result) ||
   b865e:	f1b8 0f00 	cmp.w	r8, #0
   b8662:	d039      	beq.n	b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b8664:	4629      	mov	r1, r5
   b8666:	4620      	mov	r0, r4
   b8668:	f7fe ff54 	bl	b7514 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b866c:	b3a0      	cbz	r0, b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b866e:	4629      	mov	r1, r5
   b8670:	4620      	mov	r0, r4
   b8672:	f7ff fc8d 	bl	b7f90 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b8676:	4606      	mov	r6, r0
   b8678:	b370      	cbz	r0, b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b867a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b867e:	4638      	mov	r0, r7
   b8680:	f7fe ffd0 	bl	b7624 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b8684:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8686:	2b00      	cmp	r3, #0
   b8688:	dd12      	ble.n	b86b0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b868a:	a806      	add	r0, sp, #24
   b868c:	f7fe fbc4 	bl	b6e18 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b8690:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b8692:	a803      	add	r0, sp, #12
   b8694:	f7fe fbc0 	bl	b6e18 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b8698:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b869c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b86a0:	429a      	cmp	r2, r3
   b86a2:	d025      	beq.n	b86f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b86a4:	f833 1b02 	ldrh.w	r1, [r3], #2
   b86a8:	4588      	cmp	r8, r1
   b86aa:	d001      	beq.n	b86b0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b86ac:	4288      	cmp	r0, r1
   b86ae:	d1f7      	bne.n	b86a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b86b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b86b2:	f7fd fe19 	bl	b62e8 <free>
              !delegator->filterByServiceUUID(result) ||
   b86b6:	b17e      	cbz	r6, b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b86b8:	4629      	mov	r1, r5
   b86ba:	4620      	mov	r0, r4
   b86bc:	f7fe ffe8 	bl	b7690 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b86c0:	b150      	cbz	r0, b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b86c2:	6a23      	ldr	r3, [r4, #32]
   b86c4:	b1b3      	cbz	r3, b86f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b86c6:	6963      	ldr	r3, [r4, #20]
   b86c8:	9513      	str	r5, [sp, #76]	; 0x4c
   b86ca:	3301      	adds	r3, #1
   b86cc:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b86ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b86d0:	4639      	mov	r1, r7
   b86d2:	f104 0018 	add.w	r0, r4, #24
   b86d6:	4798      	blx	r3
            return;
   b86d8:	4628      	mov	r0, r5
   b86da:	f7fe fd0d 	bl	b70f8 <_ZN8particle13BleScanResultD1Ev>
    }
   b86de:	b01d      	add	sp, #116	; 0x74
   b86e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b86e4:	f04f 0801 	mov.w	r8, #1
   b86e8:	e7b6      	b.n	b8658 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b86ea:	f04f 0800 	mov.w	r8, #0
   b86ee:	e7b3      	b.n	b8658 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b86f0:	2600      	movs	r6, #0
   b86f2:	e7dd      	b.n	b86b0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b86f4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b86f8:	f1b8 0f00 	cmp.w	r8, #0
   b86fc:	d007      	beq.n	b870e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b86fe:	6963      	ldr	r3, [r4, #20]
   b8700:	3301      	adds	r3, #1
   b8702:	6163      	str	r3, [r4, #20]
   b8704:	4629      	mov	r1, r5
   b8706:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b8708:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b870c:	e7e3      	b.n	b86d6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b870e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b8712:	f1bc 0f00 	cmp.w	ip, #0
   b8716:	d025      	beq.n	b8764 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b8718:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b871a:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b871c:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b871e:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b8720:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b8722:	d8d9      	bhi.n	b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b8724:	2224      	movs	r2, #36	; 0x24
   b8726:	4353      	muls	r3, r2
    address_ = addr.address_;
   b8728:	462a      	mov	r2, r5
   b872a:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b872c:	3b24      	subs	r3, #36	; 0x24
   b872e:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b8732:	f84c 0003 	str.w	r0, [ip, r3]
   b8736:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b8738:	f106 0008 	add.w	r0, r6, #8
   b873c:	a903      	add	r1, sp, #12
   b873e:	f7ff f876 	bl	b782e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b8742:	a906      	add	r1, sp, #24
   b8744:	f106 0014 	add.w	r0, r6, #20
   b8748:	f7ff f871 	bl	b782e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b874c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b8750:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b8754:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b8758:	429a      	cmp	r2, r3
   b875a:	d3bd      	bcc.n	b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b875c:	4640      	mov	r0, r8
   b875e:	f7fd fb65 	bl	b5e2c <hal_ble_gap_stop_scan>
   b8762:	e7b9      	b.n	b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b8764:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8768:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b876c:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b8770:	a903      	add	r1, sp, #12
   b8772:	a80c      	add	r0, sp, #48	; 0x30
   b8774:	f7ff f827 	bl	b77c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8778:	a906      	add	r1, sp, #24
   b877a:	a80f      	add	r0, sp, #60	; 0x3c
   b877c:	f7ff f823 	bl	b77c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b8780:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b8784:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b8788:	4641      	mov	r1, r8
   b878a:	4638      	mov	r0, r7
   b878c:	6866      	ldr	r6, [r4, #4]
   b878e:	f7ff f837 	bl	b7800 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8792:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8796:	4299      	cmp	r1, r3
   b8798:	da10      	bge.n	b87bc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b879a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b879c:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b879e:	2224      	movs	r2, #36	; 0x24
   b87a0:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b87a4:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b87a8:	fb02 3201 	mla	r2, r2, r1, r3
   b87ac:	4631      	mov	r1, r6
   b87ae:	f7ff fec7 	bl	b8540 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b87b2:	b986      	cbnz	r6, b87d6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b87b4:	6863      	ldr	r3, [r4, #4]
   b87b6:	3301      	adds	r3, #1
   b87b8:	6063      	str	r3, [r4, #4]
    return true;
   b87ba:	e005      	b.n	b87c8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b87bc:	3101      	adds	r1, #1
   b87be:	4620      	mov	r0, r4
   b87c0:	f7ff fee8 	bl	b8594 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b87c4:	2800      	cmp	r0, #0
   b87c6:	d1e8      	bne.n	b879a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b87c8:	4638      	mov	r0, r7
   b87ca:	f7fe fc95 	bl	b70f8 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b87ce:	4640      	mov	r0, r8
   b87d0:	f7fe fc92 	bl	b70f8 <_ZN8particle13BleScanResultD1Ev>
   b87d4:	e780      	b.n	b86d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b87d6:	4639      	mov	r1, r7
   b87d8:	4630      	mov	r0, r6
   b87da:	f7ff f811 	bl	b7800 <_ZN8particle13BleScanResultC1EOS0_>
   b87de:	e7e9      	b.n	b87b4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b87e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b87e0:	4802      	ldr	r0, [pc, #8]	; (b87ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b87e2:	2300      	movs	r3, #0
   b87e4:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b87e6:	f7fd bb53 	b.w	b5e90 <os_mutex_recursive_create>
   b87ea:	bf00      	nop
   b87ec:	2003e6d8 	.word	0x2003e6d8

000b87f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b87f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87f2:	4606      	mov	r6, r0
   b87f4:	460d      	mov	r5, r1
  size_t n = 0;
   b87f6:	188f      	adds	r7, r1, r2
   b87f8:	2400      	movs	r4, #0
  while (size--) {
   b87fa:	42bd      	cmp	r5, r7
   b87fc:	d00c      	beq.n	b8818 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b87fe:	6833      	ldr	r3, [r6, #0]
   b8800:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8804:	689b      	ldr	r3, [r3, #8]
   b8806:	4630      	mov	r0, r6
   b8808:	4798      	blx	r3
     if (chunk>=0)
   b880a:	1e03      	subs	r3, r0, #0
   b880c:	db01      	blt.n	b8812 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b880e:	441c      	add	r4, r3
  while (size--) {
   b8810:	e7f3      	b.n	b87fa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8812:	2c00      	cmp	r4, #0
   b8814:	bf08      	it	eq
   b8816:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8818:	4620      	mov	r0, r4
   b881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b881c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b881c:	b513      	push	{r0, r1, r4, lr}
   b881e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8820:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8822:	b159      	cbz	r1, b883c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8824:	9101      	str	r1, [sp, #4]
   b8826:	f001 f983 	bl	b9b30 <strlen>
   b882a:	6823      	ldr	r3, [r4, #0]
   b882c:	9901      	ldr	r1, [sp, #4]
   b882e:	68db      	ldr	r3, [r3, #12]
   b8830:	4602      	mov	r2, r0
   b8832:	4620      	mov	r0, r4
    }
   b8834:	b002      	add	sp, #8
   b8836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b883a:	4718      	bx	r3
    }
   b883c:	b002      	add	sp, #8
   b883e:	bd10      	pop	{r4, pc}

000b8840 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8840:	6803      	ldr	r3, [r0, #0]
   b8842:	689b      	ldr	r3, [r3, #8]
   b8844:	4718      	bx	r3

000b8846 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8846:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8848:	210d      	movs	r1, #13
{
   b884a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b884c:	f7ff fff8 	bl	b8840 <_ZN5Print5printEc>
  n += print('\n');
   b8850:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8852:	4604      	mov	r4, r0
  n += print('\n');
   b8854:	4628      	mov	r0, r5
   b8856:	f7ff fff3 	bl	b8840 <_ZN5Print5printEc>
  return n;
}
   b885a:	4420      	add	r0, r4
   b885c:	bd38      	pop	{r3, r4, r5, pc}

000b885e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b885e:	b538      	push	{r3, r4, r5, lr}
   b8860:	4605      	mov	r5, r0
  return write(str);
   b8862:	f7ff ffdb 	bl	b881c <_ZN5Print5writeEPKc>
   b8866:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8868:	4628      	mov	r0, r5
   b886a:	f7ff ffec 	bl	b8846 <_ZN5Print7printlnEv>
  return n;
}
   b886e:	4420      	add	r0, r4
   b8870:	bd38      	pop	{r3, r4, r5, pc}

000b8872 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8872:	b530      	push	{r4, r5, lr}
   b8874:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8876:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8878:	2a01      	cmp	r2, #1
  *str = '\0';
   b887a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b887e:	bf98      	it	ls
   b8880:	220a      	movls	r2, #10
   b8882:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8884:	460d      	mov	r5, r1
   b8886:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b888a:	fb01 5312 	mls	r3, r1, r2, r5
   b888e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8892:	2b09      	cmp	r3, #9
   b8894:	bf94      	ite	ls
   b8896:	3330      	addls	r3, #48	; 0x30
   b8898:	3337      	addhi	r3, #55	; 0x37
   b889a:	b2db      	uxtb	r3, r3
  } while(n);
   b889c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b889e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b88a2:	d9ef      	bls.n	b8884 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b88a4:	4621      	mov	r1, r4
   b88a6:	f7ff ffb9 	bl	b881c <_ZN5Print5writeEPKc>
}
   b88aa:	b00b      	add	sp, #44	; 0x2c
   b88ac:	bd30      	pop	{r4, r5, pc}

000b88ae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b88ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88b2:	b086      	sub	sp, #24
   b88b4:	af00      	add	r7, sp, #0
   b88b6:	4605      	mov	r5, r0
   b88b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b88ba:	1d38      	adds	r0, r7, #4
   b88bc:	2114      	movs	r1, #20
{
   b88be:	4614      	mov	r4, r2
    va_copy(args2, args);
   b88c0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b88c2:	f7fd fd21 	bl	b6308 <vsnprintf>

    if (n<bufsize)
   b88c6:	2813      	cmp	r0, #19
   b88c8:	d80e      	bhi.n	b88e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b88ca:	1d39      	adds	r1, r7, #4
   b88cc:	4628      	mov	r0, r5
   b88ce:	f7ff ffa5 	bl	b881c <_ZN5Print5writeEPKc>
   b88d2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b88d4:	b11e      	cbz	r6, b88de <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b88d6:	4628      	mov	r0, r5
   b88d8:	f7ff ffb5 	bl	b8846 <_ZN5Print7printlnEv>
   b88dc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b88de:	4620      	mov	r0, r4
   b88e0:	3718      	adds	r7, #24
   b88e2:	46bd      	mov	sp, r7
   b88e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b88e8:	f100 0308 	add.w	r3, r0, #8
   b88ec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b88f0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b88f2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b88f6:	4622      	mov	r2, r4
   b88f8:	1c41      	adds	r1, r0, #1
   b88fa:	683b      	ldr	r3, [r7, #0]
   b88fc:	4668      	mov	r0, sp
   b88fe:	f7fd fd03 	bl	b6308 <vsnprintf>
  return write(str);
   b8902:	4669      	mov	r1, sp
   b8904:	4628      	mov	r0, r5
   b8906:	f7ff ff89 	bl	b881c <_ZN5Print5writeEPKc>
   b890a:	4604      	mov	r4, r0
   b890c:	46c5      	mov	sp, r8
   b890e:	e7e1      	b.n	b88d4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8910 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8910:	4b01      	ldr	r3, [pc, #4]	; (b8918 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8912:	4a02      	ldr	r2, [pc, #8]	; (b891c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8914:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8916:	4770      	bx	lr
   b8918:	2003e6e0 	.word	0x2003e6e0
   b891c:	000bab82 	.word	0x000bab82

000b8920 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8920:	4b02      	ldr	r3, [pc, #8]	; (b892c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8922:	681a      	ldr	r2, [r3, #0]
   b8924:	4b02      	ldr	r3, [pc, #8]	; (b8930 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8926:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8928:	4770      	bx	lr
   b892a:	bf00      	nop
   b892c:	2003ddc0 	.word	0x2003ddc0
   b8930:	2003e6e4 	.word	0x2003e6e4

000b8934 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8934:	2100      	movs	r1, #0
   b8936:	f7fd bc43 	b.w	b61c0 <system_delay_ms>
	...

000b893c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b893c:	b510      	push	{r4, lr}
   b893e:	4b04      	ldr	r3, [pc, #16]	; (b8950 <_ZN9TCPClientD1Ev+0x14>)
   b8940:	6003      	str	r3, [r0, #0]
   b8942:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8944:	6980      	ldr	r0, [r0, #24]
   b8946:	b108      	cbz	r0, b894c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b8948:	f7fe f839 	bl	b69be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b894c:	4620      	mov	r0, r4
   b894e:	bd10      	pop	{r4, pc}
   b8950:	000bac7c 	.word	0x000bac7c

000b8954 <_ZN9TCPClientD0Ev>:
   b8954:	b510      	push	{r4, lr}
   b8956:	4604      	mov	r4, r0
   b8958:	f7ff fff0 	bl	b893c <_ZN9TCPClientD1Ev>
   b895c:	4620      	mov	r0, r4
   b895e:	211c      	movs	r1, #28
   b8960:	f7fb fb9b 	bl	b409a <_ZdlPvj>
   b8964:	4620      	mov	r0, r4
   b8966:	bd10      	pop	{r4, pc}

000b8968 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8968:	4b01      	ldr	r3, [pc, #4]	; (b8970 <_GLOBAL__sub_I_RGB+0x8>)
   b896a:	2200      	movs	r2, #0
   b896c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b896e:	4770      	bx	lr
   b8970:	2003e6e8 	.word	0x2003e6e8

000b8974 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8974:	4b01      	ldr	r3, [pc, #4]	; (b897c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8976:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8978:	4770      	bx	lr
   b897a:	bf00      	nop
   b897c:	2003ddc4 	.word	0x2003ddc4

000b8980 <serialEventRun>:
{
   b8980:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8982:	4b0b      	ldr	r3, [pc, #44]	; (b89b0 <serialEventRun+0x30>)
   b8984:	b143      	cbz	r3, b8998 <serialEventRun+0x18>
   b8986:	f000 f981 	bl	b8c8c <_Z16_fetch_usbserialv>
   b898a:	6803      	ldr	r3, [r0, #0]
   b898c:	691b      	ldr	r3, [r3, #16]
   b898e:	4798      	blx	r3
   b8990:	2800      	cmp	r0, #0
   b8992:	dd01      	ble.n	b8998 <serialEventRun+0x18>
        serialEvent();
   b8994:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8998:	4b06      	ldr	r3, [pc, #24]	; (b89b4 <serialEventRun+0x34>)
   b899a:	b143      	cbz	r3, b89ae <serialEventRun+0x2e>
   b899c:	f000 feae 	bl	b96fc <_Z22__fetch_global_Serial1v>
   b89a0:	6803      	ldr	r3, [r0, #0]
   b89a2:	691b      	ldr	r3, [r3, #16]
   b89a4:	4798      	blx	r3
   b89a6:	2800      	cmp	r0, #0
   b89a8:	dd01      	ble.n	b89ae <serialEventRun+0x2e>
        serialEvent1();
   b89aa:	f3af 8000 	nop.w
}
   b89ae:	bd08      	pop	{r3, pc}
	...

000b89b8 <_post_loop>:
{
   b89b8:	b508      	push	{r3, lr}
	serialEventRun();
   b89ba:	f7ff ffe1 	bl	b8980 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b89be:	f7fd f9e5 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b89c2:	4b01      	ldr	r3, [pc, #4]	; (b89c8 <_post_loop+0x10>)
   b89c4:	6018      	str	r0, [r3, #0]
}
   b89c6:	bd08      	pop	{r3, pc}
   b89c8:	2003e740 	.word	0x2003e740

000b89cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b89cc:	4805      	ldr	r0, [pc, #20]	; (b89e4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b89ce:	4a06      	ldr	r2, [pc, #24]	; (b89e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b89d0:	4906      	ldr	r1, [pc, #24]	; (b89ec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b89d2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b89d4:	1a12      	subs	r2, r2, r0
   b89d6:	f001 f83b 	bl	b9a50 <memcpy>
    __backup_sram_signature = signature;
   b89da:	4b05      	ldr	r3, [pc, #20]	; (b89f0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b89dc:	4a05      	ldr	r2, [pc, #20]	; (b89f4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b89de:	601a      	str	r2, [r3, #0]
}
   b89e0:	bd08      	pop	{r3, pc}
   b89e2:	bf00      	nop
   b89e4:	2003f400 	.word	0x2003f400
   b89e8:	2003f404 	.word	0x2003f404
   b89ec:	000bb014 	.word	0x000bb014
   b89f0:	2003f400 	.word	0x2003f400
   b89f4:	9a271c1e 	.word	0x9a271c1e

000b89f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b89f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b89fa:	2300      	movs	r3, #0
   b89fc:	9300      	str	r3, [sp, #0]
   b89fe:	461a      	mov	r2, r3
   b8a00:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8a04:	f7fd fbee 	bl	b61e4 <system_ctrl_set_result>
}
   b8a08:	b003      	add	sp, #12
   b8a0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8a10 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8a10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8a12:	8843      	ldrh	r3, [r0, #2]
   b8a14:	2b0a      	cmp	r3, #10
   b8a16:	d008      	beq.n	b8a2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8a18:	2b50      	cmp	r3, #80	; 0x50
   b8a1a:	d10b      	bne.n	b8a34 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8a1c:	4b09      	ldr	r3, [pc, #36]	; (b8a44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8a1e:	681b      	ldr	r3, [r3, #0]
   b8a20:	b14b      	cbz	r3, b8a36 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8a22:	b003      	add	sp, #12
   b8a24:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8a28:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8a2a:	f7ff ffe5 	bl	b89f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8a2e:	b003      	add	sp, #12
   b8a30:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8a34:	2300      	movs	r3, #0
   b8a36:	9300      	str	r3, [sp, #0]
   b8a38:	461a      	mov	r2, r3
   b8a3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8a3e:	f7fd fbd1 	bl	b61e4 <system_ctrl_set_result>
}
   b8a42:	e7f4      	b.n	b8a2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8a44:	2003e6fc 	.word	0x2003e6fc

000b8a48 <module_user_init_hook>:
{
   b8a48:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8a4a:	4812      	ldr	r0, [pc, #72]	; (b8a94 <module_user_init_hook+0x4c>)
   b8a4c:	2100      	movs	r1, #0
   b8a4e:	f7fd fc7b 	bl	b6348 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8a52:	4b11      	ldr	r3, [pc, #68]	; (b8a98 <module_user_init_hook+0x50>)
   b8a54:	681a      	ldr	r2, [r3, #0]
   b8a56:	4b11      	ldr	r3, [pc, #68]	; (b8a9c <module_user_init_hook+0x54>)
   b8a58:	429a      	cmp	r2, r3
   b8a5a:	4b11      	ldr	r3, [pc, #68]	; (b8aa0 <module_user_init_hook+0x58>)
   b8a5c:	bf0c      	ite	eq
   b8a5e:	2201      	moveq	r2, #1
   b8a60:	2200      	movne	r2, #0
   b8a62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8a64:	d001      	beq.n	b8a6a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8a66:	f7ff ffb1 	bl	b89cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8a6a:	f7fd f977 	bl	b5d5c <HAL_RNG_GetRandomNumber>
   b8a6e:	4604      	mov	r4, r0
    srand(seed);
   b8a70:	f001 f81e 	bl	b9ab0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8a74:	4b0b      	ldr	r3, [pc, #44]	; (b8aa4 <module_user_init_hook+0x5c>)
   b8a76:	b113      	cbz	r3, b8a7e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8a78:	4620      	mov	r0, r4
   b8a7a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8a7e:	2100      	movs	r1, #0
   b8a80:	4808      	ldr	r0, [pc, #32]	; (b8aa4 <module_user_init_hook+0x5c>)
   b8a82:	f7fd fc21 	bl	b62c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8a8a:	4807      	ldr	r0, [pc, #28]	; (b8aa8 <module_user_init_hook+0x60>)
   b8a8c:	2100      	movs	r1, #0
   b8a8e:	f7fd bb9f 	b.w	b61d0 <system_ctrl_set_app_request_handler>
   b8a92:	bf00      	nop
   b8a94:	000b8975 	.word	0x000b8975
   b8a98:	2003f400 	.word	0x2003f400
   b8a9c:	9a271c1e 	.word	0x9a271c1e
   b8aa0:	2003e6f8 	.word	0x2003e6f8
   b8aa4:	00000000 	.word	0x00000000
   b8aa8:	000b8a11 	.word	0x000b8a11

000b8aac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8aac:	4770      	bx	lr

000b8aae <_ZN9IPAddressD0Ev>:
   b8aae:	b510      	push	{r4, lr}
   b8ab0:	2118      	movs	r1, #24
   b8ab2:	4604      	mov	r4, r0
   b8ab4:	f7fb faf1 	bl	b409a <_ZdlPvj>
   b8ab8:	4620      	mov	r0, r4
   b8aba:	bd10      	pop	{r4, pc}

000b8abc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8abc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8abe:	7d03      	ldrb	r3, [r0, #20]
   b8ac0:	2b06      	cmp	r3, #6
{
   b8ac2:	b08d      	sub	sp, #52	; 0x34
   b8ac4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8ac6:	f100 0704 	add.w	r7, r0, #4
   b8aca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8ace:	d012      	beq.n	b8af6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8ad0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8ad4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8ad8:	220a      	movs	r2, #10
   b8ada:	4630      	mov	r0, r6
   b8adc:	f7ff fec9 	bl	b8872 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8ae0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8ae2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8ae4:	d019      	beq.n	b8b1a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8ae6:	2c00      	cmp	r4, #0
   b8ae8:	d0f4      	beq.n	b8ad4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8aea:	212e      	movs	r1, #46	; 0x2e
   b8aec:	4630      	mov	r0, r6
   b8aee:	f7ff fea7 	bl	b8840 <_ZN5Print5printEc>
   b8af2:	4404      	add	r4, r0
   b8af4:	e7ee      	b.n	b8ad4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8af6:	232f      	movs	r3, #47	; 0x2f
   b8af8:	466a      	mov	r2, sp
   b8afa:	4639      	mov	r1, r7
   b8afc:	200a      	movs	r0, #10
		buf[0] = 0;
   b8afe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8b02:	f7fd f9dd 	bl	b5ec0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8b06:	4668      	mov	r0, sp
   b8b08:	f001 f812 	bl	b9b30 <strlen>
   b8b0c:	6833      	ldr	r3, [r6, #0]
   b8b0e:	4602      	mov	r2, r0
   b8b10:	68db      	ldr	r3, [r3, #12]
   b8b12:	4669      	mov	r1, sp
   b8b14:	4630      	mov	r0, r6
   b8b16:	4798      	blx	r3
   b8b18:	4604      	mov	r4, r0
    }
    return n;
}
   b8b1a:	4620      	mov	r0, r4
   b8b1c:	b00d      	add	sp, #52	; 0x34
   b8b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8b20 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8b20:	b510      	push	{r4, lr}
   b8b22:	4b05      	ldr	r3, [pc, #20]	; (b8b38 <_ZN9IPAddressC1Ev+0x18>)
   b8b24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8b26:	2211      	movs	r2, #17
   b8b28:	f840 3b04 	str.w	r3, [r0], #4
   b8b2c:	2100      	movs	r1, #0
   b8b2e:	f000 ffb7 	bl	b9aa0 <memset>
}
   b8b32:	4620      	mov	r0, r4
   b8b34:	bd10      	pop	{r4, pc}
   b8b36:	bf00      	nop
   b8b38:	000babac 	.word	0x000babac

000b8b3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8b3c:	4603      	mov	r3, r0
   b8b3e:	4a07      	ldr	r2, [pc, #28]	; (b8b5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8b40:	b510      	push	{r4, lr}
   b8b42:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8b46:	f101 0210 	add.w	r2, r1, #16
   b8b4a:	f851 4b04 	ldr.w	r4, [r1], #4
   b8b4e:	f843 4b04 	str.w	r4, [r3], #4
   b8b52:	4291      	cmp	r1, r2
   b8b54:	d1f9      	bne.n	b8b4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8b56:	780a      	ldrb	r2, [r1, #0]
   b8b58:	701a      	strb	r2, [r3, #0]
}
   b8b5a:	bd10      	pop	{r4, pc}
   b8b5c:	000babac 	.word	0x000babac

000b8b60 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8b60:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8b62:	2b04      	cmp	r3, #4
   b8b64:	d104      	bne.n	b8b70 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8b66:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8b68:	3800      	subs	r0, #0
   b8b6a:	bf18      	it	ne
   b8b6c:	2001      	movne	r0, #1
   b8b6e:	4770      	bx	lr
    } else if (version() == 6) {
   b8b70:	2b06      	cmp	r3, #6
   b8b72:	d107      	bne.n	b8b84 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8b74:	6843      	ldr	r3, [r0, #4]
   b8b76:	b93b      	cbnz	r3, b8b88 <_ZNK9IPAddresscvbEv+0x28>
   b8b78:	6883      	ldr	r3, [r0, #8]
   b8b7a:	b92b      	cbnz	r3, b8b88 <_ZNK9IPAddresscvbEv+0x28>
   b8b7c:	68c3      	ldr	r3, [r0, #12]
   b8b7e:	b91b      	cbnz	r3, b8b88 <_ZNK9IPAddresscvbEv+0x28>
   b8b80:	6900      	ldr	r0, [r0, #16]
   b8b82:	e7f1      	b.n	b8b68 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8b84:	2000      	movs	r0, #0
   b8b86:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8b88:	2001      	movs	r0, #1
}
   b8b8a:	4770      	bx	lr

000b8b8c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8b8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8b8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8b92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8b96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8b9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8b9e:	2304      	movs	r3, #4
   b8ba0:	6041      	str	r1, [r0, #4]
   b8ba2:	7503      	strb	r3, [r0, #20]
}
   b8ba4:	bd10      	pop	{r4, pc}
	...

000b8ba8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8ba8:	b507      	push	{r0, r1, r2, lr}
   b8baa:	4b06      	ldr	r3, [pc, #24]	; (b8bc4 <_ZN9IPAddressC1EPKh+0x1c>)
   b8bac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8bae:	78cb      	ldrb	r3, [r1, #3]
   b8bb0:	9300      	str	r3, [sp, #0]
   b8bb2:	788b      	ldrb	r3, [r1, #2]
   b8bb4:	784a      	ldrb	r2, [r1, #1]
   b8bb6:	7809      	ldrb	r1, [r1, #0]
   b8bb8:	f7ff ffe8 	bl	b8b8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8bbc:	b003      	add	sp, #12
   b8bbe:	f85d fb04 	ldr.w	pc, [sp], #4
   b8bc2:	bf00      	nop
   b8bc4:	000babac 	.word	0x000babac

000b8bc8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8bc8:	7441      	strb	r1, [r0, #17]
}
   b8bca:	4770      	bx	lr

000b8bcc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8bcc:	4770      	bx	lr

000b8bce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8bce:	4770      	bx	lr

000b8bd0 <_ZN9USBSerial4readEv>:
{
   b8bd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8bd2:	2100      	movs	r1, #0
   b8bd4:	7c00      	ldrb	r0, [r0, #16]
   b8bd6:	f7fd fabb 	bl	b6150 <HAL_USB_USART_Receive_Data>
}
   b8bda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8bde:	bd08      	pop	{r3, pc}

000b8be0 <_ZN9USBSerial4peekEv>:
{
   b8be0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8be2:	2101      	movs	r1, #1
   b8be4:	7c00      	ldrb	r0, [r0, #16]
   b8be6:	f7fd fab3 	bl	b6150 <HAL_USB_USART_Receive_Data>
}
   b8bea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8bee:	bd08      	pop	{r3, pc}

000b8bf0 <_ZN9USBSerial17availableForWriteEv>:
{
   b8bf0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8bf2:	7c00      	ldrb	r0, [r0, #16]
   b8bf4:	f7fd faa4 	bl	b6140 <HAL_USB_USART_Available_Data_For_Write>
}
   b8bf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8bfc:	bd08      	pop	{r3, pc}

000b8bfe <_ZN9USBSerial9availableEv>:
{
   b8bfe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8c00:	7c00      	ldrb	r0, [r0, #16]
   b8c02:	f7fd fa95 	bl	b6130 <HAL_USB_USART_Available_Data>
}
   b8c06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8c0a:	bd08      	pop	{r3, pc}

000b8c0c <_ZN9USBSerial5writeEh>:
{
   b8c0c:	b513      	push	{r0, r1, r4, lr}
   b8c0e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8c10:	7c00      	ldrb	r0, [r0, #16]
{
   b8c12:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8c14:	f7fd fa94 	bl	b6140 <HAL_USB_USART_Available_Data_For_Write>
   b8c18:	2800      	cmp	r0, #0
   b8c1a:	9901      	ldr	r1, [sp, #4]
   b8c1c:	dc01      	bgt.n	b8c22 <_ZN9USBSerial5writeEh+0x16>
   b8c1e:	7c60      	ldrb	r0, [r4, #17]
   b8c20:	b120      	cbz	r0, b8c2c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8c22:	7c20      	ldrb	r0, [r4, #16]
   b8c24:	f7fd fa9c 	bl	b6160 <HAL_USB_USART_Send_Data>
   b8c28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8c2c:	b002      	add	sp, #8
   b8c2e:	bd10      	pop	{r4, pc}

000b8c30 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8c30:	7c00      	ldrb	r0, [r0, #16]
   b8c32:	f7fd ba9d 	b.w	b6170 <HAL_USB_USART_Flush_Data>

000b8c36 <_ZN9USBSerialD0Ev>:
   b8c36:	b510      	push	{r4, lr}
   b8c38:	2114      	movs	r1, #20
   b8c3a:	4604      	mov	r4, r0
   b8c3c:	f7fb fa2d 	bl	b409a <_ZdlPvj>
   b8c40:	4620      	mov	r0, r4
   b8c42:	bd10      	pop	{r4, pc}

000b8c44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8c44:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8c4a:	4604      	mov	r4, r0
   b8c4c:	4608      	mov	r0, r1
   b8c4e:	2100      	movs	r1, #0
   b8c50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8c54:	4b04      	ldr	r3, [pc, #16]	; (b8c68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8c56:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8c58:	2301      	movs	r3, #1
  _serial = serial;
   b8c5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8c5c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8c5e:	4611      	mov	r1, r2
   b8c60:	f7fd fa56 	bl	b6110 <HAL_USB_USART_Init>
}
   b8c64:	4620      	mov	r0, r4
   b8c66:	bd10      	pop	{r4, pc}
   b8c68:	000babc0 	.word	0x000babc0

000b8c6c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8c6c:	7c00      	ldrb	r0, [r0, #16]
   b8c6e:	2200      	movs	r2, #0
   b8c70:	f7fd ba56 	b.w	b6120 <HAL_USB_USART_Begin>

000b8c74 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b8c74:	7c00      	ldrb	r0, [r0, #16]
   b8c76:	f7fd ba83 	b.w	b6180 <HAL_USB_USART_Is_Connected>

000b8c7a <_Z19acquireSerialBufferv>:
{
   b8c7a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8c7c:	2214      	movs	r2, #20
{
   b8c7e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8c80:	2100      	movs	r1, #0
   b8c82:	f000 ff0d 	bl	b9aa0 <memset>
}
   b8c86:	4620      	mov	r0, r4
   b8c88:	bd10      	pop	{r4, pc}
	...

000b8c8c <_Z16_fetch_usbserialv>:
{
   b8c8c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8c8e:	4c0f      	ldr	r4, [pc, #60]	; (b8ccc <_Z16_fetch_usbserialv+0x40>)
{
   b8c90:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8c92:	a803      	add	r0, sp, #12
   b8c94:	f7ff fff1 	bl	b8c7a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8c98:	7821      	ldrb	r1, [r4, #0]
   b8c9a:	f3bf 8f5b 	dmb	ish
   b8c9e:	f011 0101 	ands.w	r1, r1, #1
   b8ca2:	d10f      	bne.n	b8cc4 <_Z16_fetch_usbserialv+0x38>
   b8ca4:	4620      	mov	r0, r4
   b8ca6:	9101      	str	r1, [sp, #4]
   b8ca8:	f7fb fa06 	bl	b40b8 <__cxa_guard_acquire>
   b8cac:	9901      	ldr	r1, [sp, #4]
   b8cae:	b148      	cbz	r0, b8cc4 <_Z16_fetch_usbserialv+0x38>
   b8cb0:	aa03      	add	r2, sp, #12
   b8cb2:	4807      	ldr	r0, [pc, #28]	; (b8cd0 <_Z16_fetch_usbserialv+0x44>)
   b8cb4:	f7ff ffc6 	bl	b8c44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8cb8:	4620      	mov	r0, r4
   b8cba:	f7fb fa02 	bl	b40c2 <__cxa_guard_release>
   b8cbe:	4805      	ldr	r0, [pc, #20]	; (b8cd4 <_Z16_fetch_usbserialv+0x48>)
   b8cc0:	f000 fe98 	bl	b99f4 <atexit>
	return _usbserial;
}
   b8cc4:	4802      	ldr	r0, [pc, #8]	; (b8cd0 <_Z16_fetch_usbserialv+0x44>)
   b8cc6:	b008      	add	sp, #32
   b8cc8:	bd10      	pop	{r4, pc}
   b8cca:	bf00      	nop
   b8ccc:	2003e700 	.word	0x2003e700
   b8cd0:	2003e704 	.word	0x2003e704
   b8cd4:	000b8bcd 	.word	0x000b8bcd

000b8cd8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8cd8:	4770      	bx	lr

000b8cda <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8cda:	7441      	strb	r1, [r0, #17]
}
   b8cdc:	4770      	bx	lr

000b8cde <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8cde:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8ce0:	7c00      	ldrb	r0, [r0, #16]
   b8ce2:	f7fd f935 	bl	b5f50 <hal_usart_available_data_for_write>
}
   b8ce6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8cea:	bd08      	pop	{r3, pc}

000b8cec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8cec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8cee:	7c00      	ldrb	r0, [r0, #16]
   b8cf0:	f7fd f906 	bl	b5f00 <hal_usart_available>
}
   b8cf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8cf8:	bd08      	pop	{r3, pc}

000b8cfa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8cfa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8cfc:	7c00      	ldrb	r0, [r0, #16]
   b8cfe:	f7fd f90f 	bl	b5f20 <hal_usart_peek>
}
   b8d02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d06:	bd08      	pop	{r3, pc}

000b8d08 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8d08:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8d0a:	7c00      	ldrb	r0, [r0, #16]
   b8d0c:	f7fd f900 	bl	b5f10 <hal_usart_read>
}
   b8d10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d14:	bd08      	pop	{r3, pc}

000b8d16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8d16:	7c00      	ldrb	r0, [r0, #16]
   b8d18:	f7fd b90a 	b.w	b5f30 <hal_usart_flush>

000b8d1c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d1e:	7c45      	ldrb	r5, [r0, #17]
{
   b8d20:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d22:	b12d      	cbz	r5, b8d30 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8d24:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8d26:	b003      	add	sp, #12
   b8d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8d2c:	f7fd b8e0 	b.w	b5ef0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d30:	7c00      	ldrb	r0, [r0, #16]
   b8d32:	9101      	str	r1, [sp, #4]
   b8d34:	f7fd f90c 	bl	b5f50 <hal_usart_available_data_for_write>
   b8d38:	2800      	cmp	r0, #0
   b8d3a:	9901      	ldr	r1, [sp, #4]
   b8d3c:	dcf2      	bgt.n	b8d24 <_ZN11USARTSerial5writeEh+0x8>
}
   b8d3e:	4628      	mov	r0, r5
   b8d40:	b003      	add	sp, #12
   b8d42:	bd30      	pop	{r4, r5, pc}

000b8d44 <_ZN11USARTSerialD0Ev>:
   b8d44:	b510      	push	{r4, lr}
   b8d46:	2114      	movs	r1, #20
   b8d48:	4604      	mov	r4, r0
   b8d4a:	f7fb f9a6 	bl	b409a <_ZdlPvj>
   b8d4e:	4620      	mov	r0, r4
   b8d50:	bd10      	pop	{r4, pc}
	...

000b8d54 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8d54:	b510      	push	{r4, lr}
   b8d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d5a:	4604      	mov	r4, r0
   b8d5c:	4608      	mov	r0, r1
   b8d5e:	4611      	mov	r1, r2
   b8d60:	2200      	movs	r2, #0
   b8d62:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8d66:	4b04      	ldr	r3, [pc, #16]	; (b8d78 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8d68:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8d6a:	2301      	movs	r3, #1
  _serial = serial;
   b8d6c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8d6e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8d70:	f7fd f8f6 	bl	b5f60 <hal_usart_init_ex>
}
   b8d74:	4620      	mov	r0, r4
   b8d76:	bd10      	pop	{r4, pc}
   b8d78:	000babf0 	.word	0x000babf0

000b8d7c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8d7c:	4770      	bx	lr

000b8d7e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d80:	4606      	mov	r6, r0
   b8d82:	4615      	mov	r5, r2
   b8d84:	460c      	mov	r4, r1
   b8d86:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8d88:	42bc      	cmp	r4, r7
   b8d8a:	d006      	beq.n	b8d9a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8d8c:	6833      	ldr	r3, [r6, #0]
   b8d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8d92:	689b      	ldr	r3, [r3, #8]
   b8d94:	4630      	mov	r0, r6
   b8d96:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8d98:	e7f6      	b.n	b8d88 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8d9a:	4628      	mov	r0, r5
   b8d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8d9e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8d9e:	7c00      	ldrb	r0, [r0, #16]
   b8da0:	2200      	movs	r2, #0
   b8da2:	f7fd b8fd 	b.w	b5fa0 <hal_i2c_write>

000b8da6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8da6:	7c00      	ldrb	r0, [r0, #16]
   b8da8:	2100      	movs	r1, #0
   b8daa:	f7fd b901 	b.w	b5fb0 <hal_i2c_available>

000b8dae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8dae:	7c00      	ldrb	r0, [r0, #16]
   b8db0:	2100      	movs	r1, #0
   b8db2:	f7fd b905 	b.w	b5fc0 <hal_i2c_read>

000b8db6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8db6:	7c00      	ldrb	r0, [r0, #16]
   b8db8:	2100      	movs	r1, #0
   b8dba:	f7fd b909 	b.w	b5fd0 <hal_i2c_peek>

000b8dbe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8dbe:	7c00      	ldrb	r0, [r0, #16]
   b8dc0:	2100      	movs	r1, #0
   b8dc2:	f7fd b90d 	b.w	b5fe0 <hal_i2c_flush>

000b8dc6 <_ZN7TwoWireD0Ev>:
   b8dc6:	b510      	push	{r4, lr}
   b8dc8:	2114      	movs	r1, #20
   b8dca:	4604      	mov	r4, r0
   b8dcc:	f7fb f965 	bl	b409a <_ZdlPvj>
   b8dd0:	4620      	mov	r0, r4
   b8dd2:	bd10      	pop	{r4, pc}

000b8dd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8dd4:	b538      	push	{r3, r4, r5, lr}
   b8dd6:	4604      	mov	r4, r0
   b8dd8:	4615      	mov	r5, r2
   b8dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8dde:	2200      	movs	r2, #0
   b8de0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8de4:	4b09      	ldr	r3, [pc, #36]	; (b8e0c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8de6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8de8:	4608      	mov	r0, r1
   b8dea:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b8dec:	4629      	mov	r1, r5
   b8dee:	f7fd f907 	bl	b6000 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8df2:	30bf      	adds	r0, #191	; 0xbf
   b8df4:	d108      	bne.n	b8e08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8df6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8df8:	07db      	lsls	r3, r3, #31
   b8dfa:	d505      	bpl.n	b8e08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b8dfc:	6868      	ldr	r0, [r5, #4]
   b8dfe:	f7fd fa73 	bl	b62e8 <free>
    free(conf.tx_buffer);
   b8e02:	68e8      	ldr	r0, [r5, #12]
   b8e04:	f7fd fa70 	bl	b62e8 <free>
}
   b8e08:	4620      	mov	r0, r4
   b8e0a:	bd38      	pop	{r3, r4, r5, pc}
   b8e0c:	000bac20 	.word	0x000bac20

000b8e10 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8e10:	2300      	movs	r3, #0
   b8e12:	7c00      	ldrb	r0, [r0, #16]
   b8e14:	461a      	mov	r2, r3
   b8e16:	4619      	mov	r1, r3
   b8e18:	f7fd b8aa 	b.w	b5f70 <hal_i2c_begin>

000b8e1c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8e1c:	7c00      	ldrb	r0, [r0, #16]
   b8e1e:	2200      	movs	r2, #0
   b8e20:	f7fd b8ae 	b.w	b5f80 <hal_i2c_begin_transmission>

000b8e24 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8e24:	b2c9      	uxtb	r1, r1
   b8e26:	f7ff bff9 	b.w	b8e1c <_ZN7TwoWire17beginTransmissionEh>

000b8e2a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8e2a:	7c00      	ldrb	r0, [r0, #16]
   b8e2c:	2200      	movs	r2, #0
   b8e2e:	f7fd b8af 	b.w	b5f90 <hal_i2c_end_transmission>

000b8e32 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8e32:	2101      	movs	r1, #1
   b8e34:	f7ff bff9 	b.w	b8e2a <_ZN7TwoWire15endTransmissionEh>

000b8e38 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8e38:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8e3a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8e3c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8e40:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8e42:	2201      	movs	r2, #1
   b8e44:	f04f 33ff 	mov.w	r3, #4294967295
   b8e48:	f10d 0107 	add.w	r1, sp, #7
   b8e4c:	47a0      	blx	r4
}
   b8e4e:	b002      	add	sp, #8
   b8e50:	bd10      	pop	{r4, pc}

000b8e52 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8e52:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8e54:	6803      	ldr	r3, [r0, #0]
   b8e56:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8e58:	f04f 33ff 	mov.w	r3, #4294967295
   b8e5c:	46a4      	mov	ip, r4
}
   b8e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8e62:	4760      	bx	ip

000b8e64 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8e64:	b513      	push	{r0, r1, r4, lr}
   b8e66:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8e68:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8e6a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8e6e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8e70:	f10d 0107 	add.w	r1, sp, #7
   b8e74:	2201      	movs	r2, #1
   b8e76:	47a0      	blx	r4
}
   b8e78:	b002      	add	sp, #8
   b8e7a:	bd10      	pop	{r4, pc}

000b8e7c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8e7c:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b8e7e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e80:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e84:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e88:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8e8a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e8c:	d008      	beq.n	b8ea0 <_ZN9TCPClient4readEv+0x24>
   b8e8e:	6963      	ldr	r3, [r4, #20]
   b8e90:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8e94:	1c51      	adds	r1, r2, #1
   b8e96:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8e9a:	4413      	add	r3, r2
   b8e9c:	7918      	ldrb	r0, [r3, #4]
}
   b8e9e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8ea0:	6803      	ldr	r3, [r0, #0]
   b8ea2:	691b      	ldr	r3, [r3, #16]
   b8ea4:	4798      	blx	r3
   b8ea6:	2800      	cmp	r0, #0
   b8ea8:	d1f1      	bne.n	b8e8e <_ZN9TCPClient4readEv+0x12>
   b8eaa:	f04f 30ff 	mov.w	r0, #4294967295
   b8eae:	e7f6      	b.n	b8e9e <_ZN9TCPClient4readEv+0x22>

000b8eb0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8eb0:	4770      	bx	lr

000b8eb2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8eb2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8eb4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8eb6:	43c0      	mvns	r0, r0
   b8eb8:	0fc0      	lsrs	r0, r0, #31
   b8eba:	4770      	bx	lr

000b8ebc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8ebc:	4770      	bx	lr
	...

000b8ec0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8ec0:	4b06      	ldr	r3, [pc, #24]	; (b8edc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8ec2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8ec4:	b510      	push	{r4, lr}
   b8ec6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8eca:	d005      	beq.n	b8ed8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8ecc:	4608      	mov	r0, r1
   b8ece:	f000 fc7f 	bl	b97d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8ed2:	2800      	cmp	r0, #0
   b8ed4:	bf08      	it	eq
   b8ed6:	2400      	moveq	r4, #0
      }
   b8ed8:	4620      	mov	r0, r4
   b8eda:	bd10      	pop	{r4, pc}
   b8edc:	000bab44 	.word	0x000bab44

000b8ee0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8ee0:	b510      	push	{r4, lr}
   b8ee2:	21ac      	movs	r1, #172	; 0xac
   b8ee4:	4604      	mov	r4, r0
   b8ee6:	f7fb f8d8 	bl	b409a <_ZdlPvj>
   b8eea:	4620      	mov	r0, r4
   b8eec:	bd10      	pop	{r4, pc}

000b8eee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8eee:	21ac      	movs	r1, #172	; 0xac
   b8ef0:	f7fb b8d3 	b.w	b409a <_ZdlPvj>

000b8ef4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8ef8:	f04f 0800 	mov.w	r8, #0
   b8efc:	b086      	sub	sp, #24
   b8efe:	461c      	mov	r4, r3
   b8f00:	f8c0 8004 	str.w	r8, [r0, #4]
   b8f04:	4605      	mov	r5, r0
   b8f06:	460e      	mov	r6, r1
   b8f08:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8f0a:	4641      	mov	r1, r8
   b8f0c:	2210      	movs	r2, #16
   b8f0e:	a802      	add	r0, sp, #8
   b8f10:	f000 fdc6 	bl	b9aa0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8f14:	1c63      	adds	r3, r4, #1
   b8f16:	d009      	beq.n	b8f2c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8f1c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8f20:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8f24:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8f28:	435c      	muls	r4, r3
   b8f2a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8f2c:	6968      	ldr	r0, [r5, #20]
   b8f2e:	2310      	movs	r3, #16
   b8f30:	9300      	str	r3, [sp, #0]
   b8f32:	6800      	ldr	r0, [r0, #0]
   b8f34:	ab02      	add	r3, sp, #8
   b8f36:	f241 0205 	movw	r2, #4101	; 0x1005
   b8f3a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8f3e:	f7fd f867 	bl	b6010 <sock_setsockopt>
    if (ret < 0) {
   b8f42:	2800      	cmp	r0, #0
   b8f44:	da07      	bge.n	b8f56 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8f46:	f7fd f9ef 	bl	b6328 <__errno>
   b8f4a:	6803      	ldr	r3, [r0, #0]
   b8f4c:	606b      	str	r3, [r5, #4]
        return 0;
   b8f4e:	2000      	movs	r0, #0
}
   b8f50:	b006      	add	sp, #24
   b8f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8f56:	6968      	ldr	r0, [r5, #20]
   b8f58:	2300      	movs	r3, #0
   b8f5a:	6800      	ldr	r0, [r0, #0]
   b8f5c:	463a      	mov	r2, r7
   b8f5e:	4631      	mov	r1, r6
   b8f60:	f7fd f876 	bl	b6050 <sock_send>
    if (ret < 0) {
   b8f64:	1e03      	subs	r3, r0, #0
   b8f66:	dbee      	blt.n	b8f46 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8f68:	4618      	mov	r0, r3
   b8f6a:	e7f1      	b.n	b8f50 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8f6c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8f6c:	b530      	push	{r4, r5, lr}
   b8f6e:	b087      	sub	sp, #28
   b8f70:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8f72:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8f74:	4668      	mov	r0, sp
   b8f76:	f7ff fe17 	bl	b8ba8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f7c:	3404      	adds	r4, #4
   b8f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f80:	682b      	ldr	r3, [r5, #0]
   b8f82:	7023      	strb	r3, [r4, #0]
    }
   b8f84:	b007      	add	sp, #28
   b8f86:	bd30      	pop	{r4, r5, pc}

000b8f88 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8f88:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8f8a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8f8c:	4b05      	ldr	r3, [pc, #20]	; (b8fa4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8f8e:	4604      	mov	r4, r0
   b8f90:	358c      	adds	r5, #140	; 0x8c
   b8f92:	f844 3b04 	str.w	r3, [r4], #4
   b8f96:	4606      	mov	r6, r0
   b8f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f9c:	682b      	ldr	r3, [r5, #0]
   b8f9e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8fa0:	4630      	mov	r0, r6
   b8fa2:	bd70      	pop	{r4, r5, r6, pc}
   b8fa4:	000babac 	.word	0x000babac

000b8fa8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8fac:	4698      	mov	r8, r3
    stop();
   b8fae:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8fb0:	b093      	sub	sp, #76	; 0x4c
   b8fb2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8fb4:	2400      	movs	r4, #0
    stop();
   b8fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8fb8:	4606      	mov	r6, r0
   b8fba:	4617      	mov	r7, r2
    stop();
   b8fbc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8fbe:	4628      	mov	r0, r5
   b8fc0:	466b      	mov	r3, sp
   b8fc2:	4622      	mov	r2, r4
   b8fc4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8fc6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8fc8:	f7fc fe98 	bl	b5cfc <netdb_getaddrinfo>
   b8fcc:	4605      	mov	r5, r0
   b8fce:	2800      	cmp	r0, #0
   b8fd0:	d163      	bne.n	b909a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8fd2:	9b00      	ldr	r3, [sp, #0]
   b8fd4:	2b00      	cmp	r3, #0
   b8fd6:	d04b      	beq.n	b9070 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8fd8:	695b      	ldr	r3, [r3, #20]
   b8fda:	2b00      	cmp	r3, #0
   b8fdc:	d048      	beq.n	b9070 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8fde:	a806      	add	r0, sp, #24
   b8fe0:	f7ff fd9e 	bl	b8b20 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8fe4:	9b00      	ldr	r3, [sp, #0]
   b8fe6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8fe8:	7863      	ldrb	r3, [r4, #1]
   b8fea:	2b02      	cmp	r3, #2
   b8fec:	d104      	bne.n	b8ff8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8fee:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8ff0:	a806      	add	r0, sp, #24
   b8ff2:	f7ff ffbb 	bl	b8f6c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8ff6:	e026      	b.n	b9046 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8ff8:	2b0a      	cmp	r3, #10
   b8ffa:	d124      	bne.n	b9046 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8ffc:	2211      	movs	r2, #17
   b8ffe:	4629      	mov	r1, r5
   b9000:	a801      	add	r0, sp, #4
   b9002:	f000 fd4d 	bl	b9aa0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9006:	68a3      	ldr	r3, [r4, #8]
   b9008:	2b00      	cmp	r3, #0
   b900a:	d038      	beq.n	b907e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b900c:	f104 0308 	add.w	r3, r4, #8
   b9010:	f10d 0c04 	add.w	ip, sp, #4
   b9014:	3418      	adds	r4, #24
   b9016:	6818      	ldr	r0, [r3, #0]
   b9018:	6859      	ldr	r1, [r3, #4]
   b901a:	4662      	mov	r2, ip
   b901c:	c203      	stmia	r2!, {r0, r1}
   b901e:	3308      	adds	r3, #8
   b9020:	42a3      	cmp	r3, r4
   b9022:	4694      	mov	ip, r2
   b9024:	d1f7      	bne.n	b9016 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9026:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9028:	a901      	add	r1, sp, #4
   b902a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b902c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9030:	f7ff fd84 	bl	b8b3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9034:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9038:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b903c:	ac07      	add	r4, sp, #28
   b903e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9040:	f8dc 3000 	ldr.w	r3, [ip]
   b9044:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9046:	a806      	add	r0, sp, #24
   b9048:	f7ff fd8a 	bl	b8b60 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b904c:	b180      	cbz	r0, b9070 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b904e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9050:	ad07      	add	r5, sp, #28
   b9052:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9056:	4b12      	ldr	r3, [pc, #72]	; (b90a0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9058:	930c      	str	r3, [sp, #48]	; 0x30
   b905a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b905c:	ac0d      	add	r4, sp, #52	; 0x34
   b905e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9060:	682b      	ldr	r3, [r5, #0]
   b9062:	7023      	strb	r3, [r4, #0]
   b9064:	463a      	mov	r2, r7
   b9066:	4643      	mov	r3, r8
   b9068:	a90c      	add	r1, sp, #48	; 0x30
   b906a:	4630      	mov	r0, r6
   b906c:	47c8      	blx	r9
   b906e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9070:	9800      	ldr	r0, [sp, #0]
   b9072:	f7fc fe3b 	bl	b5cec <netdb_freeaddrinfo>
}
   b9076:	4628      	mov	r0, r5
   b9078:	b013      	add	sp, #76	; 0x4c
   b907a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b907e:	68e3      	ldr	r3, [r4, #12]
   b9080:	2b00      	cmp	r3, #0
   b9082:	d1c3      	bne.n	b900c <_ZN9TCPClient7connectEPKctm+0x64>
   b9084:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9088:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b908c:	f7fc ff20 	bl	b5ed0 <inet_htonl>
   b9090:	4581      	cmp	r9, r0
   b9092:	d1bb      	bne.n	b900c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9094:	f104 0114 	add.w	r1, r4, #20
   b9098:	e7aa      	b.n	b8ff0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b909a:	4625      	mov	r5, r4
   b909c:	e7e8      	b.n	b9070 <_ZN9TCPClient7connectEPKctm+0xc8>
   b909e:	bf00      	nop
   b90a0:	000babac 	.word	0x000babac

000b90a4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b90a4:	b538      	push	{r3, r4, r5, lr}
   b90a6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b90a8:	681a      	ldr	r2, [r3, #0]
   b90aa:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b90ac:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b90ae:	da10      	bge.n	b90d2 <_ZN9TCPClient9connectedEv+0x2e>
   b90b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b90b8:	429a      	cmp	r2, r3
   b90ba:	d10a      	bne.n	b90d2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b90bc:	6803      	ldr	r3, [r0, #0]
   b90be:	691b      	ldr	r3, [r3, #16]
   b90c0:	4798      	blx	r3
        if (!rv) {
   b90c2:	4604      	mov	r4, r0
   b90c4:	b928      	cbnz	r0, b90d2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b90c6:	682b      	ldr	r3, [r5, #0]
   b90c8:	4628      	mov	r0, r5
   b90ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b90cc:	4798      	blx	r3
        rv = available();
   b90ce:	4620      	mov	r0, r4
}
   b90d0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b90d2:	2001      	movs	r0, #1
   b90d4:	e7fc      	b.n	b90d0 <_ZN9TCPClient9connectedEv+0x2c>

000b90d6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b90d6:	b510      	push	{r4, lr}
   b90d8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b90e2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b90e4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90e6:	d005      	beq.n	b90f4 <_ZN9TCPClient4peekEv+0x1e>
   b90e8:	6963      	ldr	r3, [r4, #20]
   b90ea:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b90ee:	4413      	add	r3, r2
   b90f0:	7918      	ldrb	r0, [r3, #4]
}
   b90f2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90f4:	6803      	ldr	r3, [r0, #0]
   b90f6:	691b      	ldr	r3, [r3, #16]
   b90f8:	4798      	blx	r3
   b90fa:	2800      	cmp	r0, #0
   b90fc:	d1f4      	bne.n	b90e8 <_ZN9TCPClient4peekEv+0x12>
   b90fe:	f04f 30ff 	mov.w	r0, #4294967295
   b9102:	e7f6      	b.n	b90f2 <_ZN9TCPClient4peekEv+0x1c>

000b9104 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9106:	6943      	ldr	r3, [r0, #20]
   b9108:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b910a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b910e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9112:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9114:	4605      	mov	r5, r0
   b9116:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9118:	d016      	beq.n	b9148 <_ZN9TCPClient4readEPhj+0x44>
   b911a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b911c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9120:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9124:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9126:	42bc      	cmp	r4, r7
   b9128:	bf28      	it	cs
   b912a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b912c:	3304      	adds	r3, #4
   b912e:	4622      	mov	r2, r4
   b9130:	4419      	add	r1, r3
   b9132:	4630      	mov	r0, r6
   b9134:	f000 fc8c 	bl	b9a50 <memcpy>
   b9138:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b913a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b913e:	4423      	add	r3, r4
   b9140:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9144:	4620      	mov	r0, r4
   b9146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9148:	6803      	ldr	r3, [r0, #0]
   b914a:	691b      	ldr	r3, [r3, #16]
   b914c:	4798      	blx	r3
   b914e:	2800      	cmp	r0, #0
   b9150:	d1e3      	bne.n	b911a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9152:	f04f 34ff 	mov.w	r4, #4294967295
   b9156:	e7f5      	b.n	b9144 <_ZN9TCPClient4readEPhj+0x40>

000b9158 <_ZN9TCPClient12flush_bufferEv>:
   b9158:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b915a:	2300      	movs	r3, #0
   b915c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9160:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9162:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9166:	4770      	bx	lr

000b9168 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b916c:	461f      	mov	r7, r3
    stop();
   b916e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9170:	460c      	mov	r4, r1
    stop();
   b9172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9174:	b08a      	sub	sp, #40	; 0x28
   b9176:	4605      	mov	r5, r0
   b9178:	4616      	mov	r6, r2
    stop();
   b917a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b917c:	7d23      	ldrb	r3, [r4, #20]
   b917e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9182:	2b04      	cmp	r3, #4
   b9184:	bf0c      	ite	eq
   b9186:	2002      	moveq	r0, #2
   b9188:	200a      	movne	r0, #10
   b918a:	2206      	movs	r2, #6
   b918c:	2101      	movs	r1, #1
   b918e:	f7fc ff67 	bl	b6060 <sock_socket>
   b9192:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9196:	696b      	ldr	r3, [r5, #20]
   b9198:	681b      	ldr	r3, [r3, #0]
   b919a:	2b00      	cmp	r3, #0
   b919c:	da08      	bge.n	b91b0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b919e:	682b      	ldr	r3, [r5, #0]
   b91a0:	4628      	mov	r0, r5
   b91a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b91a4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b91a6:	4798      	blx	r3
}
   b91a8:	4620      	mov	r0, r4
   b91aa:	b00a      	add	sp, #40	; 0x28
   b91ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b91b0:	4628      	mov	r0, r5
   b91b2:	f7ff ffd1 	bl	b9158 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b91b6:	b1b7      	cbz	r7, b91e6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b91b8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b91ba:	a903      	add	r1, sp, #12
   b91bc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b91be:	9303      	str	r3, [sp, #12]
   b91c0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b91c4:	f7fc fdc2 	bl	b5d4c <if_index_to_name>
   b91c8:	2800      	cmp	r0, #0
   b91ca:	d1e8      	bne.n	b919e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b91cc:	6968      	ldr	r0, [r5, #20]
   b91ce:	2306      	movs	r3, #6
   b91d0:	9300      	str	r3, [sp, #0]
   b91d2:	6800      	ldr	r0, [r0, #0]
   b91d4:	ab03      	add	r3, sp, #12
   b91d6:	f241 020b 	movw	r2, #4107	; 0x100b
   b91da:	f640 71ff 	movw	r1, #4095	; 0xfff
   b91de:	f7fc ff17 	bl	b6010 <sock_setsockopt>
   b91e2:	2800      	cmp	r0, #0
   b91e4:	d1db      	bne.n	b919e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b91e6:	221c      	movs	r2, #28
   b91e8:	2100      	movs	r1, #0
   b91ea:	a803      	add	r0, sp, #12
   b91ec:	f000 fc58 	bl	b9aa0 <memset>
    if (ip.version() == 4) {
   b91f0:	7d23      	ldrb	r3, [r4, #20]
   b91f2:	2b04      	cmp	r3, #4
   b91f4:	d11d      	bne.n	b9232 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b91f6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b91fa:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b91fc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9200:	f7fc fe6e 	bl	b5ee0 <inet_htons>
   b9204:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9208:	6860      	ldr	r0, [r4, #4]
   b920a:	f7fc fe61 	bl	b5ed0 <inet_htonl>
   b920e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9210:	696b      	ldr	r3, [r5, #20]
   b9212:	221c      	movs	r2, #28
   b9214:	6818      	ldr	r0, [r3, #0]
   b9216:	a903      	add	r1, sp, #12
   b9218:	f7fc ff0a 	bl	b6030 <sock_connect>
   b921c:	2800      	cmp	r0, #0
   b921e:	d1be      	bne.n	b919e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9220:	3404      	adds	r4, #4
   b9222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9224:	696d      	ldr	r5, [r5, #20]
   b9226:	358c      	adds	r5, #140	; 0x8c
   b9228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b922a:	6823      	ldr	r3, [r4, #0]
   b922c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b922e:	2401      	movs	r4, #1
   b9230:	e7ba      	b.n	b91a8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9232:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9236:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9238:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b923c:	f7fc fe50 	bl	b5ee0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9240:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9242:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9246:	1d23      	adds	r3, r4, #4
   b9248:	f104 0714 	add.w	r7, r4, #20
   b924c:	6818      	ldr	r0, [r3, #0]
   b924e:	6859      	ldr	r1, [r3, #4]
   b9250:	4632      	mov	r2, r6
   b9252:	c203      	stmia	r2!, {r0, r1}
   b9254:	3308      	adds	r3, #8
   b9256:	42bb      	cmp	r3, r7
   b9258:	4616      	mov	r6, r2
   b925a:	d1f7      	bne.n	b924c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b925c:	e7d8      	b.n	b9210 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9260 <_ZN9TCPClient9availableEv>:
{
   b9260:	b530      	push	{r4, r5, lr}
   b9262:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9264:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9268:	b08b      	sub	sp, #44	; 0x2c
   b926a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b926c:	b12b      	cbz	r3, b927a <_ZN9TCPClient9availableEv+0x1a>
   b926e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9272:	429a      	cmp	r2, r3
   b9274:	d101      	bne.n	b927a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9276:	f7ff ff6f 	bl	b9158 <_ZN9TCPClient12flush_bufferEv>
   b927a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b927c:	6808      	ldr	r0, [r1, #0]
   b927e:	2800      	cmp	r0, #0
   b9280:	db18      	blt.n	b92b4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9282:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9286:	2d7f      	cmp	r5, #127	; 0x7f
   b9288:	d814      	bhi.n	b92b4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b928a:	3104      	adds	r1, #4
   b928c:	2308      	movs	r3, #8
   b928e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9292:	4429      	add	r1, r5
   b9294:	f7fc fed4 	bl	b6040 <sock_recv>
            if (ret > 0) {
   b9298:	2800      	cmp	r0, #0
   b929a:	dd13      	ble.n	b92c4 <_ZN9TCPClient9availableEv+0x64>
   b929c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b929e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b92a2:	b90a      	cbnz	r2, b92a8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b92a4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b92a8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b92aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b92ae:	4410      	add	r0, r2
   b92b0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b92b4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b92b6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b92ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b92be:	1ac0      	subs	r0, r0, r3
   b92c0:	b00b      	add	sp, #44	; 0x2c
   b92c2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b92c4:	f7fd f830 	bl	b6328 <__errno>
   b92c8:	6803      	ldr	r3, [r0, #0]
   b92ca:	2b0b      	cmp	r3, #11
   b92cc:	d0f2      	beq.n	b92b4 <_ZN9TCPClient9availableEv+0x54>
   b92ce:	f7fd f82b 	bl	b6328 <__errno>
   b92d2:	6803      	ldr	r3, [r0, #0]
   b92d4:	2b0b      	cmp	r3, #11
   b92d6:	d0ed      	beq.n	b92b4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b92d8:	2320      	movs	r3, #32
   b92da:	2500      	movs	r5, #0
   b92dc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b92e0:	f7fd f822 	bl	b6328 <__errno>
   b92e4:	6803      	ldr	r3, [r0, #0]
   b92e6:	9301      	str	r3, [sp, #4]
   b92e8:	4b08      	ldr	r3, [pc, #32]	; (b930c <_ZN9TCPClient9availableEv+0xac>)
   b92ea:	4909      	ldr	r1, [pc, #36]	; (b9310 <_ZN9TCPClient9availableEv+0xb0>)
   b92ec:	9300      	str	r3, [sp, #0]
   b92ee:	aa02      	add	r2, sp, #8
   b92f0:	462b      	mov	r3, r5
   b92f2:	2032      	movs	r0, #50	; 0x32
   b92f4:	f7fc ff54 	bl	b61a0 <log_message>
                    sock_close(d_->sock);
   b92f8:	6963      	ldr	r3, [r4, #20]
   b92fa:	6818      	ldr	r0, [r3, #0]
   b92fc:	f7fc fe90 	bl	b6020 <sock_close>
   b9300:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9302:	f04f 32ff 	mov.w	r2, #4294967295
   b9306:	601a      	str	r2, [r3, #0]
   b9308:	e7d4      	b.n	b92b4 <_ZN9TCPClient9availableEv+0x54>
   b930a:	bf00      	nop
   b930c:	000bac47 	.word	0x000bac47
   b9310:	000bac40 	.word	0x000bac40

000b9314 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9314:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9316:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9318:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b931a:	6818      	ldr	r0, [r3, #0]
   b931c:	2800      	cmp	r0, #0
   b931e:	db01      	blt.n	b9324 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9320:	f7fc fe7e 	bl	b6020 <sock_close>
   b9324:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9326:	f04f 32ff 	mov.w	r2, #4294967295
   b932a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b932c:	6960      	ldr	r0, [r4, #20]
   b932e:	2211      	movs	r2, #17
   b9330:	2100      	movs	r1, #0
   b9332:	308c      	adds	r0, #140	; 0x8c
   b9334:	f000 fbb4 	bl	b9aa0 <memset>
    flush_buffer();
   b9338:	4620      	mov	r0, r4
}
   b933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b933e:	f7ff bf0b 	b.w	b9158 <_ZN9TCPClient12flush_bufferEv>

000b9342 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9342:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9344:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9346:	4604      	mov	r4, r0
          total(0) {
   b9348:	6001      	str	r1, [r0, #0]
   b934a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b934e:	3088      	adds	r0, #136	; 0x88
   b9350:	f7ff fbe6 	bl	b8b20 <_ZN9IPAddressC1Ev>
}
   b9354:	4620      	mov	r0, r4
   b9356:	bd10      	pop	{r4, pc}

000b9358 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9358:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b935a:	2300      	movs	r3, #0
   b935c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9360:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9364:	4a0e      	ldr	r2, [pc, #56]	; (b93a0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9366:	6103      	str	r3, [r0, #16]
   b9368:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b936a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b936c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b936e:	20ac      	movs	r0, #172	; 0xac
   b9370:	9101      	str	r1, [sp, #4]
   b9372:	f7fa fe8e 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b9376:	1e05      	subs	r5, r0, #0
   b9378:	f105 060c 	add.w	r6, r5, #12
   b937c:	d008      	beq.n	b9390 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b937e:	2301      	movs	r3, #1
   b9380:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9384:	4b07      	ldr	r3, [pc, #28]	; (b93a4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9386:	9901      	ldr	r1, [sp, #4]
   b9388:	602b      	str	r3, [r5, #0]
   b938a:	4630      	mov	r0, r6
   b938c:	f7ff ffd9 	bl	b9342 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9390:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9392:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9396:	f7ff fedf 	bl	b9158 <_ZN9TCPClient12flush_bufferEv>
}
   b939a:	b002      	add	sp, #8
   b939c:	bd70      	pop	{r4, r5, r6, pc}
   b939e:	bf00      	nop
   b93a0:	000bac7c 	.word	0x000bac7c
   b93a4:	000bac60 	.word	0x000bac60

000b93a8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b93a8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b93aa:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b93ae:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b93b0:	f7ff ffd2 	bl	b9358 <_ZN9TCPClientC1Ei>
}
   b93b4:	4620      	mov	r0, r4
   b93b6:	bd10      	pop	{r4, pc}

000b93b8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b93b8:	b510      	push	{r4, lr}
   b93ba:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b93bc:	6800      	ldr	r0, [r0, #0]
   b93be:	2800      	cmp	r0, #0
   b93c0:	db01      	blt.n	b93c6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b93c2:	f7fc fe2d 	bl	b6020 <sock_close>
    }
}
   b93c6:	4620      	mov	r0, r4
   b93c8:	bd10      	pop	{r4, pc}

000b93ca <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b93ca:	300c      	adds	r0, #12
   b93cc:	f7ff bff4 	b.w	b93b8 <_ZN9TCPClient4DataD1Ev>

000b93d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b93d0:	2200      	movs	r2, #0
   b93d2:	6840      	ldr	r0, [r0, #4]
   b93d4:	4611      	mov	r1, r2
   b93d6:	f7fc bf27 	b.w	b6228 <network_ready>

000b93da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b93da:	2200      	movs	r2, #0
   b93dc:	6840      	ldr	r0, [r0, #4]
   b93de:	4611      	mov	r1, r2
   b93e0:	f7fc bf42 	b.w	b6268 <network_listening>

000b93e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b93e4:	2200      	movs	r2, #0
   b93e6:	6840      	ldr	r0, [r0, #4]
   b93e8:	4611      	mov	r1, r2
   b93ea:	f7fc bf4d 	b.w	b6288 <network_get_listen_timeout>

000b93ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b93ee:	6840      	ldr	r0, [r0, #4]
   b93f0:	2200      	movs	r2, #0
   b93f2:	f7fc bf41 	b.w	b6278 <network_set_listen_timeout>

000b93f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b93f6:	6840      	ldr	r0, [r0, #4]
   b93f8:	2200      	movs	r2, #0
   b93fa:	f081 0101 	eor.w	r1, r1, #1
   b93fe:	f7fc bf2b 	b.w	b6258 <network_listen>

000b9402 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9402:	2300      	movs	r3, #0
   b9404:	6840      	ldr	r0, [r0, #4]
   b9406:	461a      	mov	r2, r3
   b9408:	4619      	mov	r1, r3
   b940a:	f7fc bf1d 	b.w	b6248 <network_off>

000b940e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b940e:	2300      	movs	r3, #0
   b9410:	6840      	ldr	r0, [r0, #4]
   b9412:	461a      	mov	r2, r3
   b9414:	4619      	mov	r1, r3
   b9416:	f7fc bf0f 	b.w	b6238 <network_on>

000b941a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b941a:	2200      	movs	r2, #0
   b941c:	6840      	ldr	r0, [r0, #4]
   b941e:	4611      	mov	r1, r2
   b9420:	f7fc bef2 	b.w	b6208 <network_connecting>

000b9424 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9424:	6840      	ldr	r0, [r0, #4]
   b9426:	2200      	movs	r2, #0
   b9428:	2102      	movs	r1, #2
   b942a:	f7fc bef5 	b.w	b6218 <network_disconnect>

000b942e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b942e:	2300      	movs	r3, #0
   b9430:	6840      	ldr	r0, [r0, #4]
   b9432:	461a      	mov	r2, r3
   b9434:	f7fc bee0 	b.w	b61f8 <network_connect>

000b9438 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9438:	4b02      	ldr	r3, [pc, #8]	; (b9444 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b943a:	2204      	movs	r2, #4
   b943c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b943e:	4a02      	ldr	r2, [pc, #8]	; (b9448 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9440:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9442:	4770      	bx	lr
   b9444:	2003e718 	.word	0x2003e718
   b9448:	000bacc8 	.word	0x000bacc8

000b944c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b944c:	2300      	movs	r3, #0
   b944e:	6840      	ldr	r0, [r0, #4]
   b9450:	461a      	mov	r2, r3
   b9452:	f7fc bed1 	b.w	b61f8 <network_connect>

000b9456 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9456:	6840      	ldr	r0, [r0, #4]
   b9458:	2200      	movs	r2, #0
   b945a:	2102      	movs	r1, #2
   b945c:	f7fc bedc 	b.w	b6218 <network_disconnect>

000b9460 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9460:	2200      	movs	r2, #0
   b9462:	6840      	ldr	r0, [r0, #4]
   b9464:	4611      	mov	r1, r2
   b9466:	f7fc becf 	b.w	b6208 <network_connecting>

000b946a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b946a:	2200      	movs	r2, #0
   b946c:	6840      	ldr	r0, [r0, #4]
   b946e:	4611      	mov	r1, r2
   b9470:	f7fc beda 	b.w	b6228 <network_ready>

000b9474 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9474:	2300      	movs	r3, #0
   b9476:	6840      	ldr	r0, [r0, #4]
   b9478:	461a      	mov	r2, r3
   b947a:	4619      	mov	r1, r3
   b947c:	f7fc bedc 	b.w	b6238 <network_on>

000b9480 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9480:	2300      	movs	r3, #0
   b9482:	6840      	ldr	r0, [r0, #4]
   b9484:	461a      	mov	r2, r3
   b9486:	4619      	mov	r1, r3
   b9488:	f7fc bede 	b.w	b6248 <network_off>

000b948c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b948c:	6840      	ldr	r0, [r0, #4]
   b948e:	2100      	movs	r1, #0
   b9490:	f7fc bf02 	b.w	b6298 <network_is_on>

000b9494 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9494:	6840      	ldr	r0, [r0, #4]
   b9496:	2100      	movs	r1, #0
   b9498:	f7fc bf06 	b.w	b62a8 <network_is_off>

000b949c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b949c:	6840      	ldr	r0, [r0, #4]
   b949e:	2200      	movs	r2, #0
   b94a0:	f081 0101 	eor.w	r1, r1, #1
   b94a4:	f7fc bed8 	b.w	b6258 <network_listen>

000b94a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b94a8:	6840      	ldr	r0, [r0, #4]
   b94aa:	2200      	movs	r2, #0
   b94ac:	f7fc bee4 	b.w	b6278 <network_set_listen_timeout>

000b94b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b94b0:	2200      	movs	r2, #0
   b94b2:	6840      	ldr	r0, [r0, #4]
   b94b4:	4611      	mov	r1, r2
   b94b6:	f7fc bee7 	b.w	b6288 <network_get_listen_timeout>

000b94ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b94ba:	2200      	movs	r2, #0
   b94bc:	6840      	ldr	r0, [r0, #4]
   b94be:	4611      	mov	r1, r2
   b94c0:	f7fc bed2 	b.w	b6268 <network_listening>

000b94c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b94c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b94c8:	b095      	sub	sp, #84	; 0x54
   b94ca:	4614      	mov	r4, r2
   b94cc:	460d      	mov	r5, r1
   b94ce:	4607      	mov	r7, r0
    IPAddress addr;
   b94d0:	f7ff fb26 	bl	b8b20 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b94d4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b94d6:	221c      	movs	r2, #28
   b94d8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b94da:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b94dc:	f000 fae0 	bl	b9aa0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b94e0:	2340      	movs	r3, #64	; 0x40
   b94e2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b94e4:	4620      	mov	r0, r4
   b94e6:	466b      	mov	r3, sp
   b94e8:	aa0c      	add	r2, sp, #48	; 0x30
   b94ea:	2100      	movs	r1, #0
   b94ec:	f7fc fc06 	bl	b5cfc <netdb_getaddrinfo>
    if (!r) {
   b94f0:	4604      	mov	r4, r0
   b94f2:	2800      	cmp	r0, #0
   b94f4:	d14b      	bne.n	b958e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b94f6:	4602      	mov	r2, r0
   b94f8:	2101      	movs	r1, #1
   b94fa:	6868      	ldr	r0, [r5, #4]
   b94fc:	f7fc fe94 	bl	b6228 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9500:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9502:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9504:	4622      	mov	r2, r4
   b9506:	6868      	ldr	r0, [r5, #4]
   b9508:	f7fc fe8e 	bl	b6228 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b950c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b950e:	4681      	mov	r9, r0
        bool ok = false;
   b9510:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9512:	2e00      	cmp	r6, #0
   b9514:	d03b      	beq.n	b958e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9516:	2900      	cmp	r1, #0
   b9518:	d139      	bne.n	b958e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b951a:	6873      	ldr	r3, [r6, #4]
   b951c:	2b02      	cmp	r3, #2
   b951e:	d003      	beq.n	b9528 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9520:	2b0a      	cmp	r3, #10
   b9522:	d011      	beq.n	b9548 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9524:	69f6      	ldr	r6, [r6, #28]
   b9526:	e7f4      	b.n	b9512 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9528:	f1b8 0f00 	cmp.w	r8, #0
   b952c:	d0fa      	beq.n	b9524 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b952e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9530:	a806      	add	r0, sp, #24
   b9532:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9534:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9536:	f7ff fb37 	bl	b8ba8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b953a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b953c:	1d3c      	adds	r4, r7, #4
   b953e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9540:	682b      	ldr	r3, [r5, #0]
   b9542:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9544:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9546:	e7ed      	b.n	b9524 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9548:	f1b9 0f00 	cmp.w	r9, #0
   b954c:	d0ea      	beq.n	b9524 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b954e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9550:	2210      	movs	r2, #16
   b9552:	a801      	add	r0, sp, #4
   b9554:	f000 faa4 	bl	b9aa0 <memset>
                    a.v = 6;
   b9558:	2306      	movs	r3, #6
   b955a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b955e:	ad01      	add	r5, sp, #4
   b9560:	f104 0308 	add.w	r3, r4, #8
   b9564:	3418      	adds	r4, #24
   b9566:	6818      	ldr	r0, [r3, #0]
   b9568:	6859      	ldr	r1, [r3, #4]
   b956a:	462a      	mov	r2, r5
   b956c:	c203      	stmia	r2!, {r0, r1}
   b956e:	3308      	adds	r3, #8
   b9570:	42a3      	cmp	r3, r4
   b9572:	4615      	mov	r5, r2
   b9574:	d1f7      	bne.n	b9566 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9576:	a901      	add	r1, sp, #4
   b9578:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b957a:	ad07      	add	r5, sp, #28
   b957c:	f7ff fade 	bl	b8b3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9582:	1d3c      	adds	r4, r7, #4
   b9584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9586:	682b      	ldr	r3, [r5, #0]
   b9588:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b958a:	4649      	mov	r1, r9
   b958c:	e7ca      	b.n	b9524 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b958e:	9800      	ldr	r0, [sp, #0]
   b9590:	f7fc fbac 	bl	b5cec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9594:	4638      	mov	r0, r7
   b9596:	b015      	add	sp, #84	; 0x54
   b9598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b959c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b959c:	4b02      	ldr	r3, [pc, #8]	; (b95a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b959e:	4a03      	ldr	r2, [pc, #12]	; (b95ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b95a0:	601a      	str	r2, [r3, #0]
   b95a2:	2200      	movs	r2, #0
   b95a4:	605a      	str	r2, [r3, #4]

} // spark
   b95a6:	4770      	bx	lr
   b95a8:	2003e720 	.word	0x2003e720
   b95ac:	000bad04 	.word	0x000bad04

000b95b0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b95b0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b95b2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b95b4:	d902      	bls.n	b95bc <pinAvailable+0xc>
    return false;
   b95b6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b95b8:	b002      	add	sp, #8
   b95ba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b95bc:	f1a0 030b 	sub.w	r3, r0, #11
   b95c0:	2b02      	cmp	r3, #2
   b95c2:	d81a      	bhi.n	b95fa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b95c4:	4c17      	ldr	r4, [pc, #92]	; (b9624 <pinAvailable+0x74>)
   b95c6:	7821      	ldrb	r1, [r4, #0]
   b95c8:	f3bf 8f5b 	dmb	ish
   b95cc:	f011 0101 	ands.w	r1, r1, #1
   b95d0:	d10b      	bne.n	b95ea <pinAvailable+0x3a>
   b95d2:	4620      	mov	r0, r4
   b95d4:	9101      	str	r1, [sp, #4]
   b95d6:	f7fa fd6f 	bl	b40b8 <__cxa_guard_acquire>
   b95da:	9901      	ldr	r1, [sp, #4]
   b95dc:	b128      	cbz	r0, b95ea <pinAvailable+0x3a>
   b95de:	4812      	ldr	r0, [pc, #72]	; (b9628 <pinAvailable+0x78>)
   b95e0:	f7fc fefe 	bl	b63e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b95e4:	4620      	mov	r0, r4
   b95e6:	f7fa fd6c 	bl	b40c2 <__cxa_guard_release>
   b95ea:	4b0f      	ldr	r3, [pc, #60]	; (b9628 <pinAvailable+0x78>)
   b95ec:	7818      	ldrb	r0, [r3, #0]
   b95ee:	f7fc fd6f 	bl	b60d0 <hal_spi_is_enabled>
   b95f2:	2800      	cmp	r0, #0
   b95f4:	d1df      	bne.n	b95b6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b95f6:	2001      	movs	r0, #1
   b95f8:	e7de      	b.n	b95b8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b95fa:	2801      	cmp	r0, #1
   b95fc:	d809      	bhi.n	b9612 <pinAvailable+0x62>
   b95fe:	f000 f8bd 	bl	b977c <_Z19__fetch_global_Wirev>
   b9602:	2100      	movs	r1, #0
   b9604:	7c00      	ldrb	r0, [r0, #16]
   b9606:	f7fc fcf3 	bl	b5ff0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b960a:	f080 0001 	eor.w	r0, r0, #1
   b960e:	b2c0      	uxtb	r0, r0
   b9610:	e7d2      	b.n	b95b8 <pinAvailable+0x8>
   b9612:	3809      	subs	r0, #9
   b9614:	2801      	cmp	r0, #1
   b9616:	d8ee      	bhi.n	b95f6 <pinAvailable+0x46>
   b9618:	f000 f870 	bl	b96fc <_Z22__fetch_global_Serial1v>
   b961c:	7c00      	ldrb	r0, [r0, #16]
   b961e:	f7fc fc8f 	bl	b5f40 <hal_usart_is_enabled>
   b9622:	e7f2      	b.n	b960a <pinAvailable+0x5a>
   b9624:	2003e6ac 	.word	0x2003e6ac
   b9628:	2003e6b0 	.word	0x2003e6b0

000b962c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b962c:	2823      	cmp	r0, #35	; 0x23
{
   b962e:	b538      	push	{r3, r4, r5, lr}
   b9630:	4604      	mov	r4, r0
   b9632:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9634:	d80a      	bhi.n	b964c <pinMode+0x20>
   b9636:	29ff      	cmp	r1, #255	; 0xff
   b9638:	d008      	beq.n	b964c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b963a:	f7ff ffb9 	bl	b95b0 <pinAvailable>
   b963e:	b128      	cbz	r0, b964c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9640:	4629      	mov	r1, r5
   b9642:	4620      	mov	r0, r4
}
   b9644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9648:	f7fc bb68 	b.w	b5d1c <HAL_Pin_Mode>
}
   b964c:	bd38      	pop	{r3, r4, r5, pc}

000b964e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b964e:	b538      	push	{r3, r4, r5, lr}
   b9650:	4604      	mov	r4, r0
   b9652:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9654:	f7fc fb6a 	bl	b5d2c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9658:	28ff      	cmp	r0, #255	; 0xff
   b965a:	d010      	beq.n	b967e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b965c:	2806      	cmp	r0, #6
   b965e:	d804      	bhi.n	b966a <digitalWrite+0x1c>
   b9660:	234d      	movs	r3, #77	; 0x4d
   b9662:	fa23 f000 	lsr.w	r0, r3, r0
   b9666:	07c3      	lsls	r3, r0, #31
   b9668:	d409      	bmi.n	b967e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b966a:	4620      	mov	r0, r4
   b966c:	f7ff ffa0 	bl	b95b0 <pinAvailable>
   b9670:	b128      	cbz	r0, b967e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9672:	4629      	mov	r1, r5
   b9674:	4620      	mov	r0, r4
}
   b9676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b967a:	f7fc bb5f 	b.w	b5d3c <HAL_GPIO_Write>
}
   b967e:	bd38      	pop	{r3, r4, r5, pc}

000b9680 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b9680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9684:	4690      	mov	r8, r2
   b9686:	461f      	mov	r7, r3
   b9688:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b968a:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b968c:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b968e:	f1c4 0107 	rsb	r1, r4, #7
   b9692:	f1b8 0f00 	cmp.w	r8, #0
   b9696:	d112      	bne.n	b96be <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b9698:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b969c:	f001 0101 	and.w	r1, r1, #1
   b96a0:	4630      	mov	r0, r6
   b96a2:	f7ff ffd4 	bl	b964e <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b96a6:	2101      	movs	r1, #1
   b96a8:	4628      	mov	r0, r5
   b96aa:	f7ff ffd0 	bl	b964e <digitalWrite>
    digitalWrite(clockPin, LOW);
   b96ae:	2100      	movs	r1, #0
   b96b0:	4628      	mov	r0, r5
   b96b2:	f7ff ffcc 	bl	b964e <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b96b6:	3c01      	subs	r4, #1
   b96b8:	d2e9      	bcs.n	b968e <shiftOut+0xe>
  }
}
   b96ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b96be:	fa47 f104 	asr.w	r1, r7, r4
   b96c2:	e7eb      	b.n	b969c <shiftOut+0x1c>

000b96c4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b96c4:	4770      	bx	lr
	...

000b96c8 <_Z20acquireSerial1Bufferv>:
{
   b96c8:	b538      	push	{r3, r4, r5, lr}
   b96ca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b96cc:	2514      	movs	r5, #20
   b96ce:	462a      	mov	r2, r5
   b96d0:	2100      	movs	r1, #0
   b96d2:	f000 f9e5 	bl	b9aa0 <memset>
   b96d6:	8025      	strh	r5, [r4, #0]
   b96d8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96da:	4907      	ldr	r1, [pc, #28]	; (b96f8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b96dc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96de:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b96e0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96e2:	f000 f86f 	bl	b97c4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96e6:	4904      	ldr	r1, [pc, #16]	; (b96f8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b96e8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96ea:	4628      	mov	r0, r5
   b96ec:	f000 f86a 	bl	b97c4 <_ZnajRKSt9nothrow_t>
    };
   b96f0:	60e0      	str	r0, [r4, #12]
}
   b96f2:	4620      	mov	r0, r4
   b96f4:	bd38      	pop	{r3, r4, r5, pc}
   b96f6:	bf00      	nop
   b96f8:	000bad38 	.word	0x000bad38

000b96fc <_Z22__fetch_global_Serial1v>:
{
   b96fc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b96fe:	4d0e      	ldr	r5, [pc, #56]	; (b9738 <_Z22__fetch_global_Serial1v+0x3c>)
   b9700:	7829      	ldrb	r1, [r5, #0]
   b9702:	f3bf 8f5b 	dmb	ish
   b9706:	f011 0401 	ands.w	r4, r1, #1
{
   b970a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b970c:	d111      	bne.n	b9732 <_Z22__fetch_global_Serial1v+0x36>
   b970e:	4628      	mov	r0, r5
   b9710:	f7fa fcd2 	bl	b40b8 <__cxa_guard_acquire>
   b9714:	b168      	cbz	r0, b9732 <_Z22__fetch_global_Serial1v+0x36>
   b9716:	a801      	add	r0, sp, #4
   b9718:	f7ff ffd6 	bl	b96c8 <_Z20acquireSerial1Bufferv>
   b971c:	aa01      	add	r2, sp, #4
   b971e:	4621      	mov	r1, r4
   b9720:	4806      	ldr	r0, [pc, #24]	; (b973c <_Z22__fetch_global_Serial1v+0x40>)
   b9722:	f7ff fb17 	bl	b8d54 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9726:	4628      	mov	r0, r5
   b9728:	f7fa fccb 	bl	b40c2 <__cxa_guard_release>
   b972c:	4804      	ldr	r0, [pc, #16]	; (b9740 <_Z22__fetch_global_Serial1v+0x44>)
   b972e:	f000 f961 	bl	b99f4 <atexit>
    return serial1;
}
   b9732:	4802      	ldr	r0, [pc, #8]	; (b973c <_Z22__fetch_global_Serial1v+0x40>)
   b9734:	b007      	add	sp, #28
   b9736:	bd30      	pop	{r4, r5, pc}
   b9738:	2003e728 	.word	0x2003e728
   b973c:	2003e72c 	.word	0x2003e72c
   b9740:	000b96c5 	.word	0x000b96c5

000b9744 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9744:	4770      	bx	lr
	...

000b9748 <_Z17acquireWireBufferv>:
{
   b9748:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b974a:	4b0a      	ldr	r3, [pc, #40]	; (b9774 <_Z17acquireWireBufferv+0x2c>)
   b974c:	6003      	str	r3, [r0, #0]
   b974e:	2301      	movs	r3, #1
{
   b9750:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9752:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9754:	4908      	ldr	r1, [pc, #32]	; (b9778 <_Z17acquireWireBufferv+0x30>)
   b9756:	2020      	movs	r0, #32
   b9758:	f000 f834 	bl	b97c4 <_ZnajRKSt9nothrow_t>
	};
   b975c:	2520      	movs	r5, #32
   b975e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9760:	4905      	ldr	r1, [pc, #20]	; (b9778 <_Z17acquireWireBufferv+0x30>)
	};
   b9762:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9764:	4628      	mov	r0, r5
   b9766:	f000 f82d 	bl	b97c4 <_ZnajRKSt9nothrow_t>
	};
   b976a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b976e:	4620      	mov	r0, r4
   b9770:	bd38      	pop	{r3, r4, r5, pc}
   b9772:	bf00      	nop
   b9774:	00010018 	.word	0x00010018
   b9778:	000bad38 	.word	0x000bad38

000b977c <_Z19__fetch_global_Wirev>:
{
   b977c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b977e:	4d0e      	ldr	r5, [pc, #56]	; (b97b8 <_Z19__fetch_global_Wirev+0x3c>)
   b9780:	7829      	ldrb	r1, [r5, #0]
   b9782:	f3bf 8f5b 	dmb	ish
   b9786:	f011 0401 	ands.w	r4, r1, #1
{
   b978a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b978c:	d111      	bne.n	b97b2 <_Z19__fetch_global_Wirev+0x36>
   b978e:	4628      	mov	r0, r5
   b9790:	f7fa fc92 	bl	b40b8 <__cxa_guard_acquire>
   b9794:	b168      	cbz	r0, b97b2 <_Z19__fetch_global_Wirev+0x36>
   b9796:	4668      	mov	r0, sp
   b9798:	f7ff ffd6 	bl	b9748 <_Z17acquireWireBufferv>
   b979c:	466a      	mov	r2, sp
   b979e:	4621      	mov	r1, r4
   b97a0:	4806      	ldr	r0, [pc, #24]	; (b97bc <_Z19__fetch_global_Wirev+0x40>)
   b97a2:	f7ff fb17 	bl	b8dd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b97a6:	4628      	mov	r0, r5
   b97a8:	f7fa fc8b 	bl	b40c2 <__cxa_guard_release>
   b97ac:	4804      	ldr	r0, [pc, #16]	; (b97c0 <_Z19__fetch_global_Wirev+0x44>)
   b97ae:	f000 f921 	bl	b99f4 <atexit>
	return wire;
}
   b97b2:	4802      	ldr	r0, [pc, #8]	; (b97bc <_Z19__fetch_global_Wirev+0x40>)
   b97b4:	b007      	add	sp, #28
   b97b6:	bd30      	pop	{r4, r5, pc}
   b97b8:	2003e744 	.word	0x2003e744
   b97bc:	2003e748 	.word	0x2003e748
   b97c0:	000b9745 	.word	0x000b9745

000b97c4 <_ZnajRKSt9nothrow_t>:
   b97c4:	f7fa bc67 	b.w	b4096 <_Znaj>

000b97c8 <_ZSt25__throw_bad_function_callv>:
   b97c8:	b508      	push	{r3, lr}
   b97ca:	f7fc fda5 	bl	b6318 <abort>
	...

000b97d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b97d0:	4901      	ldr	r1, [pc, #4]	; (b97d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b97d2:	f000 b8f9 	b.w	b99c8 <_ZNKSt9type_infoeqERKS_>
   b97d6:	bf00      	nop
   b97d8:	000bad54 	.word	0x000bad54

000b97dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b97dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b97de:	2400      	movs	r4, #0
   b97e0:	2310      	movs	r3, #16
   b97e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b97e6:	6803      	ldr	r3, [r0, #0]
   b97e8:	4615      	mov	r5, r2
   b97ea:	699e      	ldr	r6, [r3, #24]
   b97ec:	6812      	ldr	r2, [r2, #0]
   b97ee:	466b      	mov	r3, sp
   b97f0:	e9cd 4400 	strd	r4, r4, [sp]
   b97f4:	47b0      	blx	r6
   b97f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b97fa:	f003 0306 	and.w	r3, r3, #6
   b97fe:	2b06      	cmp	r3, #6
   b9800:	bf03      	ittte	eq
   b9802:	9b00      	ldreq	r3, [sp, #0]
   b9804:	602b      	streq	r3, [r5, #0]
   b9806:	2001      	moveq	r0, #1
   b9808:	4620      	movne	r0, r4
   b980a:	b004      	add	sp, #16
   b980c:	bd70      	pop	{r4, r5, r6, pc}

000b980e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b980e:	9800      	ldr	r0, [sp, #0]
   b9810:	4290      	cmp	r0, r2
   b9812:	bf14      	ite	ne
   b9814:	2001      	movne	r0, #1
   b9816:	2006      	moveq	r0, #6
   b9818:	4770      	bx	lr
	...

000b981c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b981c:	b510      	push	{r4, lr}
   b981e:	4b03      	ldr	r3, [pc, #12]	; (b982c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9820:	6003      	str	r3, [r0, #0]
   b9822:	4604      	mov	r4, r0
   b9824:	f000 f8cd 	bl	b99c2 <_ZNSt9type_infoD1Ev>
   b9828:	4620      	mov	r0, r4
   b982a:	bd10      	pop	{r4, pc}
   b982c:	000bad94 	.word	0x000bad94

000b9830 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9830:	b510      	push	{r4, lr}
   b9832:	4604      	mov	r4, r0
   b9834:	f7ff fff2 	bl	b981c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9838:	4620      	mov	r0, r4
   b983a:	2108      	movs	r1, #8
   b983c:	f7fa fc2d 	bl	b409a <_ZdlPvj>
   b9840:	4620      	mov	r0, r4
   b9842:	bd10      	pop	{r4, pc}

000b9844 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9848:	461f      	mov	r7, r3
   b984a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b984e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9852:	4598      	cmp	r8, r3
   b9854:	4606      	mov	r6, r0
   b9856:	4615      	mov	r5, r2
   b9858:	d107      	bne.n	b986a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b985a:	9907      	ldr	r1, [sp, #28]
   b985c:	f000 f8b4 	bl	b99c8 <_ZNKSt9type_infoeqERKS_>
   b9860:	b118      	cbz	r0, b986a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9862:	7165      	strb	r5, [r4, #5]
   b9864:	2000      	movs	r0, #0
   b9866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b986a:	4639      	mov	r1, r7
   b986c:	4630      	mov	r0, r6
   b986e:	f000 f8ab 	bl	b99c8 <_ZNKSt9type_infoeqERKS_>
   b9872:	2800      	cmp	r0, #0
   b9874:	d0f6      	beq.n	b9864 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9876:	2301      	movs	r3, #1
   b9878:	f8c4 8000 	str.w	r8, [r4]
   b987c:	7125      	strb	r5, [r4, #4]
   b987e:	71a3      	strb	r3, [r4, #6]
   b9880:	e7f0      	b.n	b9864 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9882 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9882:	b538      	push	{r3, r4, r5, lr}
   b9884:	4615      	mov	r5, r2
   b9886:	461c      	mov	r4, r3
   b9888:	f000 f89e 	bl	b99c8 <_ZNKSt9type_infoeqERKS_>
   b988c:	b120      	cbz	r0, b9898 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b988e:	2308      	movs	r3, #8
   b9890:	60e3      	str	r3, [r4, #12]
   b9892:	2306      	movs	r3, #6
   b9894:	6025      	str	r5, [r4, #0]
   b9896:	7123      	strb	r3, [r4, #4]
   b9898:	bd38      	pop	{r3, r4, r5, pc}

000b989a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b989a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b989c:	4605      	mov	r5, r0
   b989e:	460c      	mov	r4, r1
   b98a0:	9201      	str	r2, [sp, #4]
   b98a2:	461e      	mov	r6, r3
   b98a4:	f000 f890 	bl	b99c8 <_ZNKSt9type_infoeqERKS_>
   b98a8:	b950      	cbnz	r0, b98c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b98aa:	2e03      	cmp	r6, #3
   b98ac:	d808      	bhi.n	b98c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b98ae:	6823      	ldr	r3, [r4, #0]
   b98b0:	9a01      	ldr	r2, [sp, #4]
   b98b2:	695b      	ldr	r3, [r3, #20]
   b98b4:	4629      	mov	r1, r5
   b98b6:	4620      	mov	r0, r4
   b98b8:	b002      	add	sp, #8
   b98ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b98be:	4718      	bx	r3
   b98c0:	b002      	add	sp, #8
   b98c2:	bd70      	pop	{r4, r5, r6, pc}

000b98c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b98c4:	b510      	push	{r4, lr}
   b98c6:	4b03      	ldr	r3, [pc, #12]	; (b98d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b98c8:	6003      	str	r3, [r0, #0]
   b98ca:	4604      	mov	r4, r0
   b98cc:	f7ff ffa6 	bl	b981c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b98d0:	4620      	mov	r0, r4
   b98d2:	bd10      	pop	{r4, pc}
   b98d4:	000badf4 	.word	0x000badf4

000b98d8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b98d8:	b510      	push	{r4, lr}
   b98da:	4604      	mov	r4, r0
   b98dc:	f7ff fff2 	bl	b98c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b98e0:	4620      	mov	r0, r4
   b98e2:	210c      	movs	r1, #12
   b98e4:	f7fa fbd9 	bl	b409a <_ZdlPvj>
   b98e8:	4620      	mov	r0, r4
   b98ea:	bd10      	pop	{r4, pc}

000b98ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b98ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b98ee:	9f08      	ldr	r7, [sp, #32]
   b98f0:	4297      	cmp	r7, r2
   b98f2:	4605      	mov	r5, r0
   b98f4:	460e      	mov	r6, r1
   b98f6:	4614      	mov	r4, r2
   b98f8:	d00a      	beq.n	b9910 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b98fa:	68a8      	ldr	r0, [r5, #8]
   b98fc:	6802      	ldr	r2, [r0, #0]
   b98fe:	9708      	str	r7, [sp, #32]
   b9900:	6a15      	ldr	r5, [r2, #32]
   b9902:	4631      	mov	r1, r6
   b9904:	4622      	mov	r2, r4
   b9906:	46ac      	mov	ip, r5
   b9908:	b003      	add	sp, #12
   b990a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b990e:	4760      	bx	ip
   b9910:	4619      	mov	r1, r3
   b9912:	9301      	str	r3, [sp, #4]
   b9914:	f000 f858 	bl	b99c8 <_ZNKSt9type_infoeqERKS_>
   b9918:	9b01      	ldr	r3, [sp, #4]
   b991a:	2800      	cmp	r0, #0
   b991c:	d0ed      	beq.n	b98fa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b991e:	2006      	movs	r0, #6
   b9920:	b003      	add	sp, #12
   b9922:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9924 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9924:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9928:	460d      	mov	r5, r1
   b992a:	4619      	mov	r1, r3
   b992c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9930:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9934:	4681      	mov	r9, r0
   b9936:	4617      	mov	r7, r2
   b9938:	4698      	mov	r8, r3
   b993a:	f000 f845 	bl	b99c8 <_ZNKSt9type_infoeqERKS_>
   b993e:	b190      	cbz	r0, b9966 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9940:	2d00      	cmp	r5, #0
   b9942:	6034      	str	r4, [r6, #0]
   b9944:	7137      	strb	r7, [r6, #4]
   b9946:	db09      	blt.n	b995c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9948:	1961      	adds	r1, r4, r5
   b994a:	458a      	cmp	sl, r1
   b994c:	bf0c      	ite	eq
   b994e:	2106      	moveq	r1, #6
   b9950:	2101      	movne	r1, #1
   b9952:	71b1      	strb	r1, [r6, #6]
   b9954:	2000      	movs	r0, #0
   b9956:	b001      	add	sp, #4
   b9958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b995c:	3502      	adds	r5, #2
   b995e:	d1f9      	bne.n	b9954 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9960:	2301      	movs	r3, #1
   b9962:	71b3      	strb	r3, [r6, #6]
   b9964:	e7f6      	b.n	b9954 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9966:	4554      	cmp	r4, sl
   b9968:	d106      	bne.n	b9978 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b996a:	4659      	mov	r1, fp
   b996c:	4648      	mov	r0, r9
   b996e:	f000 f82b 	bl	b99c8 <_ZNKSt9type_infoeqERKS_>
   b9972:	b108      	cbz	r0, b9978 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9974:	7177      	strb	r7, [r6, #5]
   b9976:	e7ed      	b.n	b9954 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9978:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b997c:	6803      	ldr	r3, [r0, #0]
   b997e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9982:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9986:	69dc      	ldr	r4, [r3, #28]
   b9988:	463a      	mov	r2, r7
   b998a:	4643      	mov	r3, r8
   b998c:	4629      	mov	r1, r5
   b998e:	46a4      	mov	ip, r4
   b9990:	b001      	add	sp, #4
   b9992:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9996:	4760      	bx	ip

000b9998 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b999c:	4607      	mov	r7, r0
   b999e:	460c      	mov	r4, r1
   b99a0:	4615      	mov	r5, r2
   b99a2:	461e      	mov	r6, r3
   b99a4:	f7ff ff6d 	bl	b9882 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b99a8:	b948      	cbnz	r0, b99be <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b99aa:	68b8      	ldr	r0, [r7, #8]
   b99ac:	6803      	ldr	r3, [r0, #0]
   b99ae:	699f      	ldr	r7, [r3, #24]
   b99b0:	462a      	mov	r2, r5
   b99b2:	4633      	mov	r3, r6
   b99b4:	4621      	mov	r1, r4
   b99b6:	46bc      	mov	ip, r7
   b99b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b99bc:	4760      	bx	ip
   b99be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b99c2 <_ZNSt9type_infoD1Ev>:
   b99c2:	4770      	bx	lr

000b99c4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b99c4:	2000      	movs	r0, #0
   b99c6:	4770      	bx	lr

000b99c8 <_ZNKSt9type_infoeqERKS_>:
   b99c8:	4281      	cmp	r1, r0
   b99ca:	b508      	push	{r3, lr}
   b99cc:	d00e      	beq.n	b99ec <_ZNKSt9type_infoeqERKS_+0x24>
   b99ce:	6840      	ldr	r0, [r0, #4]
   b99d0:	7803      	ldrb	r3, [r0, #0]
   b99d2:	2b2a      	cmp	r3, #42	; 0x2a
   b99d4:	d00c      	beq.n	b99f0 <_ZNKSt9type_infoeqERKS_+0x28>
   b99d6:	6849      	ldr	r1, [r1, #4]
   b99d8:	780b      	ldrb	r3, [r1, #0]
   b99da:	2b2a      	cmp	r3, #42	; 0x2a
   b99dc:	bf08      	it	eq
   b99de:	3101      	addeq	r1, #1
   b99e0:	f000 f894 	bl	b9b0c <strcmp>
   b99e4:	fab0 f080 	clz	r0, r0
   b99e8:	0940      	lsrs	r0, r0, #5
   b99ea:	bd08      	pop	{r3, pc}
   b99ec:	2001      	movs	r0, #1
   b99ee:	e7fc      	b.n	b99ea <_ZNKSt9type_infoeqERKS_+0x22>
   b99f0:	2000      	movs	r0, #0
   b99f2:	e7fa      	b.n	b99ea <_ZNKSt9type_infoeqERKS_+0x22>

000b99f4 <atexit>:
   b99f4:	2300      	movs	r3, #0
   b99f6:	4601      	mov	r1, r0
   b99f8:	461a      	mov	r2, r3
   b99fa:	4618      	mov	r0, r3
   b99fc:	f000 b94c 	b.w	b9c98 <__register_exitproc>

000b9a00 <atoi>:
   b9a00:	220a      	movs	r2, #10
   b9a02:	2100      	movs	r1, #0
   b9a04:	f000 b93e 	b.w	b9c84 <strtol>

000b9a08 <ldiv>:
   b9a08:	2900      	cmp	r1, #0
   b9a0a:	b510      	push	{r4, lr}
   b9a0c:	fb91 f4f2 	sdiv	r4, r1, r2
   b9a10:	fb02 1314 	mls	r3, r2, r4, r1
   b9a14:	db06      	blt.n	b9a24 <ldiv+0x1c>
   b9a16:	2b00      	cmp	r3, #0
   b9a18:	da01      	bge.n	b9a1e <ldiv+0x16>
   b9a1a:	3401      	adds	r4, #1
   b9a1c:	1a9b      	subs	r3, r3, r2
   b9a1e:	e9c0 4300 	strd	r4, r3, [r0]
   b9a22:	bd10      	pop	{r4, pc}
   b9a24:	2b00      	cmp	r3, #0
   b9a26:	bfc4      	itt	gt
   b9a28:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b9a2c:	189b      	addgt	r3, r3, r2
   b9a2e:	e7f6      	b.n	b9a1e <ldiv+0x16>

000b9a30 <memcmp>:
   b9a30:	b510      	push	{r4, lr}
   b9a32:	3901      	subs	r1, #1
   b9a34:	4402      	add	r2, r0
   b9a36:	4290      	cmp	r0, r2
   b9a38:	d101      	bne.n	b9a3e <memcmp+0xe>
   b9a3a:	2000      	movs	r0, #0
   b9a3c:	e005      	b.n	b9a4a <memcmp+0x1a>
   b9a3e:	7803      	ldrb	r3, [r0, #0]
   b9a40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9a44:	42a3      	cmp	r3, r4
   b9a46:	d001      	beq.n	b9a4c <memcmp+0x1c>
   b9a48:	1b18      	subs	r0, r3, r4
   b9a4a:	bd10      	pop	{r4, pc}
   b9a4c:	3001      	adds	r0, #1
   b9a4e:	e7f2      	b.n	b9a36 <memcmp+0x6>

000b9a50 <memcpy>:
   b9a50:	440a      	add	r2, r1
   b9a52:	4291      	cmp	r1, r2
   b9a54:	f100 33ff 	add.w	r3, r0, #4294967295
   b9a58:	d100      	bne.n	b9a5c <memcpy+0xc>
   b9a5a:	4770      	bx	lr
   b9a5c:	b510      	push	{r4, lr}
   b9a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9a62:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9a66:	4291      	cmp	r1, r2
   b9a68:	d1f9      	bne.n	b9a5e <memcpy+0xe>
   b9a6a:	bd10      	pop	{r4, pc}

000b9a6c <memmove>:
   b9a6c:	4288      	cmp	r0, r1
   b9a6e:	b510      	push	{r4, lr}
   b9a70:	eb01 0402 	add.w	r4, r1, r2
   b9a74:	d902      	bls.n	b9a7c <memmove+0x10>
   b9a76:	4284      	cmp	r4, r0
   b9a78:	4623      	mov	r3, r4
   b9a7a:	d807      	bhi.n	b9a8c <memmove+0x20>
   b9a7c:	1e43      	subs	r3, r0, #1
   b9a7e:	42a1      	cmp	r1, r4
   b9a80:	d008      	beq.n	b9a94 <memmove+0x28>
   b9a82:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9a86:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9a8a:	e7f8      	b.n	b9a7e <memmove+0x12>
   b9a8c:	4402      	add	r2, r0
   b9a8e:	4601      	mov	r1, r0
   b9a90:	428a      	cmp	r2, r1
   b9a92:	d100      	bne.n	b9a96 <memmove+0x2a>
   b9a94:	bd10      	pop	{r4, pc}
   b9a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9a9e:	e7f7      	b.n	b9a90 <memmove+0x24>

000b9aa0 <memset>:
   b9aa0:	4402      	add	r2, r0
   b9aa2:	4603      	mov	r3, r0
   b9aa4:	4293      	cmp	r3, r2
   b9aa6:	d100      	bne.n	b9aaa <memset+0xa>
   b9aa8:	4770      	bx	lr
   b9aaa:	f803 1b01 	strb.w	r1, [r3], #1
   b9aae:	e7f9      	b.n	b9aa4 <memset+0x4>

000b9ab0 <srand>:
   b9ab0:	b538      	push	{r3, r4, r5, lr}
   b9ab2:	4b10      	ldr	r3, [pc, #64]	; (b9af4 <srand+0x44>)
   b9ab4:	681d      	ldr	r5, [r3, #0]
   b9ab6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9ab8:	4604      	mov	r4, r0
   b9aba:	b9b3      	cbnz	r3, b9aea <srand+0x3a>
   b9abc:	2018      	movs	r0, #24
   b9abe:	f7fc fc0b 	bl	b62d8 <malloc>
   b9ac2:	4602      	mov	r2, r0
   b9ac4:	63a8      	str	r0, [r5, #56]	; 0x38
   b9ac6:	b920      	cbnz	r0, b9ad2 <srand+0x22>
   b9ac8:	4b0b      	ldr	r3, [pc, #44]	; (b9af8 <srand+0x48>)
   b9aca:	480c      	ldr	r0, [pc, #48]	; (b9afc <srand+0x4c>)
   b9acc:	2142      	movs	r1, #66	; 0x42
   b9ace:	f7fc fc33 	bl	b6338 <__assert_func>
   b9ad2:	490b      	ldr	r1, [pc, #44]	; (b9b00 <srand+0x50>)
   b9ad4:	4b0b      	ldr	r3, [pc, #44]	; (b9b04 <srand+0x54>)
   b9ad6:	e9c0 1300 	strd	r1, r3, [r0]
   b9ada:	4b0b      	ldr	r3, [pc, #44]	; (b9b08 <srand+0x58>)
   b9adc:	6083      	str	r3, [r0, #8]
   b9ade:	230b      	movs	r3, #11
   b9ae0:	8183      	strh	r3, [r0, #12]
   b9ae2:	2100      	movs	r1, #0
   b9ae4:	2001      	movs	r0, #1
   b9ae6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9aea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9aec:	2200      	movs	r2, #0
   b9aee:	611c      	str	r4, [r3, #16]
   b9af0:	615a      	str	r2, [r3, #20]
   b9af2:	bd38      	pop	{r3, r4, r5, pc}
   b9af4:	2003ddc4 	.word	0x2003ddc4
   b9af8:	000bae2d 	.word	0x000bae2d
   b9afc:	000bae44 	.word	0x000bae44
   b9b00:	abcd330e 	.word	0xabcd330e
   b9b04:	e66d1234 	.word	0xe66d1234
   b9b08:	0005deec 	.word	0x0005deec

000b9b0c <strcmp>:
   b9b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9b10:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9b14:	2a01      	cmp	r2, #1
   b9b16:	bf28      	it	cs
   b9b18:	429a      	cmpcs	r2, r3
   b9b1a:	d0f7      	beq.n	b9b0c <strcmp>
   b9b1c:	1ad0      	subs	r0, r2, r3
   b9b1e:	4770      	bx	lr

000b9b20 <strcpy>:
   b9b20:	4603      	mov	r3, r0
   b9b22:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9b26:	f803 2b01 	strb.w	r2, [r3], #1
   b9b2a:	2a00      	cmp	r2, #0
   b9b2c:	d1f9      	bne.n	b9b22 <strcpy+0x2>
   b9b2e:	4770      	bx	lr

000b9b30 <strlen>:
   b9b30:	4603      	mov	r3, r0
   b9b32:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9b36:	2a00      	cmp	r2, #0
   b9b38:	d1fb      	bne.n	b9b32 <strlen+0x2>
   b9b3a:	1a18      	subs	r0, r3, r0
   b9b3c:	3801      	subs	r0, #1
   b9b3e:	4770      	bx	lr

000b9b40 <strncpy>:
   b9b40:	b510      	push	{r4, lr}
   b9b42:	3901      	subs	r1, #1
   b9b44:	4603      	mov	r3, r0
   b9b46:	b132      	cbz	r2, b9b56 <strncpy+0x16>
   b9b48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9b4c:	f803 4b01 	strb.w	r4, [r3], #1
   b9b50:	3a01      	subs	r2, #1
   b9b52:	2c00      	cmp	r4, #0
   b9b54:	d1f7      	bne.n	b9b46 <strncpy+0x6>
   b9b56:	441a      	add	r2, r3
   b9b58:	2100      	movs	r1, #0
   b9b5a:	4293      	cmp	r3, r2
   b9b5c:	d100      	bne.n	b9b60 <strncpy+0x20>
   b9b5e:	bd10      	pop	{r4, pc}
   b9b60:	f803 1b01 	strb.w	r1, [r3], #1
   b9b64:	e7f9      	b.n	b9b5a <strncpy+0x1a>

000b9b66 <strnlen>:
   b9b66:	b510      	push	{r4, lr}
   b9b68:	4602      	mov	r2, r0
   b9b6a:	4401      	add	r1, r0
   b9b6c:	428a      	cmp	r2, r1
   b9b6e:	4613      	mov	r3, r2
   b9b70:	d003      	beq.n	b9b7a <strnlen+0x14>
   b9b72:	781c      	ldrb	r4, [r3, #0]
   b9b74:	3201      	adds	r2, #1
   b9b76:	2c00      	cmp	r4, #0
   b9b78:	d1f8      	bne.n	b9b6c <strnlen+0x6>
   b9b7a:	1a18      	subs	r0, r3, r0
   b9b7c:	bd10      	pop	{r4, pc}
	...

000b9b80 <_strtol_l.constprop.0>:
   b9b80:	2b01      	cmp	r3, #1
   b9b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9b86:	d001      	beq.n	b9b8c <_strtol_l.constprop.0+0xc>
   b9b88:	2b24      	cmp	r3, #36	; 0x24
   b9b8a:	d906      	bls.n	b9b9a <_strtol_l.constprop.0+0x1a>
   b9b8c:	f7fc fbcc 	bl	b6328 <__errno>
   b9b90:	2316      	movs	r3, #22
   b9b92:	6003      	str	r3, [r0, #0]
   b9b94:	2000      	movs	r0, #0
   b9b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9b9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9c80 <_strtol_l.constprop.0+0x100>
   b9b9e:	460d      	mov	r5, r1
   b9ba0:	462e      	mov	r6, r5
   b9ba2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9ba6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9baa:	f017 0708 	ands.w	r7, r7, #8
   b9bae:	d1f7      	bne.n	b9ba0 <_strtol_l.constprop.0+0x20>
   b9bb0:	2c2d      	cmp	r4, #45	; 0x2d
   b9bb2:	d132      	bne.n	b9c1a <_strtol_l.constprop.0+0x9a>
   b9bb4:	782c      	ldrb	r4, [r5, #0]
   b9bb6:	2701      	movs	r7, #1
   b9bb8:	1cb5      	adds	r5, r6, #2
   b9bba:	2b00      	cmp	r3, #0
   b9bbc:	d05b      	beq.n	b9c76 <_strtol_l.constprop.0+0xf6>
   b9bbe:	2b10      	cmp	r3, #16
   b9bc0:	d109      	bne.n	b9bd6 <_strtol_l.constprop.0+0x56>
   b9bc2:	2c30      	cmp	r4, #48	; 0x30
   b9bc4:	d107      	bne.n	b9bd6 <_strtol_l.constprop.0+0x56>
   b9bc6:	782c      	ldrb	r4, [r5, #0]
   b9bc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9bcc:	2c58      	cmp	r4, #88	; 0x58
   b9bce:	d14d      	bne.n	b9c6c <_strtol_l.constprop.0+0xec>
   b9bd0:	786c      	ldrb	r4, [r5, #1]
   b9bd2:	2310      	movs	r3, #16
   b9bd4:	3502      	adds	r5, #2
   b9bd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9bda:	f108 38ff 	add.w	r8, r8, #4294967295
   b9bde:	f04f 0c00 	mov.w	ip, #0
   b9be2:	fbb8 f9f3 	udiv	r9, r8, r3
   b9be6:	4666      	mov	r6, ip
   b9be8:	fb03 8a19 	mls	sl, r3, r9, r8
   b9bec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9bf0:	f1be 0f09 	cmp.w	lr, #9
   b9bf4:	d816      	bhi.n	b9c24 <_strtol_l.constprop.0+0xa4>
   b9bf6:	4674      	mov	r4, lr
   b9bf8:	42a3      	cmp	r3, r4
   b9bfa:	dd24      	ble.n	b9c46 <_strtol_l.constprop.0+0xc6>
   b9bfc:	f1bc 0f00 	cmp.w	ip, #0
   b9c00:	db1e      	blt.n	b9c40 <_strtol_l.constprop.0+0xc0>
   b9c02:	45b1      	cmp	r9, r6
   b9c04:	d31c      	bcc.n	b9c40 <_strtol_l.constprop.0+0xc0>
   b9c06:	d101      	bne.n	b9c0c <_strtol_l.constprop.0+0x8c>
   b9c08:	45a2      	cmp	sl, r4
   b9c0a:	db19      	blt.n	b9c40 <_strtol_l.constprop.0+0xc0>
   b9c0c:	fb06 4603 	mla	r6, r6, r3, r4
   b9c10:	f04f 0c01 	mov.w	ip, #1
   b9c14:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9c18:	e7e8      	b.n	b9bec <_strtol_l.constprop.0+0x6c>
   b9c1a:	2c2b      	cmp	r4, #43	; 0x2b
   b9c1c:	bf04      	itt	eq
   b9c1e:	782c      	ldrbeq	r4, [r5, #0]
   b9c20:	1cb5      	addeq	r5, r6, #2
   b9c22:	e7ca      	b.n	b9bba <_strtol_l.constprop.0+0x3a>
   b9c24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9c28:	f1be 0f19 	cmp.w	lr, #25
   b9c2c:	d801      	bhi.n	b9c32 <_strtol_l.constprop.0+0xb2>
   b9c2e:	3c37      	subs	r4, #55	; 0x37
   b9c30:	e7e2      	b.n	b9bf8 <_strtol_l.constprop.0+0x78>
   b9c32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9c36:	f1be 0f19 	cmp.w	lr, #25
   b9c3a:	d804      	bhi.n	b9c46 <_strtol_l.constprop.0+0xc6>
   b9c3c:	3c57      	subs	r4, #87	; 0x57
   b9c3e:	e7db      	b.n	b9bf8 <_strtol_l.constprop.0+0x78>
   b9c40:	f04f 3cff 	mov.w	ip, #4294967295
   b9c44:	e7e6      	b.n	b9c14 <_strtol_l.constprop.0+0x94>
   b9c46:	f1bc 0f00 	cmp.w	ip, #0
   b9c4a:	da05      	bge.n	b9c58 <_strtol_l.constprop.0+0xd8>
   b9c4c:	2322      	movs	r3, #34	; 0x22
   b9c4e:	6003      	str	r3, [r0, #0]
   b9c50:	4646      	mov	r6, r8
   b9c52:	b942      	cbnz	r2, b9c66 <_strtol_l.constprop.0+0xe6>
   b9c54:	4630      	mov	r0, r6
   b9c56:	e79e      	b.n	b9b96 <_strtol_l.constprop.0+0x16>
   b9c58:	b107      	cbz	r7, b9c5c <_strtol_l.constprop.0+0xdc>
   b9c5a:	4276      	negs	r6, r6
   b9c5c:	2a00      	cmp	r2, #0
   b9c5e:	d0f9      	beq.n	b9c54 <_strtol_l.constprop.0+0xd4>
   b9c60:	f1bc 0f00 	cmp.w	ip, #0
   b9c64:	d000      	beq.n	b9c68 <_strtol_l.constprop.0+0xe8>
   b9c66:	1e69      	subs	r1, r5, #1
   b9c68:	6011      	str	r1, [r2, #0]
   b9c6a:	e7f3      	b.n	b9c54 <_strtol_l.constprop.0+0xd4>
   b9c6c:	2430      	movs	r4, #48	; 0x30
   b9c6e:	2b00      	cmp	r3, #0
   b9c70:	d1b1      	bne.n	b9bd6 <_strtol_l.constprop.0+0x56>
   b9c72:	2308      	movs	r3, #8
   b9c74:	e7af      	b.n	b9bd6 <_strtol_l.constprop.0+0x56>
   b9c76:	2c30      	cmp	r4, #48	; 0x30
   b9c78:	d0a5      	beq.n	b9bc6 <_strtol_l.constprop.0+0x46>
   b9c7a:	230a      	movs	r3, #10
   b9c7c:	e7ab      	b.n	b9bd6 <_strtol_l.constprop.0+0x56>
   b9c7e:	bf00      	nop
   b9c80:	000baec2 	.word	0x000baec2

000b9c84 <strtol>:
   b9c84:	4613      	mov	r3, r2
   b9c86:	460a      	mov	r2, r1
   b9c88:	4601      	mov	r1, r0
   b9c8a:	4802      	ldr	r0, [pc, #8]	; (b9c94 <strtol+0x10>)
   b9c8c:	6800      	ldr	r0, [r0, #0]
   b9c8e:	f7ff bf77 	b.w	b9b80 <_strtol_l.constprop.0>
   b9c92:	bf00      	nop
   b9c94:	2003ddc4 	.word	0x2003ddc4

000b9c98 <__register_exitproc>:
   b9c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9c9c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9d58 <__register_exitproc+0xc0>
   b9ca0:	4606      	mov	r6, r0
   b9ca2:	f8d8 0000 	ldr.w	r0, [r8]
   b9ca6:	461f      	mov	r7, r3
   b9ca8:	460d      	mov	r5, r1
   b9caa:	4691      	mov	r9, r2
   b9cac:	f000 f856 	bl	b9d5c <__retarget_lock_acquire_recursive>
   b9cb0:	4b25      	ldr	r3, [pc, #148]	; (b9d48 <__register_exitproc+0xb0>)
   b9cb2:	681c      	ldr	r4, [r3, #0]
   b9cb4:	b934      	cbnz	r4, b9cc4 <__register_exitproc+0x2c>
   b9cb6:	4c25      	ldr	r4, [pc, #148]	; (b9d4c <__register_exitproc+0xb4>)
   b9cb8:	601c      	str	r4, [r3, #0]
   b9cba:	4b25      	ldr	r3, [pc, #148]	; (b9d50 <__register_exitproc+0xb8>)
   b9cbc:	b113      	cbz	r3, b9cc4 <__register_exitproc+0x2c>
   b9cbe:	681b      	ldr	r3, [r3, #0]
   b9cc0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9cc4:	6863      	ldr	r3, [r4, #4]
   b9cc6:	2b1f      	cmp	r3, #31
   b9cc8:	dd07      	ble.n	b9cda <__register_exitproc+0x42>
   b9cca:	f8d8 0000 	ldr.w	r0, [r8]
   b9cce:	f000 f847 	bl	b9d60 <__retarget_lock_release_recursive>
   b9cd2:	f04f 30ff 	mov.w	r0, #4294967295
   b9cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9cda:	b34e      	cbz	r6, b9d30 <__register_exitproc+0x98>
   b9cdc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9ce0:	b988      	cbnz	r0, b9d06 <__register_exitproc+0x6e>
   b9ce2:	4b1c      	ldr	r3, [pc, #112]	; (b9d54 <__register_exitproc+0xbc>)
   b9ce4:	b923      	cbnz	r3, b9cf0 <__register_exitproc+0x58>
   b9ce6:	f8d8 0000 	ldr.w	r0, [r8]
   b9cea:	f000 f838 	bl	b9d5e <__retarget_lock_release>
   b9cee:	e7f0      	b.n	b9cd2 <__register_exitproc+0x3a>
   b9cf0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9cf4:	f7fc faf0 	bl	b62d8 <malloc>
   b9cf8:	2800      	cmp	r0, #0
   b9cfa:	d0f4      	beq.n	b9ce6 <__register_exitproc+0x4e>
   b9cfc:	2300      	movs	r3, #0
   b9cfe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9d02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9d06:	6863      	ldr	r3, [r4, #4]
   b9d08:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9d0c:	2201      	movs	r2, #1
   b9d0e:	409a      	lsls	r2, r3
   b9d10:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9d14:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9d18:	4313      	orrs	r3, r2
   b9d1a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9d1e:	2e02      	cmp	r6, #2
   b9d20:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9d24:	bf02      	ittt	eq
   b9d26:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9d2a:	4313      	orreq	r3, r2
   b9d2c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9d30:	6863      	ldr	r3, [r4, #4]
   b9d32:	f8d8 0000 	ldr.w	r0, [r8]
   b9d36:	1c5a      	adds	r2, r3, #1
   b9d38:	3302      	adds	r3, #2
   b9d3a:	6062      	str	r2, [r4, #4]
   b9d3c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9d40:	f000 f80e 	bl	b9d60 <__retarget_lock_release_recursive>
   b9d44:	2000      	movs	r0, #0
   b9d46:	e7c6      	b.n	b9cd6 <__register_exitproc+0x3e>
   b9d48:	2003e7e8 	.word	0x2003e7e8
   b9d4c:	2003e75c 	.word	0x2003e75c
   b9d50:	00000000 	.word	0x00000000
   b9d54:	000b62d9 	.word	0x000b62d9
   b9d58:	2003de28 	.word	0x2003de28

000b9d5c <__retarget_lock_acquire_recursive>:
   b9d5c:	4770      	bx	lr

000b9d5e <__retarget_lock_release>:
   b9d5e:	4770      	bx	lr

000b9d60 <__retarget_lock_release_recursive>:
   b9d60:	4770      	bx	lr

000b9d62 <link_code_end>:
	...

000b9d64 <dynalib_user>:
   b9d64:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9d74:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9d84:	7620 7269 7574 6c61 4100 6772 6e6f 4220      virtual.Argon B
   b9d94:	454c 4120 6464 6572 7373 253a 0a73 5000     LE Address:%s..P
   b9da4:	616c 5479 6d69 2165 6325 2500 2069 6564     layTime!%c.%i de
   b9db4:	6976 6563 2073 6f66 6e75 0a64 4600 554f     vices found..FOU
   b9dc4:	444e 253d 3230 3a58 3025 5832 253a 3230     ND=%02X:%02X:%02
   b9dd4:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   b9de4:	522c 5353 3d49 6925 000a 7550 6c62 7369     ,RSSI=%i..Publis
   b9df4:	6968 676e 2520 2069 000a 6572 6563 7669     hing %i ..receiv
   b9e04:	6465 6420 7461 2061 7266 6d6f 253a 3230     ed data from:%02
   b9e14:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   b9e24:	253a 3230 3a58 3025 5832 000a 3025 5832     :%02X:%02X..%02X
   b9e34:	4d00 7365 6173 6567 203a 7325 000a 7554     .Message: %s..Tu
   b9e44:	6e72 6f20 206e 7562 7474 6e6f 6925 000a     rn on button%i..
   b9e54:	4536 3034 3030 3130 422d 4135 2d33 3346     6E400001-B5A3-F3
   b9e64:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   b9e74:	4143 4539 3600 3445 3030 3030 2d32 3542     CA9E.6E400002-B5
   b9e84:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   b9e94:	3245 4434 4343 3941 0045 4536 3034 3030     E24DCCA9E.6E4000
   b9ea4:	3330 422d 4135 2d33 3346 3339 452d 4130     03-B5A3-F393-E0A
   b9eb4:	2d39 3545 4530 3432 4344 4143 4539 7400     9-E50E24DCCA9E.t
   b9ec4:	0078 7872 4700 6261 6165 6e72 6c6f 3264     x.rx.Gabearnold2
   b9ed4:	0033 6f69 612e 6164 7266 6975 2e74 6f63     3.io.adafruit.co
   b9ee4:	006d 6961 5f6f 6365 6553 3137 596a 7843     m.aio_ecSe71jYCx
   b9ef4:	4e59 674c 7a38 4e77 6676 704b 6b65 5951     YNLg8zwNvfKpekQY
   b9f04:	6e38 4700 6261 6165 6e72 6c6f 3264 2f33     8n.Gabearnold23/
   b9f14:	6566 6465 2f73 7372 6973                     feeds/rssi.

000b9f1f <_ZL8myBitmap>:
   b9f1f:	feff ff7f ffff ffff ffff 3fff ffff fcff     ...........?....
   b9f2f:	ff0f ffff ffff ffff 1ff0 ffff f8ff ff01     ................
   b9f3f:	ffff ffff ffff 1fc0 ffff f8ff 7f00 ffff     ................
   b9f4f:	ffff ffff 0f00 ffff f0ff 1f00 ffff ffff     ................
   b9f5f:	fcff 0f00 ffff f0ff 0700 ffff ffff f0ff     ................
   b9f6f:	0700 ffff f0ff 0100 ffff ffff c0ff 0700     ................
   b9f7f:	ffff e0ff 0000 ff7f ffff 00ff 0300 ffff     ................
   b9f8f:	e0ff 0000 ff3f ffff 00fe 0300 ffff c0ff     ....?...........
   b9f9f:	001c ff1f ffff 00f8 030e ffff c0ff 801f     ................
   b9faf:	ff07 ffff 00f0 017e ffff c0ff e03f ff03     ......~.....?...
   b9fbf:	ffff 00e0 01ff ffff c0ff f03f ff01 ffff     ..........?.....
   b9fcf:	03c0 01ff ffff c0ff fc7f f000 0700 0f00     ................
   b9fdf:	81ff ffff 80ff fe7f 0000 0000 1f00 81ff     ................
   b9fef:	ffff 80ff ff7f 0080 0000 7f00 80ff ffff     ................
   b9fff:	80ff ff7f 00c0 0000 ff00 80ff ffff 80ff     ................
   ba00f:	ffff 0080 0000 ff00 80ff ffff 80ff feff     ................
   ba01f:	0000 0000 7f00 80ff ffff 80ff fcff 0000     ................
   ba02f:	0000 1f00 c0ff ffff 80ff f0ff 0000 0000     ................
   ba03f:	0f00 80ff ffff 80ff e07f 0000 0000 0300     ................
   ba04f:	80ff ffff 80ff c07f 0000 0000 0100 80ff     ................
   ba05f:	ffff c0ff 807f 0000 0000 0000 81ff ffff     ................
   ba06f:	c0ff 007f 0000 0000 0000 817f ffff c0ff     ................
   ba07f:	003e 0000 0000 0000 013f ffff c0ff 003c     >.......?.....<.
   ba08f:	0000 0000 0000 011f ffff c0ff 0038 0000     ............8...
   ba09f:	0000 0000 010f ffff e0ff 0018 0000 0000     ................
   ba0af:	0000 030e ffff e0ff 0010 0000 0000 0000     ................
   ba0bf:	0306 ffff e0ff 0000 0000 0000 0000 0700     ................
   ba0cf:	ffff f0ff 0000 0000 0000 0000 0700 ffff     ................
   ba0df:	f0ff 0000 0000 0000 0000 0700 ffff f8ff     ................
	...
   ba0f7:	0f00 ffff f8ff 0000 0000 0000 0000 0f00     ................
   ba107:	ffff fcff 0000 0000 0000 0000 1f00 ffff     ................
   ba117:	fcff 0000 0000 0000 0000 3f00 ffff feff     ...........?....
	...
   ba12f:	3f00 ffff ffff 0000 0000 0000 0000 7f00     .?..............
   ba13f:	ffff ffff 0000 0000 0000 0000 7f00 ffff     ................
   ba14f:	ffff 0000 0000 0000 0000 7f00 ffff ffff     ................
	...
   ba167:	7f00 ffff ffff 0000 0000 0000 0000 7f00     ................
   ba177:	ffff feff 0000 0000 0000 0000 7f00 ffff     ................
   ba187:	feff 0000 0000 0000 0000 3f00 fffe fe0f     ...........?....
	...
   ba19f:	3f00 7ff0 fe80 0000 0000 0000 0000 3f00     .?.............?
   ba1af:	ff01 0ef8 0000 0000 0000 0000 7000 ff3f     .............p?.
   ba1bf:	03ff 0000 0000 0000 0000 6000 ffff f3ff     ...........`....
	...
   ba1d7:	7f00 ffff ffff 0000 0000 0000 0000 7f00     ................
   ba1e7:	ffff ffff 0000 0000 0000 0000 7f00 ffff     ................
   ba1f7:	0300 0000 0000 0000 0000 4000 7f00 0300     ...........@....
	...
   ba20f:	ff00 ffff ffff 0080 0000 0008 0000 ff00     ................
   ba21f:	ffff ffff 0080 0000 021e 0000 df00 ffff     ................
   ba22f:	e1ff 00c0 2900 9eff 0000 c101 ffff 03ff     .....)..........
   ba23f:	00c0 2b00 d4ff 0000 e001 ff3f 3fe0 00e0     ...+......?..?..
   ba24f:	3700 e4ff 0000 fe03 ff03 ff83 00e0 1f00     .7..............
   ba25f:	fcff 0000 ff03 ffe0 ff9f 00e0 1f00 f8ff     ................
   ba26f:	0000 ff07 fffe ffff 00f0 0f00 f8ff 0000     ................
   ba27f:	ff07 ffff ffff 00f8 0f00 f0ff 0000 ff0f     ................
   ba28f:	ffff ffff 00fc 0700 e0ff 0000 ff1f ffff     ................
   ba29f:	ffff 00fc 0300 e0ff 0000 ff3f ffff ffff     ..........?.....
   ba2af:	00fe 0100 c0ff 0000 ff3f ffff ffff 00ff     ........?.......
   ba2bf:	0000 00ff 0000 ff7f ffff ffff 80ff 0000     ................
   ba2cf:	001c 0000 ffff ffff ffff c0ff 0000 0000     ................
   ba2df:	0300 ffff ffff ffff e0ff 0000 0000 0700     ................
   ba2ef:	ffff ffff ffff f8ff 0000 0000 0f00 ffff     ................
   ba2ff:	ffff ffff fcff 0000 0000 1f00 ffff ffff     ................
   ba30f:	ffff ffff 0000 0000 7f00 ffff ffff ffff     ................
   ba31f:	ffff 00c0 0000 ff01 ffff ffff ffff ffff     ................
   ba32f:	00f0 0000 ff07 ffff ffff ffff ffff 00fc     ................
   ba33f:	0000 ff1f ffff ffff ffff ffff 80ff 0100     ................
   ba34f:	ffff ffff ffff ffff ffff feff 3f00 ffff     .............?..
   ba35f:	ffff ffff                                    .....

000ba364 <CSWTCH.88>:
   ba364:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   ba374:	0050 0000                                   P...

000ba378 <_ZTV16Adafruit_SSD1306>:
	...
   ba380:	4f19 000b 4fa9 000b 56e1 000b 87f1 000b     .O...O...V......
   ba390:	4f1d 000b 5365 000b 4da5 000b 4c35 000b     .O..eS...M..5L..
   ba3a0:	5423 000b 54c1 000b 54f7 000b 5513 000b     #T...T...T...U..

000ba3b0 <_ZL4font>:
   ba3b0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ba3c0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ba3d0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ba3e0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ba3f0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ba400:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ba410:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ba420:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ba430:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ba440:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ba450:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ba460:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ba470:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   ba480:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   ba490:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   ba4a0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   ba4b0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   ba4c0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   ba4d0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ba4e0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ba4f0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ba500:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ba510:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ba520:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ba530:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ba540:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ba550:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ba560:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ba570:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ba580:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba590:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba5a0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba5b0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba5c0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba5d0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba5e0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba5f0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba600:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba610:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba620:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba630:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba640:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   ba650:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba660:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba670:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   ba680:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba690:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   ba6a0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   ba6b0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   ba6c0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba6d0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba6e0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba6f0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba700:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba710:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba720:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   ba730:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   ba740:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   ba750:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   ba760:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   ba770:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   ba780:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   ba790:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   ba7a0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   ba7b0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   ba7c0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   ba7d0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   ba7e0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   ba7f0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   ba800:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   ba810:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   ba820:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   ba830:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   ba840:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   ba850:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   ba860:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   ba870:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   ba880:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   ba890:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   ba8a0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000ba8ac <_ZTV12Adafruit_GFX>:
	...
   ba8bc:	56e1 000b 87f1 000b 40a1 000b 5365 000b     .V.......@..eS..
   ba8cc:	548b 000b 54a7 000b 5423 000b 54c1 000b     .T...T..#T...T..
   ba8dc:	54f7 000b 5513 000b                         .T...U..

000ba8e4 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   ba8ec:	57b9 000b 5845 000b 5765 000b 5813 000b     .W..EX..eW...X..
   ba8fc:	5853 000b 5779 000b 57bb 000b 7244 706f     SX..yW...W..Drop
   ba90c:	6570 2064 2061 6170 6b63 7465 4d00 5451     ped a packet.MQT
   ba91c:	0054 0000                                   T...

000ba920 <_ZTV13Adafruit_MQTT>:
	...
   ba930:	40a1 000b 40a1 000b 40a1 000b 40a1 000b     .@...@...@...@..
   ba940:	40a1 000b                                   .@..

000ba944 <_ZTVN5spark13EthernetClassE>:
	...
   ba94c:	63b7 000b 63ad 000b 63a3 000b 6399 000b     .c...c...c...c..
   ba95c:	638d 000b 6381 000b 948d 000b 9495 000b     .c...c..........
   ba96c:	6375 000b 636d 000b 6363 000b 6359 000b     uc..mc..cc..Yc..
   ba97c:	94c5 000b                                   ....

000ba980 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba980:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   ba990:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   ba9a0:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   ba9b0:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   ba9c0:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   ba9d0:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   ba9e0:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   ba9f0:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   baa00:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   baa10:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   baa20:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   baa30:	6574 6d20 6d65 726f 2179 4600 6961 656c     te memory!.Faile
   baa40:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   baa50:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   baa60:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   baa70:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   baa80:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   baa90:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   baaa0:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   baab0:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   baac0:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   baad0:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   baae0:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000baaf0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   baaf8:	67f9 000b 685d 000b 69a9 000b 6887 000b     .g..]h...i...h..
   bab08:	67fd 000b                                   .g..

000bab0c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bab14:	67f5 000b 686b 000b 67f7 000b 688d 000b     .g..kh...g...h..
   bab24:	681d 000b                                   .h..

000bab28 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bab30:	67f3 000b 6879 000b 73b5 000b 6893 000b     .g..yh...s...h..
   bab40:	683d 000b                                   =h..

000bab44 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bab50:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bab62 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bab62:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bab72 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bab72:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bab82:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bab92:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000baba4 <_ZTV9IPAddress>:
	...
   babac:	8abd 000b 8aad 000b 8aaf 000b               ............

000babb8 <_ZTV9USBSerial>:
	...
   babc0:	8bcf 000b 8c37 000b 8c0d 000b 87f1 000b     ....7...........
   babd0:	8bff 000b 8bd1 000b 8be1 000b 8c31 000b     ............1...
   babe0:	8bf1 000b 8bc9 000b                         ........

000babe8 <_ZTV11USARTSerial>:
	...
   babf0:	8cd9 000b 8d45 000b 8d1d 000b 87f1 000b     ....E...........
   bac00:	8ced 000b 8d09 000b 8cfb 000b 8d17 000b     ................
   bac10:	8cdb 000b 8cdf 000b                         ........

000bac18 <_ZTV7TwoWire>:
	...
   bac20:	8d7d 000b 8dc7 000b 8d9f 000b 8d7f 000b     }...............
   bac30:	8da7 000b 8daf 000b 8db7 000b 8dbf 000b     ................
   bac40:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bac50:	2072 203d 6425 0000                         r = %d..

000bac58 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bac60:	8ebd 000b 8ee1 000b 93cb 000b 8eef 000b     ................
   bac70:	8ec1 000b                                   ....

000bac74 <_ZTV9TCPClient>:
	...
   bac7c:	893d 000b 8955 000b 8e39 000b 8e53 000b     =...U...9...S...
   bac8c:	9261 000b 8e7d 000b 90d7 000b 8eb1 000b     a...}...........
   bac9c:	9169 000b 8fa9 000b 9105 000b 9315 000b     i...............
   bacac:	90a5 000b 8eb3 000b 8e65 000b 8ef5 000b     ........e.......
   bacbc:	8f89 000b                                   ....

000bacc0 <_ZTVN5spark9WiFiClassE>:
	...
   bacc8:	942f 000b 9425 000b 941b 000b 93d1 000b     /...%...........
   bacd8:	940f 000b 9403 000b 948d 000b 9495 000b     ................
   bace8:	93f7 000b 93ef 000b 93e5 000b 93db 000b     ................
   bacf8:	94c5 000b                                   ....

000bacfc <_ZTVN5spark12NetworkClassE>:
	...
   bad04:	944d 000b 9457 000b 9461 000b 946b 000b     M...W...a...k...
   bad14:	9475 000b 9481 000b 948d 000b 9495 000b     u...............
   bad24:	949d 000b 94a9 000b 94b1 000b 94bb 000b     ................
   bad34:	94c5 000b                                   ....

000bad38 <_ZSt7nothrow>:
	...

000bad39 <_ZTSSt19_Sp_make_shared_tag>:
   bad39:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bad49:	6572 5f64 6174 0067 0000                     red_tag....

000bad54 <_ZTISt19_Sp_make_shared_tag>:
   bad54:	ad94 000b ad39 000b                         ....9...

000bad5c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bad5c:	adf4 000b ad68 000b ae18 000b               ....h.......

000bad68 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bad68:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bad78:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bad88:	0045 0000                                   E...

000bad8c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bad8c:	0000 0000 ad5c 000b 981d 000b 9831 000b     ....\.......1...
   bad9c:	99c5 000b 99c5 000b 989b 000b 97dd 000b     ................
   badac:	9883 000b 9845 000b 980f 000b               ....E.......

000badb8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   badb8:	adf4 000b adc4 000b ad5c 000b               ........\...

000badc4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   badc4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   badd4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bade4:	666e 456f 0000 0000                         nfoE....

000badec <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   badec:	0000 0000 adb8 000b 98c5 000b 98d9 000b     ................
   badfc:	99c5 000b 99c5 000b 989b 000b 97dd 000b     ................
   bae0c:	9999 000b 9925 000b 98ed 000b               ....%.......

000bae18 <_ZTISt9type_info>:
   bae18:	ad94 000b ae20 000b                         .... ...

000bae20 <_ZTSSt9type_info>:
   bae20:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bae30:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bae40:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bae50:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bae60:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bae70:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bae80:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bae90:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   baea0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   baeb0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000baec1 <_ctype_>:
   baec1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   baed1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   baee1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   baef1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   baf01:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   baf11:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   baf21:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   baf31:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   baf41:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bafc2 <link_const_variable_data_end>:
	...

000bafc4 <link_constructors_location>:
   bafc4:	000b45d1 	.word	0x000b45d1
   bafc8:	000b4c25 	.word	0x000b4c25
   bafcc:	000b63c1 	.word	0x000b63c1
   bafd0:	000b6555 	.word	0x000b6555
   bafd4:	000b87e1 	.word	0x000b87e1
   bafd8:	000b8911 	.word	0x000b8911
   bafdc:	000b8921 	.word	0x000b8921
   bafe0:	000b8969 	.word	0x000b8969
   bafe4:	000b9439 	.word	0x000b9439
   bafe8:	000b959d 	.word	0x000b959d

000bafec <link_constructors_end>:
   bafec:	00000000 	.word	0x00000000
